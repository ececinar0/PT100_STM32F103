
PT100_MAX31865.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000580c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e18  08005920  08005920  00015920  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006738  08006738  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08006738  08006738  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006738  08006738  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006738  08006738  00016738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800673c  0800673c  0001673c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006740  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000510  20000078  080067b8  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  080067b8  00020588  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000999d  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b0f  00000000  00000000  00029a3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  0002b550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002bf30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c65  00000000  00000000  0002c850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c51f  00000000  00000000  000444b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084d96  00000000  00000000  000509d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d576a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003184  00000000  00000000  000d57bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08005904 	.word	0x08005904

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08005904 	.word	0x08005904

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpun>:
 8000b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x10>
 8000b6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b72:	d10a      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x20>
 8000b7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0001 	mov.w	r0, #1
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_d2f>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b98:	bf24      	itt	cs
 8000b9a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b9e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ba2:	d90d      	bls.n	8000bc0 <__aeabi_d2f+0x30>
 8000ba4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bb4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb8:	bf08      	it	eq
 8000bba:	f020 0001 	biceq.w	r0, r0, #1
 8000bbe:	4770      	bx	lr
 8000bc0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bc4:	d121      	bne.n	8000c0a <__aeabi_d2f+0x7a>
 8000bc6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bca:	bfbc      	itt	lt
 8000bcc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	4770      	bxlt	lr
 8000bd2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bd6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bda:	f1c2 0218 	rsb	r2, r2, #24
 8000bde:	f1c2 0c20 	rsb	ip, r2, #32
 8000be2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bea:	bf18      	it	ne
 8000bec:	f040 0001 	orrne.w	r0, r0, #1
 8000bf0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bfc:	ea40 000c 	orr.w	r0, r0, ip
 8000c00:	fa23 f302 	lsr.w	r3, r3, r2
 8000c04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c08:	e7cc      	b.n	8000ba4 <__aeabi_d2f+0x14>
 8000c0a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0e:	d107      	bne.n	8000c20 <__aeabi_d2f+0x90>
 8000c10:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c14:	bf1e      	ittt	ne
 8000c16:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c1a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c1e:	4770      	bxne	lr
 8000c20:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c24:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <__gesf2>:
 8000c30:	f04f 3cff 	mov.w	ip, #4294967295
 8000c34:	e006      	b.n	8000c44 <__cmpsf2+0x4>
 8000c36:	bf00      	nop

08000c38 <__lesf2>:
 8000c38:	f04f 0c01 	mov.w	ip, #1
 8000c3c:	e002      	b.n	8000c44 <__cmpsf2+0x4>
 8000c3e:	bf00      	nop

08000c40 <__cmpsf2>:
 8000c40:	f04f 0c01 	mov.w	ip, #1
 8000c44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c48:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c54:	bf18      	it	ne
 8000c56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5a:	d011      	beq.n	8000c80 <__cmpsf2+0x40>
 8000c5c:	b001      	add	sp, #4
 8000c5e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c62:	bf18      	it	ne
 8000c64:	ea90 0f01 	teqne	r0, r1
 8000c68:	bf58      	it	pl
 8000c6a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c6e:	bf88      	it	hi
 8000c70:	17c8      	asrhi	r0, r1, #31
 8000c72:	bf38      	it	cc
 8000c74:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c78:	bf18      	it	ne
 8000c7a:	f040 0001 	orrne.w	r0, r0, #1
 8000c7e:	4770      	bx	lr
 8000c80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c84:	d102      	bne.n	8000c8c <__cmpsf2+0x4c>
 8000c86:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c8a:	d105      	bne.n	8000c98 <__cmpsf2+0x58>
 8000c8c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c90:	d1e4      	bne.n	8000c5c <__cmpsf2+0x1c>
 8000c92:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c96:	d0e1      	beq.n	8000c5c <__cmpsf2+0x1c>
 8000c98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_cfrcmple>:
 8000ca0:	4684      	mov	ip, r0
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	4661      	mov	r1, ip
 8000ca6:	e7ff      	b.n	8000ca8 <__aeabi_cfcmpeq>

08000ca8 <__aeabi_cfcmpeq>:
 8000ca8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000caa:	f7ff ffc9 	bl	8000c40 <__cmpsf2>
 8000cae:	2800      	cmp	r0, #0
 8000cb0:	bf48      	it	mi
 8000cb2:	f110 0f00 	cmnmi.w	r0, #0
 8000cb6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000cb8 <__aeabi_fcmpeq>:
 8000cb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cbc:	f7ff fff4 	bl	8000ca8 <__aeabi_cfcmpeq>
 8000cc0:	bf0c      	ite	eq
 8000cc2:	2001      	moveq	r0, #1
 8000cc4:	2000      	movne	r0, #0
 8000cc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cca:	bf00      	nop

08000ccc <__aeabi_fcmplt>:
 8000ccc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cd0:	f7ff ffea 	bl	8000ca8 <__aeabi_cfcmpeq>
 8000cd4:	bf34      	ite	cc
 8000cd6:	2001      	movcc	r0, #1
 8000cd8:	2000      	movcs	r0, #0
 8000cda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cde:	bf00      	nop

08000ce0 <__aeabi_fcmple>:
 8000ce0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ce4:	f7ff ffe0 	bl	8000ca8 <__aeabi_cfcmpeq>
 8000ce8:	bf94      	ite	ls
 8000cea:	2001      	movls	r0, #1
 8000cec:	2000      	movhi	r0, #0
 8000cee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cf2:	bf00      	nop

08000cf4 <__aeabi_fcmpge>:
 8000cf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cf8:	f7ff ffd2 	bl	8000ca0 <__aeabi_cfrcmple>
 8000cfc:	bf94      	ite	ls
 8000cfe:	2001      	movls	r0, #1
 8000d00:	2000      	movhi	r0, #0
 8000d02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d06:	bf00      	nop

08000d08 <__aeabi_fcmpgt>:
 8000d08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d0c:	f7ff ffc8 	bl	8000ca0 <__aeabi_cfrcmple>
 8000d10:	bf34      	ite	cc
 8000d12:	2001      	movcc	r0, #1
 8000d14:	2000      	movcs	r0, #0
 8000d16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d1a:	bf00      	nop

08000d1c <__aeabi_f2uiz>:
 8000d1c:	0042      	lsls	r2, r0, #1
 8000d1e:	d20e      	bcs.n	8000d3e <__aeabi_f2uiz+0x22>
 8000d20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d24:	d30b      	bcc.n	8000d3e <__aeabi_f2uiz+0x22>
 8000d26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d2e:	d409      	bmi.n	8000d44 <__aeabi_f2uiz+0x28>
 8000d30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d38:	fa23 f002 	lsr.w	r0, r3, r2
 8000d3c:	4770      	bx	lr
 8000d3e:	f04f 0000 	mov.w	r0, #0
 8000d42:	4770      	bx	lr
 8000d44:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d48:	d101      	bne.n	8000d4e <__aeabi_f2uiz+0x32>
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	d102      	bne.n	8000d54 <__aeabi_f2uiz+0x38>
 8000d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d52:	4770      	bx	lr
 8000d54:	f04f 0000 	mov.w	r0, #0
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <MAX31865_Init>:
//P.S. Максимальная скорость spi 5 МГц.
//Также обратите внимание, что Clock Polarity(CLPOL) = Low. Clock Phase(CPHA) = 2 Edge.
/*-------------------------------------------Для работы по spi-----------------------------------------------*/

/*=======================ИНИЦИАЛИЗАЦИЯ МОДУЛЯ MAX31865=========================*/
void MAX31865_Init(uint8_t num_wires) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
	///Не вижу особого смысла выводить полную настройку модуля, поэтому сделаем
	///небольшое упрощение для конечного пользователя
	///все, что может настроить пользователь - это выбрать тип подключения
	///2,3 или 4 проводное
	/// \param num_wires - тип подключения датчика 2,3 или 4 проводное
	uint8_t MAX31865_Reinitialization_cnt = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	73fb      	strb	r3, [r7, #15]
	MAX31865_Sensor_Error = 0;
 8000d6a:	4b23      	ldr	r3, [pc, #140]	; (8000df8 <MAX31865_Init+0x9c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
	uint8_t MAX31865_Configuration_register_write[] = { 0x80, 0x00 };
 8000d70:	2380      	movs	r3, #128	; 0x80
 8000d72:	81bb      	strh	r3, [r7, #12]
	if (num_wires == 2 || num_wires == 4) {
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d002      	beq.n	8000d80 <MAX31865_Init+0x24>
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	2b04      	cmp	r3, #4
 8000d7e:	d102      	bne.n	8000d86 <MAX31865_Init+0x2a>
		MAX31865_Configuration_register_write[1] = 0xC3; //0xC3
 8000d80:	23c3      	movs	r3, #195	; 0xc3
 8000d82:	737b      	strb	r3, [r7, #13]
 8000d84:	e004      	b.n	8000d90 <MAX31865_Init+0x34>
	} else if (num_wires == 3) {
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	2b03      	cmp	r3, #3
 8000d8a:	d101      	bne.n	8000d90 <MAX31865_Init+0x34>
		MAX31865_Configuration_register_write[1] = 0xD3; //0xD3
 8000d8c:	23d3      	movs	r3, #211	; 0xd3
 8000d8e:	737b      	strb	r3, [r7, #13]
	}
	cs_set();
 8000d90:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <MAX31865_Init+0xa0>)
 8000d92:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d96:	611a      	str	r2, [r3, #16]
	HAL_SPI_Transmit(&hspi1, MAX31865_Configuration_register_write, 2, 100);
 8000d98:	f107 010c 	add.w	r1, r7, #12
 8000d9c:	2364      	movs	r3, #100	; 0x64
 8000d9e:	2202      	movs	r2, #2
 8000da0:	4817      	ldr	r0, [pc, #92]	; (8000e00 <MAX31865_Init+0xa4>)
 8000da2:	f002 fd13 	bl	80037cc <HAL_SPI_Transmit>
	cs_reset();
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <MAX31865_Init+0xa0>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	611a      	str	r2, [r3, #16]
	//Дабы достучаться до датчика после подачи питания, т.к. с первого раза инициализация может и не пройти, заведем цикл.
	while (MAX31865_Configuration_info() != 0xD1 && MAX31865_Configuration_info() != 0xC1) {
 8000dac:	e013      	b.n	8000dd6 <MAX31865_Init+0x7a>
		MAX31865_Reinitialization_cnt++;
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	3301      	adds	r3, #1
 8000db2:	73fb      	strb	r3, [r7, #15]

		cs_set();
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MAX31865_Init+0xa0>)
 8000db6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dba:	611a      	str	r2, [r3, #16]
		HAL_SPI_Transmit(&hspi1, MAX31865_Configuration_register_write, 2, 100);
 8000dbc:	f107 010c 	add.w	r1, r7, #12
 8000dc0:	2364      	movs	r3, #100	; 0x64
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	480e      	ldr	r0, [pc, #56]	; (8000e00 <MAX31865_Init+0xa4>)
 8000dc6:	f002 fd01 	bl	80037cc <HAL_SPI_Transmit>
		cs_reset();
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MAX31865_Init+0xa0>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	611a      	str	r2, [r3, #16]

		if (MAX31865_Reinitialization_cnt == 100) {
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	2b64      	cmp	r3, #100	; 0x64
 8000dd4:	d00a      	beq.n	8000dec <MAX31865_Init+0x90>
	while (MAX31865_Configuration_info() != 0xD1 && MAX31865_Configuration_info() != 0xC1) {
 8000dd6:	f000 f815 	bl	8000e04 <MAX31865_Configuration_info>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2bd1      	cmp	r3, #209	; 0xd1
 8000dde:	d006      	beq.n	8000dee <MAX31865_Init+0x92>
 8000de0:	f000 f810 	bl	8000e04 <MAX31865_Configuration_info>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2bc1      	cmp	r3, #193	; 0xc1
 8000de8:	d1e1      	bne.n	8000dae <MAX31865_Init+0x52>
			break;
		}

	}

}
 8000dea:	e000      	b.n	8000dee <MAX31865_Init+0x92>
			break;
 8000dec:	bf00      	nop
}
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200000a0 	.word	0x200000a0
 8000dfc:	40010800 	.word	0x40010800
 8000e00:	20000110 	.word	0x20000110

08000e04 <MAX31865_Configuration_info>:
/*=======================ИНИЦИАЛИЗАЦИЯ МОДУЛЯ MAX31865=========================*/

/*====================ИНФОРМАЦИЯ О НАСТРОЙКЕ МОДУЛЯ MAX31865===================*/
uint8_t MAX31865_Configuration_info(void) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
	///Функция получения информации о конфигурации модуля MAX31865
	///Возвращает значение конфигурации.
	///Не удивляйтесь, если отправите при инициализации 0xC3, а получите 0xC1
	///(см. datasheet MAX31865 стр.14 "The fault status clear bit D1, self-clears to 0.")
	uint8_t read_data = 0x00;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	71fb      	strb	r3, [r7, #7]
	uint8_t MAX31865_Configuration = 0x00;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	71bb      	strb	r3, [r7, #6]
	cs_set();
 8000e12:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <MAX31865_Configuration_info+0x40>)
 8000e14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e18:	611a      	str	r2, [r3, #16]
	HAL_SPI_Transmit(&hspi1, &read_data, 1, 100);
 8000e1a:	1df9      	adds	r1, r7, #7
 8000e1c:	2364      	movs	r3, #100	; 0x64
 8000e1e:	2201      	movs	r2, #1
 8000e20:	4809      	ldr	r0, [pc, #36]	; (8000e48 <MAX31865_Configuration_info+0x44>)
 8000e22:	f002 fcd3 	bl	80037cc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &MAX31865_Configuration, 1, 100);
 8000e26:	1db9      	adds	r1, r7, #6
 8000e28:	2364      	movs	r3, #100	; 0x64
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	4806      	ldr	r0, [pc, #24]	; (8000e48 <MAX31865_Configuration_info+0x44>)
 8000e2e:	f002 fe09 	bl	8003a44 <HAL_SPI_Receive>
	cs_reset();
 8000e32:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <MAX31865_Configuration_info+0x40>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	611a      	str	r2, [r3, #16]
	return MAX31865_Configuration;
 8000e38:	79bb      	ldrb	r3, [r7, #6]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40010800 	.word	0x40010800
 8000e48:	20000110 	.word	0x20000110
 8000e4c:	00000000 	.word	0x00000000

08000e50 <MAX31865_Get_Temperature>:
/*====================ИНФОРМАЦИЯ О НАСТРОЙКЕ МОДУЛЯ MAX31865===================*/

/*===================ОСНОВНАЯ ФУНКЦИЯ РАБОТЫ С МОДУЛЕМ MAX31865==================*/
double MAX31865_Get_Temperature(void) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
		uint8_t Fault_Status; //Статус неисправности
	};

	struct rx_data_MAX31865 MAX31865_receieve_data;

	uint8_t MAX31865_start_address_of_the_poll = 0x01; //Адрес регистра, с которого начнем чтение данных
 8000e56:	2301      	movs	r3, #1
 8000e58:	71fb      	strb	r3, [r7, #7]
	uint8_t MAX31865_rx_buffer[7]; //буфер, куда будем складывать приходящие данные
	cs_set();
 8000e5a:	4b2f      	ldr	r3, [pc, #188]	; (8000f18 <MAX31865_Get_Temperature+0xc8>)
 8000e5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e60:	611a      	str	r2, [r3, #16]
	HAL_SPI_Transmit(&hspi1, &MAX31865_start_address_of_the_poll, 1, 100);
 8000e62:	1df9      	adds	r1, r7, #7
 8000e64:	2364      	movs	r3, #100	; 0x64
 8000e66:	2201      	movs	r2, #1
 8000e68:	482c      	ldr	r0, [pc, #176]	; (8000f1c <MAX31865_Get_Temperature+0xcc>)
 8000e6a:	f002 fcaf 	bl	80037cc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, MAX31865_rx_buffer, 7, 100);
 8000e6e:	4639      	mov	r1, r7
 8000e70:	2364      	movs	r3, #100	; 0x64
 8000e72:	2207      	movs	r2, #7
 8000e74:	4829      	ldr	r0, [pc, #164]	; (8000f1c <MAX31865_Get_Temperature+0xcc>)
 8000e76:	f002 fde5 	bl	8003a44 <HAL_SPI_Receive>
	cs_reset();
 8000e7a:	4b27      	ldr	r3, [pc, #156]	; (8000f18 <MAX31865_Get_Temperature+0xc8>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	611a      	str	r2, [r3, #16]
	MAX31865_receieve_data.RTD_Resistance_Registers = ((MAX31865_rx_buffer[0] << 8) | MAX31865_rx_buffer[1]) >> 1; //Данные регистров сопротивления
 8000e80:	783b      	ldrb	r3, [r7, #0]
 8000e82:	021b      	lsls	r3, r3, #8
 8000e84:	787a      	ldrb	r2, [r7, #1]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	105b      	asrs	r3, r3, #1
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	813b      	strh	r3, [r7, #8]
	MAX31865_receieve_data.High_Fault_Threshold = ((MAX31865_rx_buffer[2] << 8) | MAX31865_rx_buffer[3]) >> 1; //Данные верхнего порого неисправности
 8000e8e:	78bb      	ldrb	r3, [r7, #2]
 8000e90:	021b      	lsls	r3, r3, #8
 8000e92:	78fa      	ldrb	r2, [r7, #3]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	105b      	asrs	r3, r3, #1
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	817b      	strh	r3, [r7, #10]
	MAX31865_receieve_data.Low_Fault_Threshold = (MAX31865_rx_buffer[4] << 8) | MAX31865_rx_buffer[5]; //Данные нижнего порога неисправности
 8000e9c:	793b      	ldrb	r3, [r7, #4]
 8000e9e:	021b      	lsls	r3, r3, #8
 8000ea0:	b21a      	sxth	r2, r3
 8000ea2:	797b      	ldrb	r3, [r7, #5]
 8000ea4:	b21b      	sxth	r3, r3
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	b21b      	sxth	r3, r3
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	81bb      	strh	r3, [r7, #12]
	MAX31865_receieve_data.Fault_Status = MAX31865_rx_buffer[6]; //Статус неисправности
 8000eae:	79bb      	ldrb	r3, [r7, #6]
 8000eb0:	73bb      	strb	r3, [r7, #14]
	if (MAX31865_receieve_data.Fault_Status > 0x00) {
 8000eb2:	7bbb      	ldrb	r3, [r7, #14]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d008      	beq.n	8000eca <MAX31865_Get_Temperature+0x7a>

		/*--------------Здесь Ваши действия по реагированию на ошибку датчика---------------*/
		MAX31865_Sensor_Error = 1;
 8000eb8:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <MAX31865_Get_Temperature+0xd0>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]
		//printf("Sensor Error!\r\n");

		/*----Автоматический сброс ошибки----*/
		MAX31865_Init(3);
 8000ebe:	2003      	movs	r0, #3
 8000ec0:	f7ff ff4c 	bl	8000d5c <MAX31865_Init>
		MAX31865_Sensor_Error = 0;
 8000ec4:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <MAX31865_Get_Temperature+0xd0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]

	//printf("RTD Resistance Registers = %X\r\n", MAX31865_receieve_data.RTD_Resistance_Registers);
	//printf("Hight Fault Treshold = %X\r\n", MAX31865_receieve_data.High_Fault_Threshold);
	//printf("Low Fault Treshold = %X\r\n", MAX31865_receieve_data.Low_Fault_Threshold);
	//printf("Fault status = %X\r\n", MAX31865_receieve_data.Fault_Status = MAX31865_rx_buffer[6]);
	data = ((double) MAX31865_receieve_data.RTD_Resistance_Registers * MAX31865_Rref ) / (double) 32768.0; // Replace 4000 by 400 for PT100
 8000eca:	893b      	ldrh	r3, [r7, #8]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fb35 	bl	800053c <__aeabi_ui2d>
 8000ed2:	a30f      	add	r3, pc, #60	; (adr r3, 8000f10 <MAX31865_Get_Temperature+0xc0>)
 8000ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed8:	f7ff fbaa 	bl	8000630 <__aeabi_dmul>
 8000edc:	4602      	mov	r2, r0
 8000ede:	460b      	mov	r3, r1
 8000ee0:	4610      	mov	r0, r2
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f04f 0200 	mov.w	r2, #0
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <MAX31865_Get_Temperature+0xd4>)
 8000eea:	f7ff fccb 	bl	8000884 <__aeabi_ddiv>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	//printf("Rrtd = %lf\n", data);
	return MAX31865_Get_Temperature_math(data);
 8000ef6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000efa:	f000 f815 	bl	8000f28 <MAX31865_Get_Temperature_math>
 8000efe:	4602      	mov	r2, r0
 8000f00:	460b      	mov	r3, r1
}
 8000f02:	4610      	mov	r0, r2
 8000f04:	4619      	mov	r1, r3
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	f3af 8000 	nop.w
 8000f10:	00000000 	.word	0x00000000
 8000f14:	407ac800 	.word	0x407ac800
 8000f18:	40010800 	.word	0x40010800
 8000f1c:	20000110 	.word	0x20000110
 8000f20:	200000a0 	.word	0x200000a0
 8000f24:	40e00000 	.word	0x40e00000

08000f28 <MAX31865_Get_Temperature_math>:
/*===================ОСНОВНАЯ ФУНКЦИЯ РАБОТЫ С МОДУЛЕМ MAX31865==================*/

/*===============================================ПРЕОБРАЗОВАНИЕ СОПРОТИВЛЕНИЯ В ТЕМПЕРАТУРУ, СОГЛАСНО ГОСТ 6651-2009===============================================*/
double MAX31865_Get_Temperature_math(double PT100_Resistance) {
 8000f28:	b5b0      	push	{r4, r5, r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	e9c7 0100 	strd	r0, r1, [r7]
	if (PT100_Resistance >= (double) 100.0) {
 8000f32:	f04f 0200 	mov.w	r2, #0
 8000f36:	4b72      	ldr	r3, [pc, #456]	; (8001100 <MAX31865_Get_Temperature_math+0x1d8>)
 8000f38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f3c:	f7ff fdfe 	bl	8000b3c <__aeabi_dcmpge>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d03b      	beq.n	8000fbe <MAX31865_Get_Temperature_math+0x96>
		double MAX31865_math_Discriminant = (double) 0.00001527480889 - ((double) -0.00000231 * (1 - (PT100_Resistance / MAX31865_PT100_R0 )));
 8000f46:	f04f 0200 	mov.w	r2, #0
 8000f4a:	4b6d      	ldr	r3, [pc, #436]	; (8001100 <MAX31865_Get_Temperature_math+0x1d8>)
 8000f4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f50:	f7ff fc98 	bl	8000884 <__aeabi_ddiv>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	f04f 0000 	mov.w	r0, #0
 8000f5c:	4969      	ldr	r1, [pc, #420]	; (8001104 <MAX31865_Get_Temperature_math+0x1dc>)
 8000f5e:	f7ff f9af 	bl	80002c0 <__aeabi_dsub>
 8000f62:	4602      	mov	r2, r0
 8000f64:	460b      	mov	r3, r1
 8000f66:	4610      	mov	r0, r2
 8000f68:	4619      	mov	r1, r3
 8000f6a:	a351      	add	r3, pc, #324	; (adr r3, 80010b0 <MAX31865_Get_Temperature_math+0x188>)
 8000f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f70:	f7ff fb5e 	bl	8000630 <__aeabi_dmul>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4610      	mov	r0, r2
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	a34e      	add	r3, pc, #312	; (adr r3, 80010b8 <MAX31865_Get_Temperature_math+0x190>)
 8000f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f82:	f7ff f99f 	bl	80002c4 <__adddf3>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		MAX31865_PT100_T = ((double) -0.0039083 + sqrt(MAX31865_math_Discriminant)) / (double) -0.000001155;
 8000f8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f92:	f003 fe17 	bl	8004bc4 <sqrt>
 8000f96:	a34a      	add	r3, pc, #296	; (adr r3, 80010c0 <MAX31865_Get_Temperature_math+0x198>)
 8000f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9c:	f7ff f990 	bl	80002c0 <__aeabi_dsub>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	a347      	add	r3, pc, #284	; (adr r3, 80010c8 <MAX31865_Get_Temperature_math+0x1a0>)
 8000faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fae:	f7ff fc69 	bl	8000884 <__aeabi_ddiv>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4954      	ldr	r1, [pc, #336]	; (8001108 <MAX31865_Get_Temperature_math+0x1e0>)
 8000fb8:	e9c1 2300 	strd	r2, r3, [r1]
 8000fbc:	e06d      	b.n	800109a <MAX31865_Get_Temperature_math+0x172>
	} else {
		MAX31865_PT100_T = (double) 0.000000000270 * pow(PT100_Resistance, 5) - (double) 0.000000066245 * pow(PT100_Resistance, 4) - (double) 0.000000184636 * pow(PT100_Resistance, 3)
 8000fbe:	f04f 0200 	mov.w	r2, #0
 8000fc2:	4b52      	ldr	r3, [pc, #328]	; (800110c <MAX31865_Get_Temperature_math+0x1e4>)
 8000fc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fc8:	f003 fd94 	bl	8004af4 <pow>
 8000fcc:	a340      	add	r3, pc, #256	; (adr r3, 80010d0 <MAX31865_Get_Temperature_math+0x1a8>)
 8000fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd2:	f7ff fb2d 	bl	8000630 <__aeabi_dmul>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4614      	mov	r4, r2
 8000fdc:	461d      	mov	r5, r3
 8000fde:	f04f 0200 	mov.w	r2, #0
 8000fe2:	4b4b      	ldr	r3, [pc, #300]	; (8001110 <MAX31865_Get_Temperature_math+0x1e8>)
 8000fe4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fe8:	f003 fd84 	bl	8004af4 <pow>
 8000fec:	a33a      	add	r3, pc, #232	; (adr r3, 80010d8 <MAX31865_Get_Temperature_math+0x1b0>)
 8000fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff2:	f7ff fb1d 	bl	8000630 <__aeabi_dmul>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4620      	mov	r0, r4
 8000ffc:	4629      	mov	r1, r5
 8000ffe:	f7ff f95f 	bl	80002c0 <__aeabi_dsub>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4614      	mov	r4, r2
 8001008:	461d      	mov	r5, r3
 800100a:	f04f 0200 	mov.w	r2, #0
 800100e:	4b41      	ldr	r3, [pc, #260]	; (8001114 <MAX31865_Get_Temperature_math+0x1ec>)
 8001010:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001014:	f003 fd6e 	bl	8004af4 <pow>
 8001018:	a331      	add	r3, pc, #196	; (adr r3, 80010e0 <MAX31865_Get_Temperature_math+0x1b8>)
 800101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101e:	f7ff fb07 	bl	8000630 <__aeabi_dmul>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4620      	mov	r0, r4
 8001028:	4629      	mov	r1, r5
 800102a:	f7ff f949 	bl	80002c0 <__aeabi_dsub>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4614      	mov	r4, r2
 8001034:	461d      	mov	r5, r3
				+ (double) 0.002320232987 * pow(PT100_Resistance, 2) + (double) 2.229927824035 * PT100_Resistance - (double) 242.090854986215;
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800103e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001042:	f003 fd57 	bl	8004af4 <pow>
 8001046:	a328      	add	r3, pc, #160	; (adr r3, 80010e8 <MAX31865_Get_Temperature_math+0x1c0>)
 8001048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104c:	f7ff faf0 	bl	8000630 <__aeabi_dmul>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4620      	mov	r0, r4
 8001056:	4629      	mov	r1, r5
 8001058:	f7ff f934 	bl	80002c4 <__adddf3>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4614      	mov	r4, r2
 8001062:	461d      	mov	r5, r3
 8001064:	a322      	add	r3, pc, #136	; (adr r3, 80010f0 <MAX31865_Get_Temperature_math+0x1c8>)
 8001066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800106e:	f7ff fadf 	bl	8000630 <__aeabi_dmul>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	4620      	mov	r0, r4
 8001078:	4629      	mov	r1, r5
 800107a:	f7ff f923 	bl	80002c4 <__adddf3>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	4610      	mov	r0, r2
 8001084:	4619      	mov	r1, r3
 8001086:	a31c      	add	r3, pc, #112	; (adr r3, 80010f8 <MAX31865_Get_Temperature_math+0x1d0>)
 8001088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108c:	f7ff f918 	bl	80002c0 <__aeabi_dsub>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
		MAX31865_PT100_T = (double) 0.000000000270 * pow(PT100_Resistance, 5) - (double) 0.000000066245 * pow(PT100_Resistance, 4) - (double) 0.000000184636 * pow(PT100_Resistance, 3)
 8001094:	491c      	ldr	r1, [pc, #112]	; (8001108 <MAX31865_Get_Temperature_math+0x1e0>)
 8001096:	e9c1 2300 	strd	r2, r3, [r1]
	}
	return MAX31865_PT100_T;
 800109a:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <MAX31865_Get_Temperature_math+0x1e0>)
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 80010a0:	4610      	mov	r0, r2
 80010a2:	4619      	mov	r1, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bdb0      	pop	{r4, r5, r7, pc}
 80010aa:	bf00      	nop
 80010ac:	f3af 8000 	nop.w
 80010b0:	ee19ce88 	.word	0xee19ce88
 80010b4:	3ec360af 	.word	0x3ec360af
 80010b8:	dfc928d8 	.word	0xdfc928d8
 80010bc:	3ef0044c 	.word	0x3ef0044c
 80010c0:	4aed641c 	.word	0x4aed641c
 80010c4:	3f700226 	.word	0x3f700226
 80010c8:	ee19ce88 	.word	0xee19ce88
 80010cc:	beb360af 	.word	0xbeb360af
 80010d0:	e63e6cde 	.word	0xe63e6cde
 80010d4:	3df28de3 	.word	0x3df28de3
 80010d8:	5d50ae3a 	.word	0x5d50ae3a
 80010dc:	3e71c852 	.word	0x3e71c852
 80010e0:	6e664b7f 	.word	0x6e664b7f
 80010e4:	3e88c80b 	.word	0x3e88c80b
 80010e8:	998b63de 	.word	0x998b63de
 80010ec:	3f6301e1 	.word	0x3f6301e1
 80010f0:	66255dbb 	.word	0x66255dbb
 80010f4:	4001d6e4 	.word	0x4001d6e4
 80010f8:	48b74f1a 	.word	0x48b74f1a
 80010fc:	406e42e8 	.word	0x406e42e8
 8001100:	40590000 	.word	0x40590000
 8001104:	3ff00000 	.word	0x3ff00000
 8001108:	20000098 	.word	0x20000098
 800110c:	40140000 	.word	0x40140000
 8001110:	40100000 	.word	0x40100000
 8001114:	40080000 	.word	0x40080000

08001118 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001118:	b5b0      	push	{r4, r5, r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800111c:	f000 fe4e 	bl	8001dbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001120:	f000 f902 	bl	8001328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001124:	f000 f9aa 	bl	800147c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001128:	f000 f972 	bl	8001410 <MX_SPI1_Init>
  MX_I2C1_Init();
 800112c:	f000 f942 	bl	80013b4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	MAX31865_Init(3);
 8001130:	2003      	movs	r0, #3
 8001132:	f7ff fe13 	bl	8000d5c <MAX31865_Init>
	SSD1306_Init();
 8001136:	f000 fa39 	bl	80015ac <SSD1306_Init>
	SSD1306_GotoXY (45,10); //isimler için koordinatlar
 800113a:	210a      	movs	r1, #10
 800113c:	202d      	movs	r0, #45	; 0x2d
 800113e:	f000 fb9d 	bl	800187c <SSD1306_GotoXY>
	SSD1306_Puts("ECE", &Font_11x18, 1); //belirtilen koordinata bunu koy
 8001142:	2201      	movs	r2, #1
 8001144:	496e      	ldr	r1, [pc, #440]	; (8001300 <main+0x1e8>)
 8001146:	486f      	ldr	r0, [pc, #444]	; (8001304 <main+0x1ec>)
 8001148:	f000 fc2e 	bl	80019a8 <SSD1306_Puts>
	SSD1306_GotoXY(35,30);
 800114c:	211e      	movs	r1, #30
 800114e:	2023      	movs	r0, #35	; 0x23
 8001150:	f000 fb94 	bl	800187c <SSD1306_GotoXY>
	SSD1306_Puts("CINAR", &Font_11x18, 1);
 8001154:	2201      	movs	r2, #1
 8001156:	496a      	ldr	r1, [pc, #424]	; (8001300 <main+0x1e8>)
 8001158:	486b      	ldr	r0, [pc, #428]	; (8001308 <main+0x1f0>)
 800115a:	f000 fc25 	bl	80019a8 <SSD1306_Puts>
	SSD1306_UpdateScreen(); // ekrana yazılması için girilen kodları çalıştıran sağlayan fonksiyon
 800115e:	f000 fae9 	bl	8001734 <SSD1306_UpdateScreen>
	HAL_Delay(500);
 8001162:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001166:	f000 fe8b 	bl	8001e80 <HAL_Delay>
	SSD1306_Scrolldiagright(0,0);
 800116a:	2100      	movs	r1, #0
 800116c:	2000      	movs	r0, #0
 800116e:	f000 f9d4 	bl	800151a <SSD1306_Scrolldiagright>
	HAL_Delay(2500);
 8001172:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8001176:	f000 fe83 	bl	8001e80 <HAL_Delay>
	SSD1306_Stopscroll();
 800117a:	f000 fa0e 	bl	800159a <SSD1306_Stopscroll>
	SSD1306_Clear();
 800117e:	f000 fc38 	bl	80019f2 <SSD1306_Clear>
	HAL_Delay(500);
 8001182:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001186:	f000 fe7b 	bl	8001e80 <HAL_Delay>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if (HAL_GetTick() - Time >= 1000) {
 800118a:	f000 fe6f 	bl	8001e6c <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	4b5e      	ldr	r3, [pc, #376]	; (800130c <main+0x1f4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800119a:	d3f6      	bcc.n	800118a <main+0x72>
			Time = HAL_GetTick();
 800119c:	f000 fe66 	bl	8001e6c <HAL_GetTick>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4a5a      	ldr	r2, [pc, #360]	; (800130c <main+0x1f4>)
 80011a4:	6013      	str	r3, [r2, #0]
			//PT100_Temperature = 25.78;
			PT100_Temperature = MAX31865_Get_Temperature();
 80011a6:	f7ff fe53 	bl	8000e50 <MAX31865_Get_Temperature>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4610      	mov	r0, r2
 80011b0:	4619      	mov	r1, r3
 80011b2:	f7ff fced 	bl	8000b90 <__aeabi_d2f>
 80011b6:	4603      	mov	r3, r0
 80011b8:	4a55      	ldr	r2, [pc, #340]	; (8001310 <main+0x1f8>)
 80011ba:	6013      	str	r3, [r2, #0]
			if (PT100_Temperature >= 0) {
 80011bc:	4b54      	ldr	r3, [pc, #336]	; (8001310 <main+0x1f8>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f04f 0100 	mov.w	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fd95 	bl	8000cf4 <__aeabi_fcmpge>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d040      	beq.n	8001252 <main+0x13a>
				PT100_Temperature = PT100_Temperature + 0.05;
 80011d0:	4b4f      	ldr	r3, [pc, #316]	; (8001310 <main+0x1f8>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff f9d3 	bl	8000580 <__aeabi_f2d>
 80011da:	a347      	add	r3, pc, #284	; (adr r3, 80012f8 <main+0x1e0>)
 80011dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e0:	f7ff f870 	bl	80002c4 <__adddf3>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4610      	mov	r0, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	f7ff fcd0 	bl	8000b90 <__aeabi_d2f>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4a47      	ldr	r2, [pc, #284]	; (8001310 <main+0x1f8>)
 80011f4:	6013      	str	r3, [r2, #0]
				sprintf(temp, "Temp= %d.%d °C", (uint16_t) (PT100_Temperature),((uint16_t) (PT100_Temperature * 100) - ((uint16_t) PT100_Temperature) * 100) / 10);//printf("Temper.=%d.%d C  \r\n", (uint16_t) (PT100_Temperature), ((uint16_t) (PT100_Temperature * 10) - ((uint16_t) PT100_Temperature) * 10));
 80011f6:	4b46      	ldr	r3, [pc, #280]	; (8001310 <main+0x1f8>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff fd8e 	bl	8000d1c <__aeabi_f2uiz>
 8001200:	4603      	mov	r3, r0
 8001202:	b29b      	uxth	r3, r3
 8001204:	461d      	mov	r5, r3
 8001206:	4b42      	ldr	r3, [pc, #264]	; (8001310 <main+0x1f8>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4942      	ldr	r1, [pc, #264]	; (8001314 <main+0x1fc>)
 800120c:	4618      	mov	r0, r3
 800120e:	f7fe ff9f 	bl	8000150 <__aeabi_fmul>
 8001212:	4603      	mov	r3, r0
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fd81 	bl	8000d1c <__aeabi_f2uiz>
 800121a:	4603      	mov	r3, r0
 800121c:	b29b      	uxth	r3, r3
 800121e:	461c      	mov	r4, r3
 8001220:	4b3b      	ldr	r3, [pc, #236]	; (8001310 <main+0x1f8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff fd79 	bl	8000d1c <__aeabi_f2uiz>
 800122a:	4603      	mov	r3, r0
 800122c:	b29b      	uxth	r3, r3
 800122e:	461a      	mov	r2, r3
 8001230:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001234:	fb02 f303 	mul.w	r3, r2, r3
 8001238:	4423      	add	r3, r4
 800123a:	4a37      	ldr	r2, [pc, #220]	; (8001318 <main+0x200>)
 800123c:	fb82 1203 	smull	r1, r2, r2, r3
 8001240:	1092      	asrs	r2, r2, #2
 8001242:	17db      	asrs	r3, r3, #31
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	462a      	mov	r2, r5
 8001248:	4934      	ldr	r1, [pc, #208]	; (800131c <main+0x204>)
 800124a:	4835      	ldr	r0, [pc, #212]	; (8001320 <main+0x208>)
 800124c:	f002 ffd8 	bl	8004200 <siprintf>
 8001250:	e041      	b.n	80012d6 <main+0x1be>
			} else {
				//PT100_Temperature = MAX31865_Get_Temperature() - 0.05;
				PT100_Temperature = -PT100_Temperature + 0.05;
 8001252:	4b2f      	ldr	r3, [pc, #188]	; (8001310 <main+0x1f8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f990 	bl	8000580 <__aeabi_f2d>
 8001260:	a325      	add	r3, pc, #148	; (adr r3, 80012f8 <main+0x1e0>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	f7ff f82d 	bl	80002c4 <__adddf3>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4610      	mov	r0, r2
 8001270:	4619      	mov	r1, r3
 8001272:	f7ff fc8d 	bl	8000b90 <__aeabi_d2f>
 8001276:	4603      	mov	r3, r0
 8001278:	4a25      	ldr	r2, [pc, #148]	; (8001310 <main+0x1f8>)
 800127a:	6013      	str	r3, [r2, #0]
				sprintf(temp, "Тemp=-%d.%d °C", (uint16_t) (PT100_Temperature),((uint16_t) (PT100_Temperature * 100) - ((uint16_t) PT100_Temperature) * 100) / 10);
 800127c:	4b24      	ldr	r3, [pc, #144]	; (8001310 <main+0x1f8>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fd4b 	bl	8000d1c <__aeabi_f2uiz>
 8001286:	4603      	mov	r3, r0
 8001288:	b29b      	uxth	r3, r3
 800128a:	461d      	mov	r5, r3
 800128c:	4b20      	ldr	r3, [pc, #128]	; (8001310 <main+0x1f8>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4920      	ldr	r1, [pc, #128]	; (8001314 <main+0x1fc>)
 8001292:	4618      	mov	r0, r3
 8001294:	f7fe ff5c 	bl	8000150 <__aeabi_fmul>
 8001298:	4603      	mov	r3, r0
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fd3e 	bl	8000d1c <__aeabi_f2uiz>
 80012a0:	4603      	mov	r3, r0
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	461c      	mov	r4, r3
 80012a6:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <main+0x1f8>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fd36 	bl	8000d1c <__aeabi_f2uiz>
 80012b0:	4603      	mov	r3, r0
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	461a      	mov	r2, r3
 80012b6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80012ba:	fb02 f303 	mul.w	r3, r2, r3
 80012be:	4423      	add	r3, r4
 80012c0:	4a15      	ldr	r2, [pc, #84]	; (8001318 <main+0x200>)
 80012c2:	fb82 1203 	smull	r1, r2, r2, r3
 80012c6:	1092      	asrs	r2, r2, #2
 80012c8:	17db      	asrs	r3, r3, #31
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	462a      	mov	r2, r5
 80012ce:	4915      	ldr	r1, [pc, #84]	; (8001324 <main+0x20c>)
 80012d0:	4813      	ldr	r0, [pc, #76]	; (8001320 <main+0x208>)
 80012d2:	f002 ff95 	bl	8004200 <siprintf>
				//printf("Temper.=-%d.%d C  \r\n", (uint16_t) (PT100_Temperature), ((uint16_t) (PT100_Temperature * 10) - ((uint16_t) PT100_Temperature) * 10));
			}

			SSD1306_GotoXY(0,20);
 80012d6:	2114      	movs	r1, #20
 80012d8:	2000      	movs	r0, #0
 80012da:	f000 facf 	bl	800187c <SSD1306_GotoXY>
  			SSD1306_Puts(temp, &Font_11x18, 1);
 80012de:	2201      	movs	r2, #1
 80012e0:	4907      	ldr	r1, [pc, #28]	; (8001300 <main+0x1e8>)
 80012e2:	480f      	ldr	r0, [pc, #60]	; (8001320 <main+0x208>)
 80012e4:	f000 fb60 	bl	80019a8 <SSD1306_Puts>
  			SSD1306_UpdateScreen();
 80012e8:	f000 fa24 	bl	8001734 <SSD1306_UpdateScreen>
  			HAL_Delay(500);
 80012ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012f0:	f000 fdc6 	bl	8001e80 <HAL_Delay>
		if (HAL_GetTick() - Time >= 1000) {
 80012f4:	e749      	b.n	800118a <main+0x72>
 80012f6:	bf00      	nop
 80012f8:	9999999a 	.word	0x9999999a
 80012fc:	3fa99999 	.word	0x3fa99999
 8001300:	20000000 	.word	0x20000000
 8001304:	08005920 	.word	0x08005920
 8001308:	08005924 	.word	0x08005924
 800130c:	200000b8 	.word	0x200000b8
 8001310:	200000b4 	.word	0x200000b4
 8001314:	42c80000 	.word	0x42c80000
 8001318:	66666667 	.word	0x66666667
 800131c:	0800592c 	.word	0x0800592c
 8001320:	200000a4 	.word	0x200000a4
 8001324:	0800593c 	.word	0x0800593c

08001328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b090      	sub	sp, #64	; 0x40
 800132c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132e:	f107 0318 	add.w	r3, r7, #24
 8001332:	2228      	movs	r2, #40	; 0x28
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f002 ff5a 	bl	80041f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
 8001348:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800134a:	2301      	movs	r3, #1
 800134c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800134e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001352:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001354:	2300      	movs	r3, #0
 8001356:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001358:	2301      	movs	r3, #1
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135c:	2302      	movs	r3, #2
 800135e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001360:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001364:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001366:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800136a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136c:	f107 0318 	add.w	r3, r7, #24
 8001370:	4618      	mov	r0, r3
 8001372:	f001 fda1 	bl	8002eb8 <HAL_RCC_OscConfig>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800137c:	f000 f8c8 	bl	8001510 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001380:	230f      	movs	r3, #15
 8001382:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001384:	2302      	movs	r3, #2
 8001386:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800138c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001390:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	2102      	movs	r1, #2
 800139a:	4618      	mov	r0, r3
 800139c:	f002 f80e 	bl	80033bc <HAL_RCC_ClockConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80013a6:	f000 f8b3 	bl	8001510 <Error_Handler>
  }
}
 80013aa:	bf00      	nop
 80013ac:	3740      	adds	r7, #64	; 0x40
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <MX_I2C1_Init+0x50>)
 80013ba:	4a13      	ldr	r2, [pc, #76]	; (8001408 <MX_I2C1_Init+0x54>)
 80013bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <MX_I2C1_Init+0x50>)
 80013c0:	4a12      	ldr	r2, [pc, #72]	; (800140c <MX_I2C1_Init+0x58>)
 80013c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013c4:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <MX_I2C1_Init+0x50>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <MX_I2C1_Init+0x50>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <MX_I2C1_Init+0x50>)
 80013d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013d8:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <MX_I2C1_Init+0x50>)
 80013da:	2200      	movs	r2, #0
 80013dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <MX_I2C1_Init+0x50>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <MX_I2C1_Init+0x50>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <MX_I2C1_Init+0x50>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013f0:	4804      	ldr	r0, [pc, #16]	; (8001404 <MX_I2C1_Init+0x50>)
 80013f2:	f000 ffe9 	bl	80023c8 <HAL_I2C_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013fc:	f000 f888 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}
 8001404:	200000bc 	.word	0x200000bc
 8001408:	40005400 	.word	0x40005400
 800140c:	00061a80 	.word	0x00061a80

08001410 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001414:	4b17      	ldr	r3, [pc, #92]	; (8001474 <MX_SPI1_Init+0x64>)
 8001416:	4a18      	ldr	r2, [pc, #96]	; (8001478 <MX_SPI1_Init+0x68>)
 8001418:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800141a:	4b16      	ldr	r3, [pc, #88]	; (8001474 <MX_SPI1_Init+0x64>)
 800141c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001420:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001422:	4b14      	ldr	r3, [pc, #80]	; (8001474 <MX_SPI1_Init+0x64>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <MX_SPI1_Init+0x64>)
 800142a:	2200      	movs	r2, #0
 800142c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <MX_SPI1_Init+0x64>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <MX_SPI1_Init+0x64>)
 8001436:	2201      	movs	r2, #1
 8001438:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <MX_SPI1_Init+0x64>)
 800143c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001440:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <MX_SPI1_Init+0x64>)
 8001444:	2218      	movs	r2, #24
 8001446:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001448:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <MX_SPI1_Init+0x64>)
 800144a:	2200      	movs	r2, #0
 800144c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <MX_SPI1_Init+0x64>)
 8001450:	2200      	movs	r2, #0
 8001452:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001454:	4b07      	ldr	r3, [pc, #28]	; (8001474 <MX_SPI1_Init+0x64>)
 8001456:	2200      	movs	r2, #0
 8001458:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <MX_SPI1_Init+0x64>)
 800145c:	220a      	movs	r2, #10
 800145e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001460:	4804      	ldr	r0, [pc, #16]	; (8001474 <MX_SPI1_Init+0x64>)
 8001462:	f002 f92f 	bl	80036c4 <HAL_SPI_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800146c:	f000 f850 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000110 	.word	0x20000110
 8001478:	40013000 	.word	0x40013000

0800147c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b088      	sub	sp, #32
 8001480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001482:	f107 0310 	add.w	r3, r7, #16
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001490:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <MX_GPIO_Init+0x8c>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	4a1c      	ldr	r2, [pc, #112]	; (8001508 <MX_GPIO_Init+0x8c>)
 8001496:	f043 0320 	orr.w	r3, r3, #32
 800149a:	6193      	str	r3, [r2, #24]
 800149c:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <MX_GPIO_Init+0x8c>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	f003 0320 	and.w	r3, r3, #32
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a8:	4b17      	ldr	r3, [pc, #92]	; (8001508 <MX_GPIO_Init+0x8c>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	4a16      	ldr	r2, [pc, #88]	; (8001508 <MX_GPIO_Init+0x8c>)
 80014ae:	f043 0304 	orr.w	r3, r3, #4
 80014b2:	6193      	str	r3, [r2, #24]
 80014b4:	4b14      	ldr	r3, [pc, #80]	; (8001508 <MX_GPIO_Init+0x8c>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <MX_GPIO_Init+0x8c>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	4a10      	ldr	r2, [pc, #64]	; (8001508 <MX_GPIO_Init+0x8c>)
 80014c6:	f043 0308 	orr.w	r3, r3, #8
 80014ca:	6193      	str	r3, [r2, #24]
 80014cc:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <MX_GPIO_Init+0x8c>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f003 0308 	and.w	r3, r3, #8
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	2101      	movs	r1, #1
 80014dc:	480b      	ldr	r0, [pc, #44]	; (800150c <MX_GPIO_Init+0x90>)
 80014de:	f000 ff5b 	bl	8002398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80014e2:	2301      	movs	r3, #1
 80014e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e6:	2301      	movs	r3, #1
 80014e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2302      	movs	r3, #2
 80014f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80014f2:	f107 0310 	add.w	r3, r7, #16
 80014f6:	4619      	mov	r1, r3
 80014f8:	4804      	ldr	r0, [pc, #16]	; (800150c <MX_GPIO_Init+0x90>)
 80014fa:	f000 fdc9 	bl	8002090 <HAL_GPIO_Init>

}
 80014fe:	bf00      	nop
 8001500:	3720      	adds	r7, #32
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40021000 	.word	0x40021000
 800150c:	40010800 	.word	0x40010800

08001510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001514:	b672      	cpsid	i
}
 8001516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001518:	e7fe      	b.n	8001518 <Error_Handler+0x8>

0800151a <SSD1306_Scrolldiagright>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
}


void SSD1306_Scrolldiagright(uint8_t start_row, uint8_t end_row)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	4603      	mov	r3, r0
 8001522:	460a      	mov	r2, r1
 8001524:	71fb      	strb	r3, [r7, #7]
 8001526:	4613      	mov	r3, r2
 8001528:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND(SSD1306_SET_VERTICAL_SCROLL_AREA);  // sect the area
 800152a:	22a3      	movs	r2, #163	; 0xa3
 800152c:	2100      	movs	r1, #0
 800152e:	2078      	movs	r0, #120	; 0x78
 8001530:	f000 fae2 	bl	8001af8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);   // write dummy
 8001534:	2200      	movs	r2, #0
 8001536:	2100      	movs	r1, #0
 8001538:	2078      	movs	r0, #120	; 0x78
 800153a:	f000 fadd 	bl	8001af8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(SSD1306_HEIGHT);
 800153e:	2240      	movs	r2, #64	; 0x40
 8001540:	2100      	movs	r1, #0
 8001542:	2078      	movs	r0, #120	; 0x78
 8001544:	f000 fad8 	bl	8001af8 <ssd1306_I2C_Write>

  SSD1306_WRITECOMMAND(SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL);
 8001548:	2229      	movs	r2, #41	; 0x29
 800154a:	2100      	movs	r1, #0
 800154c:	2078      	movs	r0, #120	; 0x78
 800154e:	f000 fad3 	bl	8001af8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);
 8001552:	2200      	movs	r2, #0
 8001554:	2100      	movs	r1, #0
 8001556:	2078      	movs	r0, #120	; 0x78
 8001558:	f000 face 	bl	8001af8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	461a      	mov	r2, r3
 8001560:	2100      	movs	r1, #0
 8001562:	2078      	movs	r0, #120	; 0x78
 8001564:	f000 fac8 	bl	8001af8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8001568:	2200      	movs	r2, #0
 800156a:	2100      	movs	r1, #0
 800156c:	2078      	movs	r0, #120	; 0x78
 800156e:	f000 fac3 	bl	8001af8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);
 8001572:	79bb      	ldrb	r3, [r7, #6]
 8001574:	461a      	mov	r2, r3
 8001576:	2100      	movs	r1, #0
 8001578:	2078      	movs	r0, #120	; 0x78
 800157a:	f000 fabd 	bl	8001af8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x01);
 800157e:	2201      	movs	r2, #1
 8001580:	2100      	movs	r1, #0
 8001582:	2078      	movs	r0, #120	; 0x78
 8001584:	f000 fab8 	bl	8001af8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
 8001588:	222f      	movs	r2, #47	; 0x2f
 800158a:	2100      	movs	r1, #0
 800158c:	2078      	movs	r0, #120	; 0x78
 800158e:	f000 fab3 	bl	8001af8 <ssd1306_I2C_Write>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800159e:	222e      	movs	r2, #46	; 0x2e
 80015a0:	2100      	movs	r1, #0
 80015a2:	2078      	movs	r0, #120	; 0x78
 80015a4:	f000 faa8 	bl	8001af8 <ssd1306_I2C_Write>
}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}

080015ac <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80015b2:	f000 fa27 	bl	8001a04 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80015b6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80015ba:	2201      	movs	r2, #1
 80015bc:	2178      	movs	r1, #120	; 0x78
 80015be:	485b      	ldr	r0, [pc, #364]	; (800172c <SSD1306_Init+0x180>)
 80015c0:	f001 f944 	bl	800284c <HAL_I2C_IsDeviceReady>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	e0a9      	b.n	8001722 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80015ce:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80015d2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80015d4:	e002      	b.n	80015dc <SSD1306_Init+0x30>
		p--;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3b01      	subs	r3, #1
 80015da:	607b      	str	r3, [r7, #4]
	while(p>0)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f9      	bne.n	80015d6 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80015e2:	22ae      	movs	r2, #174	; 0xae
 80015e4:	2100      	movs	r1, #0
 80015e6:	2078      	movs	r0, #120	; 0x78
 80015e8:	f000 fa86 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80015ec:	2220      	movs	r2, #32
 80015ee:	2100      	movs	r1, #0
 80015f0:	2078      	movs	r0, #120	; 0x78
 80015f2:	f000 fa81 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80015f6:	2210      	movs	r2, #16
 80015f8:	2100      	movs	r1, #0
 80015fa:	2078      	movs	r0, #120	; 0x78
 80015fc:	f000 fa7c 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001600:	22b0      	movs	r2, #176	; 0xb0
 8001602:	2100      	movs	r1, #0
 8001604:	2078      	movs	r0, #120	; 0x78
 8001606:	f000 fa77 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800160a:	22c8      	movs	r2, #200	; 0xc8
 800160c:	2100      	movs	r1, #0
 800160e:	2078      	movs	r0, #120	; 0x78
 8001610:	f000 fa72 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001614:	2200      	movs	r2, #0
 8001616:	2100      	movs	r1, #0
 8001618:	2078      	movs	r0, #120	; 0x78
 800161a:	f000 fa6d 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800161e:	2210      	movs	r2, #16
 8001620:	2100      	movs	r1, #0
 8001622:	2078      	movs	r0, #120	; 0x78
 8001624:	f000 fa68 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001628:	2240      	movs	r2, #64	; 0x40
 800162a:	2100      	movs	r1, #0
 800162c:	2078      	movs	r0, #120	; 0x78
 800162e:	f000 fa63 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001632:	2281      	movs	r2, #129	; 0x81
 8001634:	2100      	movs	r1, #0
 8001636:	2078      	movs	r0, #120	; 0x78
 8001638:	f000 fa5e 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800163c:	22ff      	movs	r2, #255	; 0xff
 800163e:	2100      	movs	r1, #0
 8001640:	2078      	movs	r0, #120	; 0x78
 8001642:	f000 fa59 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001646:	22a1      	movs	r2, #161	; 0xa1
 8001648:	2100      	movs	r1, #0
 800164a:	2078      	movs	r0, #120	; 0x78
 800164c:	f000 fa54 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001650:	22a6      	movs	r2, #166	; 0xa6
 8001652:	2100      	movs	r1, #0
 8001654:	2078      	movs	r0, #120	; 0x78
 8001656:	f000 fa4f 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800165a:	22a8      	movs	r2, #168	; 0xa8
 800165c:	2100      	movs	r1, #0
 800165e:	2078      	movs	r0, #120	; 0x78
 8001660:	f000 fa4a 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001664:	223f      	movs	r2, #63	; 0x3f
 8001666:	2100      	movs	r1, #0
 8001668:	2078      	movs	r0, #120	; 0x78
 800166a:	f000 fa45 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800166e:	22a4      	movs	r2, #164	; 0xa4
 8001670:	2100      	movs	r1, #0
 8001672:	2078      	movs	r0, #120	; 0x78
 8001674:	f000 fa40 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001678:	22d3      	movs	r2, #211	; 0xd3
 800167a:	2100      	movs	r1, #0
 800167c:	2078      	movs	r0, #120	; 0x78
 800167e:	f000 fa3b 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001682:	2200      	movs	r2, #0
 8001684:	2100      	movs	r1, #0
 8001686:	2078      	movs	r0, #120	; 0x78
 8001688:	f000 fa36 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800168c:	22d5      	movs	r2, #213	; 0xd5
 800168e:	2100      	movs	r1, #0
 8001690:	2078      	movs	r0, #120	; 0x78
 8001692:	f000 fa31 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001696:	22f0      	movs	r2, #240	; 0xf0
 8001698:	2100      	movs	r1, #0
 800169a:	2078      	movs	r0, #120	; 0x78
 800169c:	f000 fa2c 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80016a0:	22d9      	movs	r2, #217	; 0xd9
 80016a2:	2100      	movs	r1, #0
 80016a4:	2078      	movs	r0, #120	; 0x78
 80016a6:	f000 fa27 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80016aa:	2222      	movs	r2, #34	; 0x22
 80016ac:	2100      	movs	r1, #0
 80016ae:	2078      	movs	r0, #120	; 0x78
 80016b0:	f000 fa22 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80016b4:	22da      	movs	r2, #218	; 0xda
 80016b6:	2100      	movs	r1, #0
 80016b8:	2078      	movs	r0, #120	; 0x78
 80016ba:	f000 fa1d 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80016be:	2212      	movs	r2, #18
 80016c0:	2100      	movs	r1, #0
 80016c2:	2078      	movs	r0, #120	; 0x78
 80016c4:	f000 fa18 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80016c8:	22db      	movs	r2, #219	; 0xdb
 80016ca:	2100      	movs	r1, #0
 80016cc:	2078      	movs	r0, #120	; 0x78
 80016ce:	f000 fa13 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80016d2:	2220      	movs	r2, #32
 80016d4:	2100      	movs	r1, #0
 80016d6:	2078      	movs	r0, #120	; 0x78
 80016d8:	f000 fa0e 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80016dc:	228d      	movs	r2, #141	; 0x8d
 80016de:	2100      	movs	r1, #0
 80016e0:	2078      	movs	r0, #120	; 0x78
 80016e2:	f000 fa09 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80016e6:	2214      	movs	r2, #20
 80016e8:	2100      	movs	r1, #0
 80016ea:	2078      	movs	r0, #120	; 0x78
 80016ec:	f000 fa04 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80016f0:	22af      	movs	r2, #175	; 0xaf
 80016f2:	2100      	movs	r1, #0
 80016f4:	2078      	movs	r0, #120	; 0x78
 80016f6:	f000 f9ff 	bl	8001af8 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80016fa:	222e      	movs	r2, #46	; 0x2e
 80016fc:	2100      	movs	r1, #0
 80016fe:	2078      	movs	r0, #120	; 0x78
 8001700:	f000 f9fa 	bl	8001af8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001704:	2000      	movs	r0, #0
 8001706:	f000 f843 	bl	8001790 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800170a:	f000 f813 	bl	8001734 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800170e:	4b08      	ldr	r3, [pc, #32]	; (8001730 <SSD1306_Init+0x184>)
 8001710:	2200      	movs	r2, #0
 8001712:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <SSD1306_Init+0x184>)
 8001716:	2200      	movs	r2, #0
 8001718:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800171a:	4b05      	ldr	r3, [pc, #20]	; (8001730 <SSD1306_Init+0x184>)
 800171c:	2201      	movs	r2, #1
 800171e:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001720:	2301      	movs	r3, #1
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200000bc 	.word	0x200000bc
 8001730:	20000568 	.word	0x20000568

08001734 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800173a:	2300      	movs	r3, #0
 800173c:	71fb      	strb	r3, [r7, #7]
 800173e:	e01d      	b.n	800177c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	3b50      	subs	r3, #80	; 0x50
 8001744:	b2db      	uxtb	r3, r3
 8001746:	461a      	mov	r2, r3
 8001748:	2100      	movs	r1, #0
 800174a:	2078      	movs	r0, #120	; 0x78
 800174c:	f000 f9d4 	bl	8001af8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001750:	2200      	movs	r2, #0
 8001752:	2100      	movs	r1, #0
 8001754:	2078      	movs	r0, #120	; 0x78
 8001756:	f000 f9cf 	bl	8001af8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800175a:	2210      	movs	r2, #16
 800175c:	2100      	movs	r1, #0
 800175e:	2078      	movs	r0, #120	; 0x78
 8001760:	f000 f9ca 	bl	8001af8 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	01db      	lsls	r3, r3, #7
 8001768:	4a08      	ldr	r2, [pc, #32]	; (800178c <SSD1306_UpdateScreen+0x58>)
 800176a:	441a      	add	r2, r3
 800176c:	2380      	movs	r3, #128	; 0x80
 800176e:	2140      	movs	r1, #64	; 0x40
 8001770:	2078      	movs	r0, #120	; 0x78
 8001772:	f000 f95b 	bl	8001a2c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	3301      	adds	r3, #1
 800177a:	71fb      	strb	r3, [r7, #7]
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	2b07      	cmp	r3, #7
 8001780:	d9de      	bls.n	8001740 <SSD1306_UpdateScreen+0xc>
	}
}
 8001782:	bf00      	nop
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000168 	.word	0x20000168

08001790 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d101      	bne.n	80017a4 <SSD1306_Fill+0x14>
 80017a0:	2300      	movs	r3, #0
 80017a2:	e000      	b.n	80017a6 <SSD1306_Fill+0x16>
 80017a4:	23ff      	movs	r3, #255	; 0xff
 80017a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017aa:	4619      	mov	r1, r3
 80017ac:	4803      	ldr	r0, [pc, #12]	; (80017bc <SSD1306_Fill+0x2c>)
 80017ae:	f002 fd1f 	bl	80041f0 <memset>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000168 	.word	0x20000168

080017c0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	80fb      	strh	r3, [r7, #6]
 80017ca:	460b      	mov	r3, r1
 80017cc:	80bb      	strh	r3, [r7, #4]
 80017ce:	4613      	mov	r3, r2
 80017d0:	70fb      	strb	r3, [r7, #3]
	if (
 80017d2:	88fb      	ldrh	r3, [r7, #6]
 80017d4:	2b7f      	cmp	r3, #127	; 0x7f
 80017d6:	d848      	bhi.n	800186a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80017d8:	88bb      	ldrh	r3, [r7, #4]
 80017da:	2b3f      	cmp	r3, #63	; 0x3f
 80017dc:	d845      	bhi.n	800186a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80017de:	4b25      	ldr	r3, [pc, #148]	; (8001874 <SSD1306_DrawPixel+0xb4>)
 80017e0:	791b      	ldrb	r3, [r3, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d006      	beq.n	80017f4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80017e6:	78fb      	ldrb	r3, [r7, #3]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	bf0c      	ite	eq
 80017ec:	2301      	moveq	r3, #1
 80017ee:	2300      	movne	r3, #0
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80017f4:	78fb      	ldrb	r3, [r7, #3]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d11a      	bne.n	8001830 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80017fa:	88fa      	ldrh	r2, [r7, #6]
 80017fc:	88bb      	ldrh	r3, [r7, #4]
 80017fe:	08db      	lsrs	r3, r3, #3
 8001800:	b298      	uxth	r0, r3
 8001802:	4603      	mov	r3, r0
 8001804:	01db      	lsls	r3, r3, #7
 8001806:	4413      	add	r3, r2
 8001808:	4a1b      	ldr	r2, [pc, #108]	; (8001878 <SSD1306_DrawPixel+0xb8>)
 800180a:	5cd3      	ldrb	r3, [r2, r3]
 800180c:	b25a      	sxtb	r2, r3
 800180e:	88bb      	ldrh	r3, [r7, #4]
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	2101      	movs	r1, #1
 8001816:	fa01 f303 	lsl.w	r3, r1, r3
 800181a:	b25b      	sxtb	r3, r3
 800181c:	4313      	orrs	r3, r2
 800181e:	b259      	sxtb	r1, r3
 8001820:	88fa      	ldrh	r2, [r7, #6]
 8001822:	4603      	mov	r3, r0
 8001824:	01db      	lsls	r3, r3, #7
 8001826:	4413      	add	r3, r2
 8001828:	b2c9      	uxtb	r1, r1
 800182a:	4a13      	ldr	r2, [pc, #76]	; (8001878 <SSD1306_DrawPixel+0xb8>)
 800182c:	54d1      	strb	r1, [r2, r3]
 800182e:	e01d      	b.n	800186c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001830:	88fa      	ldrh	r2, [r7, #6]
 8001832:	88bb      	ldrh	r3, [r7, #4]
 8001834:	08db      	lsrs	r3, r3, #3
 8001836:	b298      	uxth	r0, r3
 8001838:	4603      	mov	r3, r0
 800183a:	01db      	lsls	r3, r3, #7
 800183c:	4413      	add	r3, r2
 800183e:	4a0e      	ldr	r2, [pc, #56]	; (8001878 <SSD1306_DrawPixel+0xb8>)
 8001840:	5cd3      	ldrb	r3, [r2, r3]
 8001842:	b25a      	sxtb	r2, r3
 8001844:	88bb      	ldrh	r3, [r7, #4]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	2101      	movs	r1, #1
 800184c:	fa01 f303 	lsl.w	r3, r1, r3
 8001850:	b25b      	sxtb	r3, r3
 8001852:	43db      	mvns	r3, r3
 8001854:	b25b      	sxtb	r3, r3
 8001856:	4013      	ands	r3, r2
 8001858:	b259      	sxtb	r1, r3
 800185a:	88fa      	ldrh	r2, [r7, #6]
 800185c:	4603      	mov	r3, r0
 800185e:	01db      	lsls	r3, r3, #7
 8001860:	4413      	add	r3, r2
 8001862:	b2c9      	uxtb	r1, r1
 8001864:	4a04      	ldr	r2, [pc, #16]	; (8001878 <SSD1306_DrawPixel+0xb8>)
 8001866:	54d1      	strb	r1, [r2, r3]
 8001868:	e000      	b.n	800186c <SSD1306_DrawPixel+0xac>
		return;
 800186a:	bf00      	nop
	}
}
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr
 8001874:	20000568 	.word	0x20000568
 8001878:	20000168 	.word	0x20000168

0800187c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	460a      	mov	r2, r1
 8001886:	80fb      	strh	r3, [r7, #6]
 8001888:	4613      	mov	r3, r2
 800188a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800188c:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <SSD1306_GotoXY+0x28>)
 800188e:	88fb      	ldrh	r3, [r7, #6]
 8001890:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001892:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <SSD1306_GotoXY+0x28>)
 8001894:	88bb      	ldrh	r3, [r7, #4]
 8001896:	8053      	strh	r3, [r2, #2]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	20000568 	.word	0x20000568

080018a8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	6039      	str	r1, [r7, #0]
 80018b2:	71fb      	strb	r3, [r7, #7]
 80018b4:	4613      	mov	r3, r2
 80018b6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80018b8:	4b3a      	ldr	r3, [pc, #232]	; (80019a4 <SSD1306_Putc+0xfc>)
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	4413      	add	r3, r2
	if (
 80018c4:	2b7f      	cmp	r3, #127	; 0x7f
 80018c6:	dc07      	bgt.n	80018d8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80018c8:	4b36      	ldr	r3, [pc, #216]	; (80019a4 <SSD1306_Putc+0xfc>)
 80018ca:	885b      	ldrh	r3, [r3, #2]
 80018cc:	461a      	mov	r2, r3
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	785b      	ldrb	r3, [r3, #1]
 80018d2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80018d4:	2b3f      	cmp	r3, #63	; 0x3f
 80018d6:	dd01      	ble.n	80018dc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	e05e      	b.n	800199a <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	e04b      	b.n	800197a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	3b20      	subs	r3, #32
 80018ea:	6839      	ldr	r1, [r7, #0]
 80018ec:	7849      	ldrb	r1, [r1, #1]
 80018ee:	fb01 f303 	mul.w	r3, r1, r3
 80018f2:	4619      	mov	r1, r3
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	440b      	add	r3, r1
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	4413      	add	r3, r2
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001900:	2300      	movs	r3, #0
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	e030      	b.n	8001968 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d010      	beq.n	8001938 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001916:	4b23      	ldr	r3, [pc, #140]	; (80019a4 <SSD1306_Putc+0xfc>)
 8001918:	881a      	ldrh	r2, [r3, #0]
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	b29b      	uxth	r3, r3
 800191e:	4413      	add	r3, r2
 8001920:	b298      	uxth	r0, r3
 8001922:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <SSD1306_Putc+0xfc>)
 8001924:	885a      	ldrh	r2, [r3, #2]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	b29b      	uxth	r3, r3
 800192a:	4413      	add	r3, r2
 800192c:	b29b      	uxth	r3, r3
 800192e:	79ba      	ldrb	r2, [r7, #6]
 8001930:	4619      	mov	r1, r3
 8001932:	f7ff ff45 	bl	80017c0 <SSD1306_DrawPixel>
 8001936:	e014      	b.n	8001962 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001938:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <SSD1306_Putc+0xfc>)
 800193a:	881a      	ldrh	r2, [r3, #0]
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	b29b      	uxth	r3, r3
 8001940:	4413      	add	r3, r2
 8001942:	b298      	uxth	r0, r3
 8001944:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <SSD1306_Putc+0xfc>)
 8001946:	885a      	ldrh	r2, [r3, #2]
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	b29b      	uxth	r3, r3
 800194c:	4413      	add	r3, r2
 800194e:	b299      	uxth	r1, r3
 8001950:	79bb      	ldrb	r3, [r7, #6]
 8001952:	2b00      	cmp	r3, #0
 8001954:	bf0c      	ite	eq
 8001956:	2301      	moveq	r3, #1
 8001958:	2300      	movne	r3, #0
 800195a:	b2db      	uxtb	r3, r3
 800195c:	461a      	mov	r2, r3
 800195e:	f7ff ff2f 	bl	80017c0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	3301      	adds	r3, #1
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	461a      	mov	r2, r3
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	4293      	cmp	r3, r2
 8001972:	d3c8      	bcc.n	8001906 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	3301      	adds	r3, #1
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	785b      	ldrb	r3, [r3, #1]
 800197e:	461a      	mov	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	4293      	cmp	r3, r2
 8001984:	d3ad      	bcc.n	80018e2 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001986:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <SSD1306_Putc+0xfc>)
 8001988:	881a      	ldrh	r2, [r3, #0]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	b29b      	uxth	r3, r3
 8001990:	4413      	add	r3, r2
 8001992:	b29a      	uxth	r2, r3
 8001994:	4b03      	ldr	r3, [pc, #12]	; (80019a4 <SSD1306_Putc+0xfc>)
 8001996:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001998:	79fb      	ldrb	r3, [r7, #7]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000568 	.word	0x20000568

080019a8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	4613      	mov	r3, r2
 80019b4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80019b6:	e012      	b.n	80019de <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	79fa      	ldrb	r2, [r7, #7]
 80019be:	68b9      	ldr	r1, [r7, #8]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff71 	bl	80018a8 <SSD1306_Putc>
 80019c6:	4603      	mov	r3, r0
 80019c8:	461a      	mov	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d002      	beq.n	80019d8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	e008      	b.n	80019ea <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	3301      	adds	r3, #1
 80019dc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1e8      	bne.n	80019b8 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	781b      	ldrb	r3, [r3, #0]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80019f6:	2000      	movs	r0, #0
 80019f8:	f7ff feca 	bl	8001790 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80019fc:	f7ff fe9a 	bl	8001734 <SSD1306_UpdateScreen>
}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001a0a:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <ssd1306_I2C_Init+0x24>)
 8001a0c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a0e:	e002      	b.n	8001a16 <ssd1306_I2C_Init+0x12>
		p--;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1f9      	bne.n	8001a10 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	0003d090 	.word	0x0003d090

08001a2c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001a2c:	b590      	push	{r4, r7, lr}
 8001a2e:	b0c7      	sub	sp, #284	; 0x11c
 8001a30:	af02      	add	r7, sp, #8
 8001a32:	4604      	mov	r4, r0
 8001a34:	4608      	mov	r0, r1
 8001a36:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001a3a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001a3e:	600a      	str	r2, [r1, #0]
 8001a40:	4619      	mov	r1, r3
 8001a42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a46:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001a4a:	4622      	mov	r2, r4
 8001a4c:	701a      	strb	r2, [r3, #0]
 8001a4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a52:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001a56:	4602      	mov	r2, r0
 8001a58:	701a      	strb	r2, [r3, #0]
 8001a5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a5e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a62:	460a      	mov	r2, r1
 8001a64:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001a66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a6e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001a72:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001a76:	7812      	ldrb	r2, [r2, #0]
 8001a78:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001a80:	e015      	b.n	8001aae <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001a82:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a86:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001a8a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001a8e:	6812      	ldr	r2, [r2, #0]
 8001a90:	441a      	add	r2, r3
 8001a92:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a96:	3301      	adds	r3, #1
 8001a98:	7811      	ldrb	r1, [r2, #0]
 8001a9a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001a9e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001aa2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001aa4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001aae:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001ab8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001abc:	8812      	ldrh	r2, [r2, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d8df      	bhi.n	8001a82 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001ac2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001ac6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	b299      	uxth	r1, r3
 8001ace:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001ad2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	f107 020c 	add.w	r2, r7, #12
 8001ae0:	200a      	movs	r0, #10
 8001ae2:	9000      	str	r0, [sp, #0]
 8001ae4:	4803      	ldr	r0, [pc, #12]	; (8001af4 <ssd1306_I2C_WriteMulti+0xc8>)
 8001ae6:	f000 fdb3 	bl	8002650 <HAL_I2C_Master_Transmit>
}
 8001aea:	bf00      	nop
 8001aec:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd90      	pop	{r4, r7, pc}
 8001af4:	200000bc 	.word	0x200000bc

08001af8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af02      	add	r7, sp, #8
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
 8001b02:	460b      	mov	r3, r1
 8001b04:	71bb      	strb	r3, [r7, #6]
 8001b06:	4613      	mov	r3, r2
 8001b08:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001b0a:	79bb      	ldrb	r3, [r7, #6]
 8001b0c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001b0e:	797b      	ldrb	r3, [r7, #5]
 8001b10:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	b299      	uxth	r1, r3
 8001b16:	f107 020c 	add.w	r2, r7, #12
 8001b1a:	230a      	movs	r3, #10
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	2302      	movs	r3, #2
 8001b20:	4803      	ldr	r0, [pc, #12]	; (8001b30 <ssd1306_I2C_Write+0x38>)
 8001b22:	f000 fd95 	bl	8002650 <HAL_I2C_Master_Transmit>
}
 8001b26:	bf00      	nop
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200000bc 	.word	0x200000bc

08001b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	4a14      	ldr	r2, [pc, #80]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6193      	str	r3, [r2, #24]
 8001b46:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b52:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	4a0e      	ldr	r2, [pc, #56]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	61d3      	str	r3, [r2, #28]
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b66:	607b      	str	r3, [r7, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <HAL_MspInit+0x60>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <HAL_MspInit+0x60>)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40010000 	.word	0x40010000

08001b98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 0310 	add.w	r3, r7, #16
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a15      	ldr	r2, [pc, #84]	; (8001c08 <HAL_I2C_MspInit+0x70>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d123      	bne.n	8001c00 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb8:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <HAL_I2C_MspInit+0x74>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	4a13      	ldr	r2, [pc, #76]	; (8001c0c <HAL_I2C_MspInit+0x74>)
 8001bbe:	f043 0308 	orr.w	r3, r3, #8
 8001bc2:	6193      	str	r3, [r2, #24]
 8001bc4:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <HAL_I2C_MspInit+0x74>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	f003 0308 	and.w	r3, r3, #8
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bd0:	23c0      	movs	r3, #192	; 0xc0
 8001bd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bd4:	2312      	movs	r3, #18
 8001bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bdc:	f107 0310 	add.w	r3, r7, #16
 8001be0:	4619      	mov	r1, r3
 8001be2:	480b      	ldr	r0, [pc, #44]	; (8001c10 <HAL_I2C_MspInit+0x78>)
 8001be4:	f000 fa54 	bl	8002090 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <HAL_I2C_MspInit+0x74>)
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	4a07      	ldr	r2, [pc, #28]	; (8001c0c <HAL_I2C_MspInit+0x74>)
 8001bee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bf2:	61d3      	str	r3, [r2, #28]
 8001bf4:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <HAL_I2C_MspInit+0x74>)
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c00:	bf00      	nop
 8001c02:	3720      	adds	r7, #32
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40005400 	.word	0x40005400
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40010c00 	.word	0x40010c00

08001c14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	f107 0310 	add.w	r3, r7, #16
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a1b      	ldr	r2, [pc, #108]	; (8001c9c <HAL_SPI_MspInit+0x88>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d12f      	bne.n	8001c94 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c34:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <HAL_SPI_MspInit+0x8c>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	4a19      	ldr	r2, [pc, #100]	; (8001ca0 <HAL_SPI_MspInit+0x8c>)
 8001c3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c3e:	6193      	str	r3, [r2, #24]
 8001c40:	4b17      	ldr	r3, [pc, #92]	; (8001ca0 <HAL_SPI_MspInit+0x8c>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4c:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <HAL_SPI_MspInit+0x8c>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	4a13      	ldr	r2, [pc, #76]	; (8001ca0 <HAL_SPI_MspInit+0x8c>)
 8001c52:	f043 0304 	orr.w	r3, r3, #4
 8001c56:	6193      	str	r3, [r2, #24]
 8001c58:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <HAL_SPI_MspInit+0x8c>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001c64:	23a0      	movs	r3, #160	; 0xa0
 8001c66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c70:	f107 0310 	add.w	r3, r7, #16
 8001c74:	4619      	mov	r1, r3
 8001c76:	480b      	ldr	r0, [pc, #44]	; (8001ca4 <HAL_SPI_MspInit+0x90>)
 8001c78:	f000 fa0a 	bl	8002090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c7c:	2340      	movs	r3, #64	; 0x40
 8001c7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c88:	f107 0310 	add.w	r3, r7, #16
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <HAL_SPI_MspInit+0x90>)
 8001c90:	f000 f9fe 	bl	8002090 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c94:	bf00      	nop
 8001c96:	3720      	adds	r7, #32
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40013000 	.word	0x40013000
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40010800 	.word	0x40010800

08001ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cac:	e7fe      	b.n	8001cac <NMI_Handler+0x4>

08001cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cb2:	e7fe      	b.n	8001cb2 <HardFault_Handler+0x4>

08001cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <MemManage_Handler+0x4>

08001cba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cbe:	e7fe      	b.n	8001cbe <BusFault_Handler+0x4>

08001cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <UsageFault_Handler+0x4>

08001cc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr

08001cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr

08001cea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cee:	f000 f8ab 	bl	8001e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d00:	4a14      	ldr	r2, [pc, #80]	; (8001d54 <_sbrk+0x5c>)
 8001d02:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <_sbrk+0x60>)
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d0c:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <_sbrk+0x64>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d102      	bne.n	8001d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d14:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <_sbrk+0x64>)
 8001d16:	4a12      	ldr	r2, [pc, #72]	; (8001d60 <_sbrk+0x68>)
 8001d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d1a:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <_sbrk+0x64>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d207      	bcs.n	8001d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d28:	f002 fa38 	bl	800419c <__errno>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	220c      	movs	r2, #12
 8001d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d32:	f04f 33ff 	mov.w	r3, #4294967295
 8001d36:	e009      	b.n	8001d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d38:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <_sbrk+0x64>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d3e:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <_sbrk+0x64>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	4a05      	ldr	r2, [pc, #20]	; (8001d5c <_sbrk+0x64>)
 8001d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20005000 	.word	0x20005000
 8001d58:	00000400 	.word	0x00000400
 8001d5c:	20000570 	.word	0x20000570
 8001d60:	20000588 	.word	0x20000588

08001d64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001d70:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001d72:	e003      	b.n	8001d7c <LoopCopyDataInit>

08001d74 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001d74:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001d76:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001d78:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001d7a:	3104      	adds	r1, #4

08001d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001d7c:	480a      	ldr	r0, [pc, #40]	; (8001da8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001d80:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001d82:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001d84:	d3f6      	bcc.n	8001d74 <CopyDataInit>
  ldr r2, =_sbss
 8001d86:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001d88:	e002      	b.n	8001d90 <LoopFillZerobss>

08001d8a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001d8a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001d8c:	f842 3b04 	str.w	r3, [r2], #4

08001d90 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001d90:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001d92:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001d94:	d3f9      	bcc.n	8001d8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d96:	f7ff ffe5 	bl	8001d64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d9a:	f002 fa05 	bl	80041a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d9e:	f7ff f9bb 	bl	8001118 <main>
  bx lr
 8001da2:	4770      	bx	lr
  ldr r3, =_sidata
 8001da4:	08006740 	.word	0x08006740
  ldr r0, =_sdata
 8001da8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001dac:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8001db0:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8001db4:	20000588 	.word	0x20000588

08001db8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001db8:	e7fe      	b.n	8001db8 <ADC1_2_IRQHandler>
	...

08001dbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dc0:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <HAL_Init+0x28>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a07      	ldr	r2, [pc, #28]	; (8001de4 <HAL_Init+0x28>)
 8001dc6:	f043 0310 	orr.w	r3, r3, #16
 8001dca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dcc:	2003      	movs	r0, #3
 8001dce:	f000 f92b 	bl	8002028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f000 f808 	bl	8001de8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dd8:	f7ff feac 	bl	8001b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40022000 	.word	0x40022000

08001de8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001df0:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <HAL_InitTick+0x54>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <HAL_InitTick+0x58>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 f935 	bl	8002076 <HAL_SYSTICK_Config>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e00e      	b.n	8001e34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b0f      	cmp	r3, #15
 8001e1a:	d80a      	bhi.n	8001e32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295
 8001e24:	f000 f90b 	bl	800203e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e28:	4a06      	ldr	r2, [pc, #24]	; (8001e44 <HAL_InitTick+0x5c>)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	e000      	b.n	8001e34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20000008 	.word	0x20000008
 8001e40:	20000010 	.word	0x20000010
 8001e44:	2000000c 	.word	0x2000000c

08001e48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e4c:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_IncTick+0x1c>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <HAL_IncTick+0x20>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4413      	add	r3, r2
 8001e58:	4a03      	ldr	r2, [pc, #12]	; (8001e68 <HAL_IncTick+0x20>)
 8001e5a:	6013      	str	r3, [r2, #0]
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr
 8001e64:	20000010 	.word	0x20000010
 8001e68:	20000574 	.word	0x20000574

08001e6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e70:	4b02      	ldr	r3, [pc, #8]	; (8001e7c <HAL_GetTick+0x10>)
 8001e72:	681b      	ldr	r3, [r3, #0]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr
 8001e7c:	20000574 	.word	0x20000574

08001e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e88:	f7ff fff0 	bl	8001e6c <HAL_GetTick>
 8001e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e98:	d005      	beq.n	8001ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <HAL_Delay+0x44>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ea6:	bf00      	nop
 8001ea8:	f7ff ffe0 	bl	8001e6c <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d8f7      	bhi.n	8001ea8 <HAL_Delay+0x28>
  {
  }
}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000010 	.word	0x20000010

08001ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <__NVIC_SetPriorityGrouping+0x44>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001efa:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <__NVIC_SetPriorityGrouping+0x44>)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	60d3      	str	r3, [r2, #12]
}
 8001f00:	bf00      	nop
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f14:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <__NVIC_GetPriorityGrouping+0x18>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	f003 0307 	and.w	r3, r3, #7
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	6039      	str	r1, [r7, #0]
 8001f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	db0a      	blt.n	8001f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	490c      	ldr	r1, [pc, #48]	; (8001f78 <__NVIC_SetPriority+0x4c>)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	0112      	lsls	r2, r2, #4
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	440b      	add	r3, r1
 8001f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f54:	e00a      	b.n	8001f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4908      	ldr	r1, [pc, #32]	; (8001f7c <__NVIC_SetPriority+0x50>)
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	3b04      	subs	r3, #4
 8001f64:	0112      	lsls	r2, r2, #4
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	440b      	add	r3, r1
 8001f6a:	761a      	strb	r2, [r3, #24]
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	e000e100 	.word	0xe000e100
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b089      	sub	sp, #36	; 0x24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f1c3 0307 	rsb	r3, r3, #7
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	bf28      	it	cs
 8001f9e:	2304      	movcs	r3, #4
 8001fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	2b06      	cmp	r3, #6
 8001fa8:	d902      	bls.n	8001fb0 <NVIC_EncodePriority+0x30>
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3b03      	subs	r3, #3
 8001fae:	e000      	b.n	8001fb2 <NVIC_EncodePriority+0x32>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43da      	mvns	r2, r3
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd2:	43d9      	mvns	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd8:	4313      	orrs	r3, r2
         );
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3724      	adds	r7, #36	; 0x24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ff4:	d301      	bcc.n	8001ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e00f      	b.n	800201a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <SysTick_Config+0x40>)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002002:	210f      	movs	r1, #15
 8002004:	f04f 30ff 	mov.w	r0, #4294967295
 8002008:	f7ff ff90 	bl	8001f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <SysTick_Config+0x40>)
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002012:	4b04      	ldr	r3, [pc, #16]	; (8002024 <SysTick_Config+0x40>)
 8002014:	2207      	movs	r2, #7
 8002016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	e000e010 	.word	0xe000e010

08002028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff ff49 	bl	8001ec8 <__NVIC_SetPriorityGrouping>
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800203e:	b580      	push	{r7, lr}
 8002040:	b086      	sub	sp, #24
 8002042:	af00      	add	r7, sp, #0
 8002044:	4603      	mov	r3, r0
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
 800204a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002050:	f7ff ff5e 	bl	8001f10 <__NVIC_GetPriorityGrouping>
 8002054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	68b9      	ldr	r1, [r7, #8]
 800205a:	6978      	ldr	r0, [r7, #20]
 800205c:	f7ff ff90 	bl	8001f80 <NVIC_EncodePriority>
 8002060:	4602      	mov	r2, r0
 8002062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002066:	4611      	mov	r1, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff5f 	bl	8001f2c <__NVIC_SetPriority>
}
 800206e:	bf00      	nop
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff ffb0 	bl	8001fe4 <SysTick_Config>
 8002084:	4603      	mov	r3, r0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002090:	b480      	push	{r7}
 8002092:	b08b      	sub	sp, #44	; 0x2c
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800209a:	2300      	movs	r3, #0
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800209e:	2300      	movs	r3, #0
 80020a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a2:	e169      	b.n	8002378 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020a4:	2201      	movs	r2, #1
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	69fa      	ldr	r2, [r7, #28]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	429a      	cmp	r2, r3
 80020be:	f040 8158 	bne.w	8002372 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4a9a      	ldr	r2, [pc, #616]	; (8002330 <HAL_GPIO_Init+0x2a0>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d05e      	beq.n	800218a <HAL_GPIO_Init+0xfa>
 80020cc:	4a98      	ldr	r2, [pc, #608]	; (8002330 <HAL_GPIO_Init+0x2a0>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d875      	bhi.n	80021be <HAL_GPIO_Init+0x12e>
 80020d2:	4a98      	ldr	r2, [pc, #608]	; (8002334 <HAL_GPIO_Init+0x2a4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d058      	beq.n	800218a <HAL_GPIO_Init+0xfa>
 80020d8:	4a96      	ldr	r2, [pc, #600]	; (8002334 <HAL_GPIO_Init+0x2a4>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d86f      	bhi.n	80021be <HAL_GPIO_Init+0x12e>
 80020de:	4a96      	ldr	r2, [pc, #600]	; (8002338 <HAL_GPIO_Init+0x2a8>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d052      	beq.n	800218a <HAL_GPIO_Init+0xfa>
 80020e4:	4a94      	ldr	r2, [pc, #592]	; (8002338 <HAL_GPIO_Init+0x2a8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d869      	bhi.n	80021be <HAL_GPIO_Init+0x12e>
 80020ea:	4a94      	ldr	r2, [pc, #592]	; (800233c <HAL_GPIO_Init+0x2ac>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d04c      	beq.n	800218a <HAL_GPIO_Init+0xfa>
 80020f0:	4a92      	ldr	r2, [pc, #584]	; (800233c <HAL_GPIO_Init+0x2ac>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d863      	bhi.n	80021be <HAL_GPIO_Init+0x12e>
 80020f6:	4a92      	ldr	r2, [pc, #584]	; (8002340 <HAL_GPIO_Init+0x2b0>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d046      	beq.n	800218a <HAL_GPIO_Init+0xfa>
 80020fc:	4a90      	ldr	r2, [pc, #576]	; (8002340 <HAL_GPIO_Init+0x2b0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d85d      	bhi.n	80021be <HAL_GPIO_Init+0x12e>
 8002102:	2b12      	cmp	r3, #18
 8002104:	d82a      	bhi.n	800215c <HAL_GPIO_Init+0xcc>
 8002106:	2b12      	cmp	r3, #18
 8002108:	d859      	bhi.n	80021be <HAL_GPIO_Init+0x12e>
 800210a:	a201      	add	r2, pc, #4	; (adr r2, 8002110 <HAL_GPIO_Init+0x80>)
 800210c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002110:	0800218b 	.word	0x0800218b
 8002114:	08002165 	.word	0x08002165
 8002118:	08002177 	.word	0x08002177
 800211c:	080021b9 	.word	0x080021b9
 8002120:	080021bf 	.word	0x080021bf
 8002124:	080021bf 	.word	0x080021bf
 8002128:	080021bf 	.word	0x080021bf
 800212c:	080021bf 	.word	0x080021bf
 8002130:	080021bf 	.word	0x080021bf
 8002134:	080021bf 	.word	0x080021bf
 8002138:	080021bf 	.word	0x080021bf
 800213c:	080021bf 	.word	0x080021bf
 8002140:	080021bf 	.word	0x080021bf
 8002144:	080021bf 	.word	0x080021bf
 8002148:	080021bf 	.word	0x080021bf
 800214c:	080021bf 	.word	0x080021bf
 8002150:	080021bf 	.word	0x080021bf
 8002154:	0800216d 	.word	0x0800216d
 8002158:	08002181 	.word	0x08002181
 800215c:	4a79      	ldr	r2, [pc, #484]	; (8002344 <HAL_GPIO_Init+0x2b4>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d013      	beq.n	800218a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002162:	e02c      	b.n	80021be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	623b      	str	r3, [r7, #32]
          break;
 800216a:	e029      	b.n	80021c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	3304      	adds	r3, #4
 8002172:	623b      	str	r3, [r7, #32]
          break;
 8002174:	e024      	b.n	80021c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	3308      	adds	r3, #8
 800217c:	623b      	str	r3, [r7, #32]
          break;
 800217e:	e01f      	b.n	80021c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	330c      	adds	r3, #12
 8002186:	623b      	str	r3, [r7, #32]
          break;
 8002188:	e01a      	b.n	80021c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d102      	bne.n	8002198 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002192:	2304      	movs	r3, #4
 8002194:	623b      	str	r3, [r7, #32]
          break;
 8002196:	e013      	b.n	80021c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d105      	bne.n	80021ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021a0:	2308      	movs	r3, #8
 80021a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	69fa      	ldr	r2, [r7, #28]
 80021a8:	611a      	str	r2, [r3, #16]
          break;
 80021aa:	e009      	b.n	80021c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021ac:	2308      	movs	r3, #8
 80021ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69fa      	ldr	r2, [r7, #28]
 80021b4:	615a      	str	r2, [r3, #20]
          break;
 80021b6:	e003      	b.n	80021c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021b8:	2300      	movs	r3, #0
 80021ba:	623b      	str	r3, [r7, #32]
          break;
 80021bc:	e000      	b.n	80021c0 <HAL_GPIO_Init+0x130>
          break;
 80021be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	2bff      	cmp	r3, #255	; 0xff
 80021c4:	d801      	bhi.n	80021ca <HAL_GPIO_Init+0x13a>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	e001      	b.n	80021ce <HAL_GPIO_Init+0x13e>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3304      	adds	r3, #4
 80021ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	2bff      	cmp	r3, #255	; 0xff
 80021d4:	d802      	bhi.n	80021dc <HAL_GPIO_Init+0x14c>
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	e002      	b.n	80021e2 <HAL_GPIO_Init+0x152>
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	3b08      	subs	r3, #8
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	210f      	movs	r1, #15
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	fa01 f303 	lsl.w	r3, r1, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	401a      	ands	r2, r3
 80021f4:	6a39      	ldr	r1, [r7, #32]
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	fa01 f303 	lsl.w	r3, r1, r3
 80021fc:	431a      	orrs	r2, r3
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 80b1 	beq.w	8002372 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002210:	4b4d      	ldr	r3, [pc, #308]	; (8002348 <HAL_GPIO_Init+0x2b8>)
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	4a4c      	ldr	r2, [pc, #304]	; (8002348 <HAL_GPIO_Init+0x2b8>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	6193      	str	r3, [r2, #24]
 800221c:	4b4a      	ldr	r3, [pc, #296]	; (8002348 <HAL_GPIO_Init+0x2b8>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002228:	4a48      	ldr	r2, [pc, #288]	; (800234c <HAL_GPIO_Init+0x2bc>)
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	089b      	lsrs	r3, r3, #2
 800222e:	3302      	adds	r3, #2
 8002230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002234:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	f003 0303 	and.w	r3, r3, #3
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	220f      	movs	r2, #15
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4013      	ands	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a40      	ldr	r2, [pc, #256]	; (8002350 <HAL_GPIO_Init+0x2c0>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d013      	beq.n	800227c <HAL_GPIO_Init+0x1ec>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a3f      	ldr	r2, [pc, #252]	; (8002354 <HAL_GPIO_Init+0x2c4>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d00d      	beq.n	8002278 <HAL_GPIO_Init+0x1e8>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a3e      	ldr	r2, [pc, #248]	; (8002358 <HAL_GPIO_Init+0x2c8>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d007      	beq.n	8002274 <HAL_GPIO_Init+0x1e4>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a3d      	ldr	r2, [pc, #244]	; (800235c <HAL_GPIO_Init+0x2cc>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d101      	bne.n	8002270 <HAL_GPIO_Init+0x1e0>
 800226c:	2303      	movs	r3, #3
 800226e:	e006      	b.n	800227e <HAL_GPIO_Init+0x1ee>
 8002270:	2304      	movs	r3, #4
 8002272:	e004      	b.n	800227e <HAL_GPIO_Init+0x1ee>
 8002274:	2302      	movs	r3, #2
 8002276:	e002      	b.n	800227e <HAL_GPIO_Init+0x1ee>
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <HAL_GPIO_Init+0x1ee>
 800227c:	2300      	movs	r3, #0
 800227e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002280:	f002 0203 	and.w	r2, r2, #3
 8002284:	0092      	lsls	r2, r2, #2
 8002286:	4093      	lsls	r3, r2
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	4313      	orrs	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800228e:	492f      	ldr	r1, [pc, #188]	; (800234c <HAL_GPIO_Init+0x2bc>)
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	089b      	lsrs	r3, r3, #2
 8002294:	3302      	adds	r3, #2
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d006      	beq.n	80022b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022a8:	4b2d      	ldr	r3, [pc, #180]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	492c      	ldr	r1, [pc, #176]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	600b      	str	r3, [r1, #0]
 80022b4:	e006      	b.n	80022c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022b6:	4b2a      	ldr	r3, [pc, #168]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	43db      	mvns	r3, r3
 80022be:	4928      	ldr	r1, [pc, #160]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d006      	beq.n	80022de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022d0:	4b23      	ldr	r3, [pc, #140]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	4922      	ldr	r1, [pc, #136]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	604b      	str	r3, [r1, #4]
 80022dc:	e006      	b.n	80022ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022de:	4b20      	ldr	r3, [pc, #128]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	491e      	ldr	r1, [pc, #120]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d006      	beq.n	8002306 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022f8:	4b19      	ldr	r3, [pc, #100]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	4918      	ldr	r1, [pc, #96]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	4313      	orrs	r3, r2
 8002302:	608b      	str	r3, [r1, #8]
 8002304:	e006      	b.n	8002314 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002306:	4b16      	ldr	r3, [pc, #88]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	43db      	mvns	r3, r3
 800230e:	4914      	ldr	r1, [pc, #80]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 8002310:	4013      	ands	r3, r2
 8002312:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d021      	beq.n	8002364 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002320:	4b0f      	ldr	r3, [pc, #60]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	490e      	ldr	r1, [pc, #56]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	4313      	orrs	r3, r2
 800232a:	60cb      	str	r3, [r1, #12]
 800232c:	e021      	b.n	8002372 <HAL_GPIO_Init+0x2e2>
 800232e:	bf00      	nop
 8002330:	10320000 	.word	0x10320000
 8002334:	10310000 	.word	0x10310000
 8002338:	10220000 	.word	0x10220000
 800233c:	10210000 	.word	0x10210000
 8002340:	10120000 	.word	0x10120000
 8002344:	10110000 	.word	0x10110000
 8002348:	40021000 	.word	0x40021000
 800234c:	40010000 	.word	0x40010000
 8002350:	40010800 	.word	0x40010800
 8002354:	40010c00 	.word	0x40010c00
 8002358:	40011000 	.word	0x40011000
 800235c:	40011400 	.word	0x40011400
 8002360:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HAL_GPIO_Init+0x304>)
 8002366:	68da      	ldr	r2, [r3, #12]
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	43db      	mvns	r3, r3
 800236c:	4909      	ldr	r1, [pc, #36]	; (8002394 <HAL_GPIO_Init+0x304>)
 800236e:	4013      	ands	r3, r2
 8002370:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	3301      	adds	r3, #1
 8002376:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	fa22 f303 	lsr.w	r3, r2, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	f47f ae8e 	bne.w	80020a4 <HAL_GPIO_Init+0x14>
  }
}
 8002388:	bf00      	nop
 800238a:	bf00      	nop
 800238c:	372c      	adds	r7, #44	; 0x2c
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr
 8002394:	40010400 	.word	0x40010400

08002398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	807b      	strh	r3, [r7, #2]
 80023a4:	4613      	mov	r3, r2
 80023a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023a8:	787b      	ldrb	r3, [r7, #1]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ae:	887a      	ldrh	r2, [r7, #2]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023b4:	e003      	b.n	80023be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023b6:	887b      	ldrh	r3, [r7, #2]
 80023b8:	041a      	lsls	r2, r3, #16
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	611a      	str	r2, [r3, #16]
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr

080023c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e12b      	b.n	8002632 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d106      	bne.n	80023f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff fbd2 	bl	8001b98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2224      	movs	r2, #36	; 0x24
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0201 	bic.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800241a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800242a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800242c:	f001 f918 	bl	8003660 <HAL_RCC_GetPCLK1Freq>
 8002430:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	4a81      	ldr	r2, [pc, #516]	; (800263c <HAL_I2C_Init+0x274>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d807      	bhi.n	800244c <HAL_I2C_Init+0x84>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4a80      	ldr	r2, [pc, #512]	; (8002640 <HAL_I2C_Init+0x278>)
 8002440:	4293      	cmp	r3, r2
 8002442:	bf94      	ite	ls
 8002444:	2301      	movls	r3, #1
 8002446:	2300      	movhi	r3, #0
 8002448:	b2db      	uxtb	r3, r3
 800244a:	e006      	b.n	800245a <HAL_I2C_Init+0x92>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4a7d      	ldr	r2, [pc, #500]	; (8002644 <HAL_I2C_Init+0x27c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	bf94      	ite	ls
 8002454:	2301      	movls	r3, #1
 8002456:	2300      	movhi	r3, #0
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e0e7      	b.n	8002632 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	4a78      	ldr	r2, [pc, #480]	; (8002648 <HAL_I2C_Init+0x280>)
 8002466:	fba2 2303 	umull	r2, r3, r2, r3
 800246a:	0c9b      	lsrs	r3, r3, #18
 800246c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	430a      	orrs	r2, r1
 8002480:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	4a6a      	ldr	r2, [pc, #424]	; (800263c <HAL_I2C_Init+0x274>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d802      	bhi.n	800249c <HAL_I2C_Init+0xd4>
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	3301      	adds	r3, #1
 800249a:	e009      	b.n	80024b0 <HAL_I2C_Init+0xe8>
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024a2:	fb02 f303 	mul.w	r3, r2, r3
 80024a6:	4a69      	ldr	r2, [pc, #420]	; (800264c <HAL_I2C_Init+0x284>)
 80024a8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ac:	099b      	lsrs	r3, r3, #6
 80024ae:	3301      	adds	r3, #1
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	430b      	orrs	r3, r1
 80024b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	495c      	ldr	r1, [pc, #368]	; (800263c <HAL_I2C_Init+0x274>)
 80024cc:	428b      	cmp	r3, r1
 80024ce:	d819      	bhi.n	8002504 <HAL_I2C_Init+0x13c>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	1e59      	subs	r1, r3, #1
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	fbb1 f3f3 	udiv	r3, r1, r3
 80024de:	1c59      	adds	r1, r3, #1
 80024e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80024e4:	400b      	ands	r3, r1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00a      	beq.n	8002500 <HAL_I2C_Init+0x138>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	1e59      	subs	r1, r3, #1
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80024f8:	3301      	adds	r3, #1
 80024fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024fe:	e051      	b.n	80025a4 <HAL_I2C_Init+0x1dc>
 8002500:	2304      	movs	r3, #4
 8002502:	e04f      	b.n	80025a4 <HAL_I2C_Init+0x1dc>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d111      	bne.n	8002530 <HAL_I2C_Init+0x168>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	1e58      	subs	r0, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6859      	ldr	r1, [r3, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	440b      	add	r3, r1
 800251a:	fbb0 f3f3 	udiv	r3, r0, r3
 800251e:	3301      	adds	r3, #1
 8002520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002524:	2b00      	cmp	r3, #0
 8002526:	bf0c      	ite	eq
 8002528:	2301      	moveq	r3, #1
 800252a:	2300      	movne	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	e012      	b.n	8002556 <HAL_I2C_Init+0x18e>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	1e58      	subs	r0, r3, #1
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6859      	ldr	r1, [r3, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	0099      	lsls	r1, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	fbb0 f3f3 	udiv	r3, r0, r3
 8002546:	3301      	adds	r3, #1
 8002548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800254c:	2b00      	cmp	r3, #0
 800254e:	bf0c      	ite	eq
 8002550:	2301      	moveq	r3, #1
 8002552:	2300      	movne	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_I2C_Init+0x196>
 800255a:	2301      	movs	r3, #1
 800255c:	e022      	b.n	80025a4 <HAL_I2C_Init+0x1dc>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10e      	bne.n	8002584 <HAL_I2C_Init+0x1bc>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	1e58      	subs	r0, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6859      	ldr	r1, [r3, #4]
 800256e:	460b      	mov	r3, r1
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	440b      	add	r3, r1
 8002574:	fbb0 f3f3 	udiv	r3, r0, r3
 8002578:	3301      	adds	r3, #1
 800257a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800257e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002582:	e00f      	b.n	80025a4 <HAL_I2C_Init+0x1dc>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	1e58      	subs	r0, r3, #1
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6859      	ldr	r1, [r3, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	0099      	lsls	r1, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	fbb0 f3f3 	udiv	r3, r0, r3
 800259a:	3301      	adds	r3, #1
 800259c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	6809      	ldr	r1, [r1, #0]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69da      	ldr	r2, [r3, #28]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6911      	ldr	r1, [r2, #16]
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	68d2      	ldr	r2, [r2, #12]
 80025de:	4311      	orrs	r1, r2
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	430b      	orrs	r3, r1
 80025e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	695a      	ldr	r2, [r3, #20]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0201 	orr.w	r2, r2, #1
 8002612:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2220      	movs	r2, #32
 800261e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	000186a0 	.word	0x000186a0
 8002640:	001e847f 	.word	0x001e847f
 8002644:	003d08ff 	.word	0x003d08ff
 8002648:	431bde83 	.word	0x431bde83
 800264c:	10624dd3 	.word	0x10624dd3

08002650 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b088      	sub	sp, #32
 8002654:	af02      	add	r7, sp, #8
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	607a      	str	r2, [r7, #4]
 800265a:	461a      	mov	r2, r3
 800265c:	460b      	mov	r3, r1
 800265e:	817b      	strh	r3, [r7, #10]
 8002660:	4613      	mov	r3, r2
 8002662:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002664:	f7ff fc02 	bl	8001e6c <HAL_GetTick>
 8002668:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b20      	cmp	r3, #32
 8002674:	f040 80e0 	bne.w	8002838 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	2319      	movs	r3, #25
 800267e:	2201      	movs	r2, #1
 8002680:	4970      	ldr	r1, [pc, #448]	; (8002844 <HAL_I2C_Master_Transmit+0x1f4>)
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 fa92 	bl	8002bac <I2C_WaitOnFlagUntilTimeout>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800268e:	2302      	movs	r3, #2
 8002690:	e0d3      	b.n	800283a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002698:	2b01      	cmp	r3, #1
 800269a:	d101      	bne.n	80026a0 <HAL_I2C_Master_Transmit+0x50>
 800269c:	2302      	movs	r3, #2
 800269e:	e0cc      	b.n	800283a <HAL_I2C_Master_Transmit+0x1ea>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d007      	beq.n	80026c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f042 0201 	orr.w	r2, r2, #1
 80026c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2221      	movs	r2, #33	; 0x21
 80026da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2210      	movs	r2, #16
 80026e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	893a      	ldrh	r2, [r7, #8]
 80026f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	4a50      	ldr	r2, [pc, #320]	; (8002848 <HAL_I2C_Master_Transmit+0x1f8>)
 8002706:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002708:	8979      	ldrh	r1, [r7, #10]
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	6a3a      	ldr	r2, [r7, #32]
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 f9ca 	bl	8002aa8 <I2C_MasterRequestWrite>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e08d      	b.n	800283a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800271e:	2300      	movs	r3, #0
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	613b      	str	r3, [r7, #16]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002734:	e066      	b.n	8002804 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	6a39      	ldr	r1, [r7, #32]
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 fb0c 	bl	8002d58 <I2C_WaitOnTXEFlagUntilTimeout>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00d      	beq.n	8002762 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	2b04      	cmp	r3, #4
 800274c:	d107      	bne.n	800275e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800275c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e06b      	b.n	800283a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002766:	781a      	ldrb	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	1c5a      	adds	r2, r3, #1
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277c:	b29b      	uxth	r3, r3
 800277e:	3b01      	subs	r3, #1
 8002780:	b29a      	uxth	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278a:	3b01      	subs	r3, #1
 800278c:	b29a      	uxth	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b04      	cmp	r3, #4
 800279e:	d11b      	bne.n	80027d8 <HAL_I2C_Master_Transmit+0x188>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d017      	beq.n	80027d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	781a      	ldrb	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	1c5a      	adds	r2, r3, #1
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	3b01      	subs	r3, #1
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d0:	3b01      	subs	r3, #1
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	6a39      	ldr	r1, [r7, #32]
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f000 fafc 	bl	8002dda <I2C_WaitOnBTFFlagUntilTimeout>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00d      	beq.n	8002804 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d107      	bne.n	8002800 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e01a      	b.n	800283a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002808:	2b00      	cmp	r3, #0
 800280a:	d194      	bne.n	8002736 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800281a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2220      	movs	r2, #32
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002834:	2300      	movs	r3, #0
 8002836:	e000      	b.n	800283a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002838:	2302      	movs	r3, #2
  }
}
 800283a:	4618      	mov	r0, r3
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	00100002 	.word	0x00100002
 8002848:	ffff0000 	.word	0xffff0000

0800284c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08a      	sub	sp, #40	; 0x28
 8002850:	af02      	add	r7, sp, #8
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	607a      	str	r2, [r7, #4]
 8002856:	603b      	str	r3, [r7, #0]
 8002858:	460b      	mov	r3, r1
 800285a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800285c:	f7ff fb06 	bl	8001e6c <HAL_GetTick>
 8002860:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002862:	2301      	movs	r3, #1
 8002864:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b20      	cmp	r3, #32
 8002870:	f040 8111 	bne.w	8002a96 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	2319      	movs	r3, #25
 800287a:	2201      	movs	r2, #1
 800287c:	4988      	ldr	r1, [pc, #544]	; (8002aa0 <HAL_I2C_IsDeviceReady+0x254>)
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 f994 	bl	8002bac <I2C_WaitOnFlagUntilTimeout>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800288a:	2302      	movs	r3, #2
 800288c:	e104      	b.n	8002a98 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002894:	2b01      	cmp	r3, #1
 8002896:	d101      	bne.n	800289c <HAL_I2C_IsDeviceReady+0x50>
 8002898:	2302      	movs	r3, #2
 800289a:	e0fd      	b.n	8002a98 <HAL_I2C_IsDeviceReady+0x24c>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d007      	beq.n	80028c2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f042 0201 	orr.w	r2, r2, #1
 80028c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2224      	movs	r2, #36	; 0x24
 80028d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	4a70      	ldr	r2, [pc, #448]	; (8002aa4 <HAL_I2C_IsDeviceReady+0x258>)
 80028e4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028f4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 f952 	bl	8002bac <I2C_WaitOnFlagUntilTimeout>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00d      	beq.n	800292a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800291c:	d103      	bne.n	8002926 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002924:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e0b6      	b.n	8002a98 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800292a:	897b      	ldrh	r3, [r7, #10]
 800292c:	b2db      	uxtb	r3, r3
 800292e:	461a      	mov	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002938:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800293a:	f7ff fa97 	bl	8001e6c <HAL_GetTick>
 800293e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b02      	cmp	r3, #2
 800294c:	bf0c      	ite	eq
 800294e:	2301      	moveq	r3, #1
 8002950:	2300      	movne	r3, #0
 8002952:	b2db      	uxtb	r3, r3
 8002954:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002960:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002964:	bf0c      	ite	eq
 8002966:	2301      	moveq	r3, #1
 8002968:	2300      	movne	r3, #0
 800296a:	b2db      	uxtb	r3, r3
 800296c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800296e:	e025      	b.n	80029bc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002970:	f7ff fa7c 	bl	8001e6c <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d302      	bcc.n	8002986 <HAL_I2C_IsDeviceReady+0x13a>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d103      	bne.n	800298e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	22a0      	movs	r2, #160	; 0xa0
 800298a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b02      	cmp	r3, #2
 800299a:	bf0c      	ite	eq
 800299c:	2301      	moveq	r3, #1
 800299e:	2300      	movne	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b2:	bf0c      	ite	eq
 80029b4:	2301      	moveq	r3, #1
 80029b6:	2300      	movne	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2ba0      	cmp	r3, #160	; 0xa0
 80029c6:	d005      	beq.n	80029d4 <HAL_I2C_IsDeviceReady+0x188>
 80029c8:	7dfb      	ldrb	r3, [r7, #23]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d102      	bne.n	80029d4 <HAL_I2C_IsDeviceReady+0x188>
 80029ce:	7dbb      	ldrb	r3, [r7, #22]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0cd      	beq.n	8002970 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2220      	movs	r2, #32
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d129      	bne.n	8002a3e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029fa:	2300      	movs	r3, #0
 80029fc:	613b      	str	r3, [r7, #16]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	613b      	str	r3, [r7, #16]
 8002a0e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	2319      	movs	r3, #25
 8002a16:	2201      	movs	r2, #1
 8002a18:	4921      	ldr	r1, [pc, #132]	; (8002aa0 <HAL_I2C_IsDeviceReady+0x254>)
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f000 f8c6 	bl	8002bac <I2C_WaitOnFlagUntilTimeout>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e036      	b.n	8002a98 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	e02c      	b.n	8002a98 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a4c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a56:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	2319      	movs	r3, #25
 8002a5e:	2201      	movs	r2, #1
 8002a60:	490f      	ldr	r1, [pc, #60]	; (8002aa0 <HAL_I2C_IsDeviceReady+0x254>)
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 f8a2 	bl	8002bac <I2C_WaitOnFlagUntilTimeout>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e012      	b.n	8002a98 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	3301      	adds	r3, #1
 8002a76:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	f4ff af32 	bcc.w	80028e6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2220      	movs	r2, #32
 8002a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002a96:	2302      	movs	r3, #2
  }
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3720      	adds	r7, #32
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	00100002 	.word	0x00100002
 8002aa4:	ffff0000 	.word	0xffff0000

08002aa8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b088      	sub	sp, #32
 8002aac:	af02      	add	r7, sp, #8
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	607a      	str	r2, [r7, #4]
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d006      	beq.n	8002ad2 <I2C_MasterRequestWrite+0x2a>
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d003      	beq.n	8002ad2 <I2C_MasterRequestWrite+0x2a>
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ad0:	d108      	bne.n	8002ae4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	e00b      	b.n	8002afc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae8:	2b12      	cmp	r3, #18
 8002aea:	d107      	bne.n	8002afc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002afa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 f84f 	bl	8002bac <I2C_WaitOnFlagUntilTimeout>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00d      	beq.n	8002b30 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b22:	d103      	bne.n	8002b2c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e035      	b.n	8002b9c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b38:	d108      	bne.n	8002b4c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b3a:	897b      	ldrh	r3, [r7, #10]
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b48:	611a      	str	r2, [r3, #16]
 8002b4a:	e01b      	b.n	8002b84 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b4c:	897b      	ldrh	r3, [r7, #10]
 8002b4e:	11db      	asrs	r3, r3, #7
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	f003 0306 	and.w	r3, r3, #6
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	f063 030f 	orn	r3, r3, #15
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	490e      	ldr	r1, [pc, #56]	; (8002ba4 <I2C_MasterRequestWrite+0xfc>)
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 f875 	bl	8002c5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e010      	b.n	8002b9c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b7a:	897b      	ldrh	r3, [r7, #10]
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	4907      	ldr	r1, [pc, #28]	; (8002ba8 <I2C_MasterRequestWrite+0x100>)
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 f865 	bl	8002c5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	00010008 	.word	0x00010008
 8002ba8:	00010002 	.word	0x00010002

08002bac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	603b      	str	r3, [r7, #0]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bbc:	e025      	b.n	8002c0a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc4:	d021      	beq.n	8002c0a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc6:	f7ff f951 	bl	8001e6c <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d302      	bcc.n	8002bdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d116      	bne.n	8002c0a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2220      	movs	r2, #32
 8002be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f043 0220 	orr.w	r2, r3, #32
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e023      	b.n	8002c52 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	0c1b      	lsrs	r3, r3, #16
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d10d      	bne.n	8002c30 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	43da      	mvns	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	bf0c      	ite	eq
 8002c26:	2301      	moveq	r3, #1
 8002c28:	2300      	movne	r3, #0
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	e00c      	b.n	8002c4a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	43da      	mvns	r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	bf0c      	ite	eq
 8002c42:	2301      	moveq	r3, #1
 8002c44:	2300      	movne	r3, #0
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	461a      	mov	r2, r3
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d0b6      	beq.n	8002bbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b084      	sub	sp, #16
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	60f8      	str	r0, [r7, #12]
 8002c62:	60b9      	str	r1, [r7, #8]
 8002c64:	607a      	str	r2, [r7, #4]
 8002c66:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c68:	e051      	b.n	8002d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c78:	d123      	bne.n	8002cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c88:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c92:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	f043 0204 	orr.w	r2, r3, #4
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e046      	b.n	8002d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc8:	d021      	beq.n	8002d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cca:	f7ff f8cf 	bl	8001e6c <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d302      	bcc.n	8002ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d116      	bne.n	8002d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2220      	movs	r2, #32
 8002cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	f043 0220 	orr.w	r2, r3, #32
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e020      	b.n	8002d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	0c1b      	lsrs	r3, r3, #16
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d10c      	bne.n	8002d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	43da      	mvns	r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	4013      	ands	r3, r2
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	bf14      	ite	ne
 8002d2a:	2301      	movne	r3, #1
 8002d2c:	2300      	moveq	r3, #0
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	e00b      	b.n	8002d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	43da      	mvns	r2, r3
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	bf14      	ite	ne
 8002d44:	2301      	movne	r3, #1
 8002d46:	2300      	moveq	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d18d      	bne.n	8002c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d64:	e02d      	b.n	8002dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 f878 	bl	8002e5c <I2C_IsAcknowledgeFailed>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e02d      	b.n	8002dd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7c:	d021      	beq.n	8002dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d7e:	f7ff f875 	bl	8001e6c <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d302      	bcc.n	8002d94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d116      	bne.n	8002dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f043 0220 	orr.w	r2, r3, #32
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e007      	b.n	8002dd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dcc:	2b80      	cmp	r3, #128	; 0x80
 8002dce:	d1ca      	bne.n	8002d66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b084      	sub	sp, #16
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002de6:	e02d      	b.n	8002e44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 f837 	bl	8002e5c <I2C_IsAcknowledgeFailed>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e02d      	b.n	8002e54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfe:	d021      	beq.n	8002e44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e00:	f7ff f834 	bl	8001e6c <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d302      	bcc.n	8002e16 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d116      	bne.n	8002e44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	f043 0220 	orr.w	r2, r3, #32
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e007      	b.n	8002e54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d1ca      	bne.n	8002de8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e72:	d11b      	bne.n	8002eac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	f043 0204 	orr.w	r2, r3, #4
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e000      	b.n	8002eae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bc80      	pop	{r7}
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e272      	b.n	80033b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 8087 	beq.w	8002fe6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ed8:	4b92      	ldr	r3, [pc, #584]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 030c 	and.w	r3, r3, #12
 8002ee0:	2b04      	cmp	r3, #4
 8002ee2:	d00c      	beq.n	8002efe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ee4:	4b8f      	ldr	r3, [pc, #572]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f003 030c 	and.w	r3, r3, #12
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d112      	bne.n	8002f16 <HAL_RCC_OscConfig+0x5e>
 8002ef0:	4b8c      	ldr	r3, [pc, #560]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002efc:	d10b      	bne.n	8002f16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002efe:	4b89      	ldr	r3, [pc, #548]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d06c      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x12c>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d168      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e24c      	b.n	80033b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f1e:	d106      	bne.n	8002f2e <HAL_RCC_OscConfig+0x76>
 8002f20:	4b80      	ldr	r3, [pc, #512]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a7f      	ldr	r2, [pc, #508]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	e02e      	b.n	8002f8c <HAL_RCC_OscConfig+0xd4>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10c      	bne.n	8002f50 <HAL_RCC_OscConfig+0x98>
 8002f36:	4b7b      	ldr	r3, [pc, #492]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a7a      	ldr	r2, [pc, #488]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	4b78      	ldr	r3, [pc, #480]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a77      	ldr	r2, [pc, #476]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002f48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	e01d      	b.n	8002f8c <HAL_RCC_OscConfig+0xd4>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f58:	d10c      	bne.n	8002f74 <HAL_RCC_OscConfig+0xbc>
 8002f5a:	4b72      	ldr	r3, [pc, #456]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a71      	ldr	r2, [pc, #452]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	4b6f      	ldr	r3, [pc, #444]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a6e      	ldr	r2, [pc, #440]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	e00b      	b.n	8002f8c <HAL_RCC_OscConfig+0xd4>
 8002f74:	4b6b      	ldr	r3, [pc, #428]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a6a      	ldr	r2, [pc, #424]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f7e:	6013      	str	r3, [r2, #0]
 8002f80:	4b68      	ldr	r3, [pc, #416]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a67      	ldr	r2, [pc, #412]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d013      	beq.n	8002fbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f94:	f7fe ff6a 	bl	8001e6c <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f9c:	f7fe ff66 	bl	8001e6c <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b64      	cmp	r3, #100	; 0x64
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e200      	b.n	80033b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fae:	4b5d      	ldr	r3, [pc, #372]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0f0      	beq.n	8002f9c <HAL_RCC_OscConfig+0xe4>
 8002fba:	e014      	b.n	8002fe6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbc:	f7fe ff56 	bl	8001e6c <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fc4:	f7fe ff52 	bl	8001e6c <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b64      	cmp	r3, #100	; 0x64
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e1ec      	b.n	80033b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fd6:	4b53      	ldr	r3, [pc, #332]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f0      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x10c>
 8002fe2:	e000      	b.n	8002fe6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d063      	beq.n	80030ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ff2:	4b4c      	ldr	r3, [pc, #304]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00b      	beq.n	8003016 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ffe:	4b49      	ldr	r3, [pc, #292]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f003 030c 	and.w	r3, r3, #12
 8003006:	2b08      	cmp	r3, #8
 8003008:	d11c      	bne.n	8003044 <HAL_RCC_OscConfig+0x18c>
 800300a:	4b46      	ldr	r3, [pc, #280]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d116      	bne.n	8003044 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003016:	4b43      	ldr	r3, [pc, #268]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d005      	beq.n	800302e <HAL_RCC_OscConfig+0x176>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d001      	beq.n	800302e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e1c0      	b.n	80033b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800302e:	4b3d      	ldr	r3, [pc, #244]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	4939      	ldr	r1, [pc, #228]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 800303e:	4313      	orrs	r3, r2
 8003040:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003042:	e03a      	b.n	80030ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d020      	beq.n	800308e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800304c:	4b36      	ldr	r3, [pc, #216]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 800304e:	2201      	movs	r2, #1
 8003050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003052:	f7fe ff0b 	bl	8001e6c <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800305a:	f7fe ff07 	bl	8001e6c <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e1a1      	b.n	80033b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306c:	4b2d      	ldr	r3, [pc, #180]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0f0      	beq.n	800305a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003078:	4b2a      	ldr	r3, [pc, #168]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	4927      	ldr	r1, [pc, #156]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8003088:	4313      	orrs	r3, r2
 800308a:	600b      	str	r3, [r1, #0]
 800308c:	e015      	b.n	80030ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800308e:	4b26      	ldr	r3, [pc, #152]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003094:	f7fe feea 	bl	8001e6c <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800309c:	f7fe fee6 	bl	8001e6c <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e180      	b.n	80033b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ae:	4b1d      	ldr	r3, [pc, #116]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f0      	bne.n	800309c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d03a      	beq.n	800313c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d019      	beq.n	8003102 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ce:	4b17      	ldr	r3, [pc, #92]	; (800312c <HAL_RCC_OscConfig+0x274>)
 80030d0:	2201      	movs	r2, #1
 80030d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d4:	f7fe feca 	bl	8001e6c <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030dc:	f7fe fec6 	bl	8001e6c <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e160      	b.n	80033b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ee:	4b0d      	ldr	r3, [pc, #52]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0f0      	beq.n	80030dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030fa:	2001      	movs	r0, #1
 80030fc:	f000 fac4 	bl	8003688 <RCC_Delay>
 8003100:	e01c      	b.n	800313c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003102:	4b0a      	ldr	r3, [pc, #40]	; (800312c <HAL_RCC_OscConfig+0x274>)
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003108:	f7fe feb0 	bl	8001e6c <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800310e:	e00f      	b.n	8003130 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003110:	f7fe feac 	bl	8001e6c <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d908      	bls.n	8003130 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e146      	b.n	80033b0 <HAL_RCC_OscConfig+0x4f8>
 8003122:	bf00      	nop
 8003124:	40021000 	.word	0x40021000
 8003128:	42420000 	.word	0x42420000
 800312c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003130:	4b92      	ldr	r3, [pc, #584]	; (800337c <HAL_RCC_OscConfig+0x4c4>)
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1e9      	bne.n	8003110 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 80a6 	beq.w	8003296 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800314a:	2300      	movs	r3, #0
 800314c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800314e:	4b8b      	ldr	r3, [pc, #556]	; (800337c <HAL_RCC_OscConfig+0x4c4>)
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10d      	bne.n	8003176 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800315a:	4b88      	ldr	r3, [pc, #544]	; (800337c <HAL_RCC_OscConfig+0x4c4>)
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	4a87      	ldr	r2, [pc, #540]	; (800337c <HAL_RCC_OscConfig+0x4c4>)
 8003160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003164:	61d3      	str	r3, [r2, #28]
 8003166:	4b85      	ldr	r3, [pc, #532]	; (800337c <HAL_RCC_OscConfig+0x4c4>)
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316e:	60bb      	str	r3, [r7, #8]
 8003170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003172:	2301      	movs	r3, #1
 8003174:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003176:	4b82      	ldr	r3, [pc, #520]	; (8003380 <HAL_RCC_OscConfig+0x4c8>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317e:	2b00      	cmp	r3, #0
 8003180:	d118      	bne.n	80031b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003182:	4b7f      	ldr	r3, [pc, #508]	; (8003380 <HAL_RCC_OscConfig+0x4c8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a7e      	ldr	r2, [pc, #504]	; (8003380 <HAL_RCC_OscConfig+0x4c8>)
 8003188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800318c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800318e:	f7fe fe6d 	bl	8001e6c <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003196:	f7fe fe69 	bl	8001e6c <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b64      	cmp	r3, #100	; 0x64
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e103      	b.n	80033b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a8:	4b75      	ldr	r3, [pc, #468]	; (8003380 <HAL_RCC_OscConfig+0x4c8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0f0      	beq.n	8003196 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d106      	bne.n	80031ca <HAL_RCC_OscConfig+0x312>
 80031bc:	4b6f      	ldr	r3, [pc, #444]	; (800337c <HAL_RCC_OscConfig+0x4c4>)
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	4a6e      	ldr	r2, [pc, #440]	; (800337c <HAL_RCC_OscConfig+0x4c4>)
 80031c2:	f043 0301 	orr.w	r3, r3, #1
 80031c6:	6213      	str	r3, [r2, #32]
 80031c8:	e02d      	b.n	8003226 <HAL_RCC_OscConfig+0x36e>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10c      	bne.n	80031ec <HAL_RCC_OscConfig+0x334>
 80031d2:	4b6a      	ldr	r3, [pc, #424]	; (800337c <HAL_RCC_OscConfig+0x4c4>)
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	4a69      	ldr	r2, [pc, #420]	; (800337c <HAL_RCC_OscConfig+0x4c4>)
 80031d8:	f023 0301 	bic.w	r3, r3, #1
 80031dc:	6213      	str	r3, [r2, #32]
 80031de:	4b67      	ldr	r3, [pc, #412]	; (800337c <HAL_RCC_OscConfig+0x4c4>)
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	4a66      	ldr	r2, [pc, #408]	; (800337c <HAL_RCC_OscConfig+0x4c4>)
 80031e4:	f023 0304 	bic.w	r3, r3, #4
 80031e8:	6213      	str	r3, [r2, #32]
 80031ea:	e01c      	b.n	8003226 <HAL_RCC_OscConfig+0x36e>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	2b05      	cmp	r3, #5
 80031f2:	d10c      	bne.n	800320e <HAL_RCC_OscConfig+0x356>
 80031f4:	4b61      	ldr	r3, [pc, #388]	; (800337c <HAL_RCC_OscConfig+0x4c4>)
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	4a60      	ldr	r2, [pc, #384]	; (800337c <HAL_RCC_OscConfig+0x4c4>)
 80031fa:	f043 0304 	orr.w	r3, r3, #4
 80031fe:	6213      	str	r3, [r2, #32]
 8003200:	4b5e      	ldr	r3, [pc, #376]	; (800337c <HAL_RCC_OscConfig+0x4c4>)
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	4a5d      	ldr	r2, [pc, #372]	; (800337c <HAL_RCC_OscConfig+0x4c4>)
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	6213      	str	r3, [r2, #32]
 800320c:	e00b      	b.n	8003226 <HAL_RCC_OscConfig+0x36e>
 800320e:	4b5b      	ldr	r3, [pc, #364]	; (800337c <HAL_RCC_OscConfig+0x4c4>)
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	4a5a      	ldr	r2, [pc, #360]	; (800337c <HAL_RCC_OscConfig+0x4c4>)
 8003214:	f023 0301 	bic.w	r3, r3, #1
 8003218:	6213      	str	r3, [r2, #32]
 800321a:	4b58      	ldr	r3, [pc, #352]	; (800337c <HAL_RCC_OscConfig+0x4c4>)
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	4a57      	ldr	r2, [pc, #348]	; (800337c <HAL_RCC_OscConfig+0x4c4>)
 8003220:	f023 0304 	bic.w	r3, r3, #4
 8003224:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d015      	beq.n	800325a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800322e:	f7fe fe1d 	bl	8001e6c <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003234:	e00a      	b.n	800324c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003236:	f7fe fe19 	bl	8001e6c <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	f241 3288 	movw	r2, #5000	; 0x1388
 8003244:	4293      	cmp	r3, r2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e0b1      	b.n	80033b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800324c:	4b4b      	ldr	r3, [pc, #300]	; (800337c <HAL_RCC_OscConfig+0x4c4>)
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0ee      	beq.n	8003236 <HAL_RCC_OscConfig+0x37e>
 8003258:	e014      	b.n	8003284 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800325a:	f7fe fe07 	bl	8001e6c <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003260:	e00a      	b.n	8003278 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003262:	f7fe fe03 	bl	8001e6c <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003270:	4293      	cmp	r3, r2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e09b      	b.n	80033b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003278:	4b40      	ldr	r3, [pc, #256]	; (800337c <HAL_RCC_OscConfig+0x4c4>)
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1ee      	bne.n	8003262 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003284:	7dfb      	ldrb	r3, [r7, #23]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d105      	bne.n	8003296 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800328a:	4b3c      	ldr	r3, [pc, #240]	; (800337c <HAL_RCC_OscConfig+0x4c4>)
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	4a3b      	ldr	r2, [pc, #236]	; (800337c <HAL_RCC_OscConfig+0x4c4>)
 8003290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003294:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 8087 	beq.w	80033ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032a0:	4b36      	ldr	r3, [pc, #216]	; (800337c <HAL_RCC_OscConfig+0x4c4>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 030c 	and.w	r3, r3, #12
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d061      	beq.n	8003370 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d146      	bne.n	8003342 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b4:	4b33      	ldr	r3, [pc, #204]	; (8003384 <HAL_RCC_OscConfig+0x4cc>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ba:	f7fe fdd7 	bl	8001e6c <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c2:	f7fe fdd3 	bl	8001e6c <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e06d      	b.n	80033b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032d4:	4b29      	ldr	r3, [pc, #164]	; (800337c <HAL_RCC_OscConfig+0x4c4>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1f0      	bne.n	80032c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e8:	d108      	bne.n	80032fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032ea:	4b24      	ldr	r3, [pc, #144]	; (800337c <HAL_RCC_OscConfig+0x4c4>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	4921      	ldr	r1, [pc, #132]	; (800337c <HAL_RCC_OscConfig+0x4c4>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032fc:	4b1f      	ldr	r3, [pc, #124]	; (800337c <HAL_RCC_OscConfig+0x4c4>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a19      	ldr	r1, [r3, #32]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	430b      	orrs	r3, r1
 800330e:	491b      	ldr	r1, [pc, #108]	; (800337c <HAL_RCC_OscConfig+0x4c4>)
 8003310:	4313      	orrs	r3, r2
 8003312:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003314:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <HAL_RCC_OscConfig+0x4cc>)
 8003316:	2201      	movs	r2, #1
 8003318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331a:	f7fe fda7 	bl	8001e6c <HAL_GetTick>
 800331e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003320:	e008      	b.n	8003334 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003322:	f7fe fda3 	bl	8001e6c <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e03d      	b.n	80033b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003334:	4b11      	ldr	r3, [pc, #68]	; (800337c <HAL_RCC_OscConfig+0x4c4>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0f0      	beq.n	8003322 <HAL_RCC_OscConfig+0x46a>
 8003340:	e035      	b.n	80033ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003342:	4b10      	ldr	r3, [pc, #64]	; (8003384 <HAL_RCC_OscConfig+0x4cc>)
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003348:	f7fe fd90 	bl	8001e6c <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003350:	f7fe fd8c 	bl	8001e6c <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e026      	b.n	80033b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003362:	4b06      	ldr	r3, [pc, #24]	; (800337c <HAL_RCC_OscConfig+0x4c4>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f0      	bne.n	8003350 <HAL_RCC_OscConfig+0x498>
 800336e:	e01e      	b.n	80033ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d107      	bne.n	8003388 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e019      	b.n	80033b0 <HAL_RCC_OscConfig+0x4f8>
 800337c:	40021000 	.word	0x40021000
 8003380:	40007000 	.word	0x40007000
 8003384:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003388:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <HAL_RCC_OscConfig+0x500>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	429a      	cmp	r2, r3
 800339a:	d106      	bne.n	80033aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d001      	beq.n	80033ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e000      	b.n	80033b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3718      	adds	r7, #24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40021000 	.word	0x40021000

080033bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0d0      	b.n	8003572 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033d0:	4b6a      	ldr	r3, [pc, #424]	; (800357c <HAL_RCC_ClockConfig+0x1c0>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d910      	bls.n	8003400 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033de:	4b67      	ldr	r3, [pc, #412]	; (800357c <HAL_RCC_ClockConfig+0x1c0>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f023 0207 	bic.w	r2, r3, #7
 80033e6:	4965      	ldr	r1, [pc, #404]	; (800357c <HAL_RCC_ClockConfig+0x1c0>)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ee:	4b63      	ldr	r3, [pc, #396]	; (800357c <HAL_RCC_ClockConfig+0x1c0>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d001      	beq.n	8003400 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e0b8      	b.n	8003572 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d020      	beq.n	800344e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	2b00      	cmp	r3, #0
 8003416:	d005      	beq.n	8003424 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003418:	4b59      	ldr	r3, [pc, #356]	; (8003580 <HAL_RCC_ClockConfig+0x1c4>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	4a58      	ldr	r2, [pc, #352]	; (8003580 <HAL_RCC_ClockConfig+0x1c4>)
 800341e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003422:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0308 	and.w	r3, r3, #8
 800342c:	2b00      	cmp	r3, #0
 800342e:	d005      	beq.n	800343c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003430:	4b53      	ldr	r3, [pc, #332]	; (8003580 <HAL_RCC_ClockConfig+0x1c4>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	4a52      	ldr	r2, [pc, #328]	; (8003580 <HAL_RCC_ClockConfig+0x1c4>)
 8003436:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800343a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800343c:	4b50      	ldr	r3, [pc, #320]	; (8003580 <HAL_RCC_ClockConfig+0x1c4>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	494d      	ldr	r1, [pc, #308]	; (8003580 <HAL_RCC_ClockConfig+0x1c4>)
 800344a:	4313      	orrs	r3, r2
 800344c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d040      	beq.n	80034dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d107      	bne.n	8003472 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003462:	4b47      	ldr	r3, [pc, #284]	; (8003580 <HAL_RCC_ClockConfig+0x1c4>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d115      	bne.n	800349a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e07f      	b.n	8003572 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2b02      	cmp	r3, #2
 8003478:	d107      	bne.n	800348a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800347a:	4b41      	ldr	r3, [pc, #260]	; (8003580 <HAL_RCC_ClockConfig+0x1c4>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d109      	bne.n	800349a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e073      	b.n	8003572 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800348a:	4b3d      	ldr	r3, [pc, #244]	; (8003580 <HAL_RCC_ClockConfig+0x1c4>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e06b      	b.n	8003572 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800349a:	4b39      	ldr	r3, [pc, #228]	; (8003580 <HAL_RCC_ClockConfig+0x1c4>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f023 0203 	bic.w	r2, r3, #3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	4936      	ldr	r1, [pc, #216]	; (8003580 <HAL_RCC_ClockConfig+0x1c4>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034ac:	f7fe fcde 	bl	8001e6c <HAL_GetTick>
 80034b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b2:	e00a      	b.n	80034ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b4:	f7fe fcda 	bl	8001e6c <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e053      	b.n	8003572 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ca:	4b2d      	ldr	r3, [pc, #180]	; (8003580 <HAL_RCC_ClockConfig+0x1c4>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f003 020c 	and.w	r2, r3, #12
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	429a      	cmp	r2, r3
 80034da:	d1eb      	bne.n	80034b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034dc:	4b27      	ldr	r3, [pc, #156]	; (800357c <HAL_RCC_ClockConfig+0x1c0>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d210      	bcs.n	800350c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ea:	4b24      	ldr	r3, [pc, #144]	; (800357c <HAL_RCC_ClockConfig+0x1c0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f023 0207 	bic.w	r2, r3, #7
 80034f2:	4922      	ldr	r1, [pc, #136]	; (800357c <HAL_RCC_ClockConfig+0x1c0>)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fa:	4b20      	ldr	r3, [pc, #128]	; (800357c <HAL_RCC_ClockConfig+0x1c0>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	429a      	cmp	r2, r3
 8003506:	d001      	beq.n	800350c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e032      	b.n	8003572 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	d008      	beq.n	800352a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003518:	4b19      	ldr	r3, [pc, #100]	; (8003580 <HAL_RCC_ClockConfig+0x1c4>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	4916      	ldr	r1, [pc, #88]	; (8003580 <HAL_RCC_ClockConfig+0x1c4>)
 8003526:	4313      	orrs	r3, r2
 8003528:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b00      	cmp	r3, #0
 8003534:	d009      	beq.n	800354a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003536:	4b12      	ldr	r3, [pc, #72]	; (8003580 <HAL_RCC_ClockConfig+0x1c4>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	490e      	ldr	r1, [pc, #56]	; (8003580 <HAL_RCC_ClockConfig+0x1c4>)
 8003546:	4313      	orrs	r3, r2
 8003548:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800354a:	f000 f821 	bl	8003590 <HAL_RCC_GetSysClockFreq>
 800354e:	4602      	mov	r2, r0
 8003550:	4b0b      	ldr	r3, [pc, #44]	; (8003580 <HAL_RCC_ClockConfig+0x1c4>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	091b      	lsrs	r3, r3, #4
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	490a      	ldr	r1, [pc, #40]	; (8003584 <HAL_RCC_ClockConfig+0x1c8>)
 800355c:	5ccb      	ldrb	r3, [r1, r3]
 800355e:	fa22 f303 	lsr.w	r3, r2, r3
 8003562:	4a09      	ldr	r2, [pc, #36]	; (8003588 <HAL_RCC_ClockConfig+0x1cc>)
 8003564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003566:	4b09      	ldr	r3, [pc, #36]	; (800358c <HAL_RCC_ClockConfig+0x1d0>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f7fe fc3c 	bl	8001de8 <HAL_InitTick>

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40022000 	.word	0x40022000
 8003580:	40021000 	.word	0x40021000
 8003584:	080066bc 	.word	0x080066bc
 8003588:	20000008 	.word	0x20000008
 800358c:	2000000c 	.word	0x2000000c

08003590 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003590:	b490      	push	{r4, r7}
 8003592:	b08a      	sub	sp, #40	; 0x28
 8003594:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003596:	4b29      	ldr	r3, [pc, #164]	; (800363c <HAL_RCC_GetSysClockFreq+0xac>)
 8003598:	1d3c      	adds	r4, r7, #4
 800359a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800359c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80035a0:	f240 2301 	movw	r3, #513	; 0x201
 80035a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61fb      	str	r3, [r7, #28]
 80035aa:	2300      	movs	r3, #0
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	2300      	movs	r3, #0
 80035b0:	627b      	str	r3, [r7, #36]	; 0x24
 80035b2:	2300      	movs	r3, #0
 80035b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035ba:	4b21      	ldr	r3, [pc, #132]	; (8003640 <HAL_RCC_GetSysClockFreq+0xb0>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f003 030c 	and.w	r3, r3, #12
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d002      	beq.n	80035d0 <HAL_RCC_GetSysClockFreq+0x40>
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d003      	beq.n	80035d6 <HAL_RCC_GetSysClockFreq+0x46>
 80035ce:	e02b      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035d0:	4b1c      	ldr	r3, [pc, #112]	; (8003644 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035d2:	623b      	str	r3, [r7, #32]
      break;
 80035d4:	e02b      	b.n	800362e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	0c9b      	lsrs	r3, r3, #18
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	3328      	adds	r3, #40	; 0x28
 80035e0:	443b      	add	r3, r7
 80035e2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80035e6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d012      	beq.n	8003618 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035f2:	4b13      	ldr	r3, [pc, #76]	; (8003640 <HAL_RCC_GetSysClockFreq+0xb0>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	0c5b      	lsrs	r3, r3, #17
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	3328      	adds	r3, #40	; 0x28
 80035fe:	443b      	add	r3, r7
 8003600:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003604:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	4a0e      	ldr	r2, [pc, #56]	; (8003644 <HAL_RCC_GetSysClockFreq+0xb4>)
 800360a:	fb03 f202 	mul.w	r2, r3, r2
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	fbb2 f3f3 	udiv	r3, r2, r3
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
 8003616:	e004      	b.n	8003622 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	4a0b      	ldr	r2, [pc, #44]	; (8003648 <HAL_RCC_GetSysClockFreq+0xb8>)
 800361c:	fb02 f303 	mul.w	r3, r2, r3
 8003620:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	623b      	str	r3, [r7, #32]
      break;
 8003626:	e002      	b.n	800362e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003628:	4b06      	ldr	r3, [pc, #24]	; (8003644 <HAL_RCC_GetSysClockFreq+0xb4>)
 800362a:	623b      	str	r3, [r7, #32]
      break;
 800362c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800362e:	6a3b      	ldr	r3, [r7, #32]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3728      	adds	r7, #40	; 0x28
 8003634:	46bd      	mov	sp, r7
 8003636:	bc90      	pop	{r4, r7}
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	08005950 	.word	0x08005950
 8003640:	40021000 	.word	0x40021000
 8003644:	007a1200 	.word	0x007a1200
 8003648:	003d0900 	.word	0x003d0900

0800364c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003650:	4b02      	ldr	r3, [pc, #8]	; (800365c <HAL_RCC_GetHCLKFreq+0x10>)
 8003652:	681b      	ldr	r3, [r3, #0]
}
 8003654:	4618      	mov	r0, r3
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr
 800365c:	20000008 	.word	0x20000008

08003660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003664:	f7ff fff2 	bl	800364c <HAL_RCC_GetHCLKFreq>
 8003668:	4602      	mov	r2, r0
 800366a:	4b05      	ldr	r3, [pc, #20]	; (8003680 <HAL_RCC_GetPCLK1Freq+0x20>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	0a1b      	lsrs	r3, r3, #8
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	4903      	ldr	r1, [pc, #12]	; (8003684 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003676:	5ccb      	ldrb	r3, [r1, r3]
 8003678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800367c:	4618      	mov	r0, r3
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40021000 	.word	0x40021000
 8003684:	080066cc 	.word	0x080066cc

08003688 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003690:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <RCC_Delay+0x34>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a0a      	ldr	r2, [pc, #40]	; (80036c0 <RCC_Delay+0x38>)
 8003696:	fba2 2303 	umull	r2, r3, r2, r3
 800369a:	0a5b      	lsrs	r3, r3, #9
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	fb02 f303 	mul.w	r3, r2, r3
 80036a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036a4:	bf00      	nop
  }
  while (Delay --);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	1e5a      	subs	r2, r3, #1
 80036aa:	60fa      	str	r2, [r7, #12]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1f9      	bne.n	80036a4 <RCC_Delay+0x1c>
}
 80036b0:	bf00      	nop
 80036b2:	bf00      	nop
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr
 80036bc:	20000008 	.word	0x20000008
 80036c0:	10624dd3 	.word	0x10624dd3

080036c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e076      	b.n	80037c4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d108      	bne.n	80036f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036e6:	d009      	beq.n	80036fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	61da      	str	r2, [r3, #28]
 80036ee:	e005      	b.n	80036fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d106      	bne.n	800371c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7fe fa7c 	bl	8001c14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003732:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003744:	431a      	orrs	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800376c:	431a      	orrs	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003780:	ea42 0103 	orr.w	r1, r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003788:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	0c1a      	lsrs	r2, r3, #16
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f002 0204 	and.w	r2, r2, #4
 80037a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	69da      	ldr	r2, [r3, #28]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b088      	sub	sp, #32
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	603b      	str	r3, [r7, #0]
 80037d8:	4613      	mov	r3, r2
 80037da:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037dc:	2300      	movs	r3, #0
 80037de:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d101      	bne.n	80037ee <HAL_SPI_Transmit+0x22>
 80037ea:	2302      	movs	r3, #2
 80037ec:	e126      	b.n	8003a3c <HAL_SPI_Transmit+0x270>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037f6:	f7fe fb39 	bl	8001e6c <HAL_GetTick>
 80037fa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80037fc:	88fb      	ldrh	r3, [r7, #6]
 80037fe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b01      	cmp	r3, #1
 800380a:	d002      	beq.n	8003812 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800380c:	2302      	movs	r3, #2
 800380e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003810:	e10b      	b.n	8003a2a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d002      	beq.n	800381e <HAL_SPI_Transmit+0x52>
 8003818:	88fb      	ldrh	r3, [r7, #6]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d102      	bne.n	8003824 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003822:	e102      	b.n	8003a2a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2203      	movs	r2, #3
 8003828:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	88fa      	ldrh	r2, [r7, #6]
 800383c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	88fa      	ldrh	r2, [r7, #6]
 8003842:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800386a:	d10f      	bne.n	800388c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800387a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800388a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003896:	2b40      	cmp	r3, #64	; 0x40
 8003898:	d007      	beq.n	80038aa <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038b2:	d14b      	bne.n	800394c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <HAL_SPI_Transmit+0xf6>
 80038bc:	8afb      	ldrh	r3, [r7, #22]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d13e      	bne.n	8003940 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c6:	881a      	ldrh	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	1c9a      	adds	r2, r3, #2
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038dc:	b29b      	uxth	r3, r3
 80038de:	3b01      	subs	r3, #1
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038e6:	e02b      	b.n	8003940 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d112      	bne.n	800391c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	881a      	ldrh	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	1c9a      	adds	r2, r3, #2
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003910:	b29b      	uxth	r3, r3
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	86da      	strh	r2, [r3, #54]	; 0x36
 800391a:	e011      	b.n	8003940 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800391c:	f7fe faa6 	bl	8001e6c <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	429a      	cmp	r2, r3
 800392a:	d803      	bhi.n	8003934 <HAL_SPI_Transmit+0x168>
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003932:	d102      	bne.n	800393a <HAL_SPI_Transmit+0x16e>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d102      	bne.n	8003940 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800393e:	e074      	b.n	8003a2a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003944:	b29b      	uxth	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1ce      	bne.n	80038e8 <HAL_SPI_Transmit+0x11c>
 800394a:	e04c      	b.n	80039e6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <HAL_SPI_Transmit+0x18e>
 8003954:	8afb      	ldrh	r3, [r7, #22]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d140      	bne.n	80039dc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	330c      	adds	r3, #12
 8003964:	7812      	ldrb	r2, [r2, #0]
 8003966:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396c:	1c5a      	adds	r2, r3, #1
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003976:	b29b      	uxth	r3, r3
 8003978:	3b01      	subs	r3, #1
 800397a:	b29a      	uxth	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003980:	e02c      	b.n	80039dc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b02      	cmp	r3, #2
 800398e:	d113      	bne.n	80039b8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	330c      	adds	r3, #12
 800399a:	7812      	ldrb	r2, [r2, #0]
 800399c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	1c5a      	adds	r2, r3, #1
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	3b01      	subs	r3, #1
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	86da      	strh	r2, [r3, #54]	; 0x36
 80039b6:	e011      	b.n	80039dc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039b8:	f7fe fa58 	bl	8001e6c <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d803      	bhi.n	80039d0 <HAL_SPI_Transmit+0x204>
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ce:	d102      	bne.n	80039d6 <HAL_SPI_Transmit+0x20a>
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d102      	bne.n	80039dc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039da:	e026      	b.n	8003a2a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1cd      	bne.n	8003982 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	6839      	ldr	r1, [r7, #0]
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 fbb8 	bl	8004160 <SPI_EndRxTxTransaction>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d002      	beq.n	80039fc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2220      	movs	r2, #32
 80039fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10a      	bne.n	8003a1a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a04:	2300      	movs	r3, #0
 8003a06:	613b      	str	r3, [r7, #16]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	613b      	str	r3, [r7, #16]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	613b      	str	r3, [r7, #16]
 8003a18:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	77fb      	strb	r3, [r7, #31]
 8003a26:	e000      	b.n	8003a2a <HAL_SPI_Transmit+0x25e>
  }

error:
 8003a28:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3720      	adds	r7, #32
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af02      	add	r7, sp, #8
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	603b      	str	r3, [r7, #0]
 8003a50:	4613      	mov	r3, r2
 8003a52:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a60:	d112      	bne.n	8003a88 <HAL_SPI_Receive+0x44>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10e      	bne.n	8003a88 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2204      	movs	r2, #4
 8003a6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003a72:	88fa      	ldrh	r2, [r7, #6]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	68b9      	ldr	r1, [r7, #8]
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 f8f1 	bl	8003c66 <HAL_SPI_TransmitReceive>
 8003a84:	4603      	mov	r3, r0
 8003a86:	e0ea      	b.n	8003c5e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d101      	bne.n	8003a96 <HAL_SPI_Receive+0x52>
 8003a92:	2302      	movs	r3, #2
 8003a94:	e0e3      	b.n	8003c5e <HAL_SPI_Receive+0x21a>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a9e:	f7fe f9e5 	bl	8001e6c <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d002      	beq.n	8003ab6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ab4:	e0ca      	b.n	8003c4c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d002      	beq.n	8003ac2 <HAL_SPI_Receive+0x7e>
 8003abc:	88fb      	ldrh	r3, [r7, #6]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d102      	bne.n	8003ac8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ac6:	e0c1      	b.n	8003c4c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2204      	movs	r2, #4
 8003acc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	88fa      	ldrh	r2, [r7, #6]
 8003ae0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	88fa      	ldrh	r2, [r7, #6]
 8003ae6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b0e:	d10f      	bne.n	8003b30 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b1e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b2e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3a:	2b40      	cmp	r3, #64	; 0x40
 8003b3c:	d007      	beq.n	8003b4e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b4c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d162      	bne.n	8003c1c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003b56:	e02e      	b.n	8003bb6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d115      	bne.n	8003b92 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f103 020c 	add.w	r2, r3, #12
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b72:	7812      	ldrb	r2, [r2, #0]
 8003b74:	b2d2      	uxtb	r2, r2
 8003b76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7c:	1c5a      	adds	r2, r3, #1
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b90:	e011      	b.n	8003bb6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b92:	f7fe f96b 	bl	8001e6c <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d803      	bhi.n	8003baa <HAL_SPI_Receive+0x166>
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba8:	d102      	bne.n	8003bb0 <HAL_SPI_Receive+0x16c>
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d102      	bne.n	8003bb6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003bb4:	e04a      	b.n	8003c4c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1cb      	bne.n	8003b58 <HAL_SPI_Receive+0x114>
 8003bc0:	e031      	b.n	8003c26 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d113      	bne.n	8003bf8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bda:	b292      	uxth	r2, r2
 8003bdc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be2:	1c9a      	adds	r2, r3, #2
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003bf6:	e011      	b.n	8003c1c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bf8:	f7fe f938 	bl	8001e6c <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d803      	bhi.n	8003c10 <HAL_SPI_Receive+0x1cc>
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0e:	d102      	bne.n	8003c16 <HAL_SPI_Receive+0x1d2>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d102      	bne.n	8003c1c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003c1a:	e017      	b.n	8003c4c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1cd      	bne.n	8003bc2 <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	6839      	ldr	r1, [r7, #0]
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 fa46 	bl	80040bc <SPI_EndRxTransaction>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d002      	beq.n	8003c3c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d002      	beq.n	8003c4a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	75fb      	strb	r3, [r7, #23]
 8003c48:	e000      	b.n	8003c4c <HAL_SPI_Receive+0x208>
  }

error :
 8003c4a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3718      	adds	r7, #24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b08c      	sub	sp, #48	; 0x30
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	60f8      	str	r0, [r7, #12]
 8003c6e:	60b9      	str	r1, [r7, #8]
 8003c70:	607a      	str	r2, [r7, #4]
 8003c72:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c74:	2301      	movs	r3, #1
 8003c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d101      	bne.n	8003c8c <HAL_SPI_TransmitReceive+0x26>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	e18a      	b.n	8003fa2 <HAL_SPI_TransmitReceive+0x33c>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c94:	f7fe f8ea 	bl	8001e6c <HAL_GetTick>
 8003c98:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ca0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003caa:	887b      	ldrh	r3, [r7, #2]
 8003cac:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003cae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d00f      	beq.n	8003cd6 <HAL_SPI_TransmitReceive+0x70>
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cbc:	d107      	bne.n	8003cce <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d103      	bne.n	8003cce <HAL_SPI_TransmitReceive+0x68>
 8003cc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d003      	beq.n	8003cd6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003cce:	2302      	movs	r3, #2
 8003cd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003cd4:	e15b      	b.n	8003f8e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <HAL_SPI_TransmitReceive+0x82>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d002      	beq.n	8003ce8 <HAL_SPI_TransmitReceive+0x82>
 8003ce2:	887b      	ldrh	r3, [r7, #2]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d103      	bne.n	8003cf0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003cee:	e14e      	b.n	8003f8e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b04      	cmp	r3, #4
 8003cfa:	d003      	beq.n	8003d04 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2205      	movs	r2, #5
 8003d00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	887a      	ldrh	r2, [r7, #2]
 8003d14:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	887a      	ldrh	r2, [r7, #2]
 8003d1a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	887a      	ldrh	r2, [r7, #2]
 8003d26:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	887a      	ldrh	r2, [r7, #2]
 8003d2c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d44:	2b40      	cmp	r3, #64	; 0x40
 8003d46:	d007      	beq.n	8003d58 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d60:	d178      	bne.n	8003e54 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <HAL_SPI_TransmitReceive+0x10a>
 8003d6a:	8b7b      	ldrh	r3, [r7, #26]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d166      	bne.n	8003e3e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d74:	881a      	ldrh	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d80:	1c9a      	adds	r2, r3, #2
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d94:	e053      	b.n	8003e3e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d11b      	bne.n	8003ddc <HAL_SPI_TransmitReceive+0x176>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d016      	beq.n	8003ddc <HAL_SPI_TransmitReceive+0x176>
 8003dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d113      	bne.n	8003ddc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db8:	881a      	ldrh	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc4:	1c9a      	adds	r2, r3, #2
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d119      	bne.n	8003e1e <HAL_SPI_TransmitReceive+0x1b8>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d014      	beq.n	8003e1e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68da      	ldr	r2, [r3, #12]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfe:	b292      	uxth	r2, r2
 8003e00:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e06:	1c9a      	adds	r2, r3, #2
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	3b01      	subs	r3, #1
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e1e:	f7fe f825 	bl	8001e6c <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d807      	bhi.n	8003e3e <HAL_SPI_TransmitReceive+0x1d8>
 8003e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e34:	d003      	beq.n	8003e3e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e3c:	e0a7      	b.n	8003f8e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1a6      	bne.n	8003d96 <HAL_SPI_TransmitReceive+0x130>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1a1      	bne.n	8003d96 <HAL_SPI_TransmitReceive+0x130>
 8003e52:	e07c      	b.n	8003f4e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d002      	beq.n	8003e62 <HAL_SPI_TransmitReceive+0x1fc>
 8003e5c:	8b7b      	ldrh	r3, [r7, #26]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d16b      	bne.n	8003f3a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	330c      	adds	r3, #12
 8003e6c:	7812      	ldrb	r2, [r2, #0]
 8003e6e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e88:	e057      	b.n	8003f3a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d11c      	bne.n	8003ed2 <HAL_SPI_TransmitReceive+0x26c>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d017      	beq.n	8003ed2 <HAL_SPI_TransmitReceive+0x26c>
 8003ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d114      	bne.n	8003ed2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	330c      	adds	r3, #12
 8003eb2:	7812      	ldrb	r2, [r2, #0]
 8003eb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d119      	bne.n	8003f14 <HAL_SPI_TransmitReceive+0x2ae>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d014      	beq.n	8003f14 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68da      	ldr	r2, [r3, #12]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef4:	b2d2      	uxtb	r2, r2
 8003ef6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efc:	1c5a      	adds	r2, r3, #1
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f10:	2301      	movs	r3, #1
 8003f12:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f14:	f7fd ffaa 	bl	8001e6c <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d803      	bhi.n	8003f2c <HAL_SPI_TransmitReceive+0x2c6>
 8003f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f2a:	d102      	bne.n	8003f32 <HAL_SPI_TransmitReceive+0x2cc>
 8003f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d103      	bne.n	8003f3a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f38:	e029      	b.n	8003f8e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1a2      	bne.n	8003e8a <HAL_SPI_TransmitReceive+0x224>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d19d      	bne.n	8003e8a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 f904 	bl	8004160 <SPI_EndRxTxTransaction>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d006      	beq.n	8003f6c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2220      	movs	r2, #32
 8003f68:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003f6a:	e010      	b.n	8003f8e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10b      	bne.n	8003f8c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f74:	2300      	movs	r3, #0
 8003f76:	617b      	str	r3, [r7, #20]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	e000      	b.n	8003f8e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003f8c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3730      	adds	r7, #48	; 0x30
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
	...

08003fac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b088      	sub	sp, #32
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	603b      	str	r3, [r7, #0]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003fbc:	f7fd ff56 	bl	8001e6c <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc4:	1a9b      	subs	r3, r3, r2
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	4413      	add	r3, r2
 8003fca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003fcc:	f7fd ff4e 	bl	8001e6c <HAL_GetTick>
 8003fd0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003fd2:	4b39      	ldr	r3, [pc, #228]	; (80040b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	015b      	lsls	r3, r3, #5
 8003fd8:	0d1b      	lsrs	r3, r3, #20
 8003fda:	69fa      	ldr	r2, [r7, #28]
 8003fdc:	fb02 f303 	mul.w	r3, r2, r3
 8003fe0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fe2:	e054      	b.n	800408e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fea:	d050      	beq.n	800408e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003fec:	f7fd ff3e 	bl	8001e6c <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	69fa      	ldr	r2, [r7, #28]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d902      	bls.n	8004002 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d13d      	bne.n	800407e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004010:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800401a:	d111      	bne.n	8004040 <SPI_WaitFlagStateUntilTimeout+0x94>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004024:	d004      	beq.n	8004030 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800402e:	d107      	bne.n	8004040 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800403e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004048:	d10f      	bne.n	800406a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004068:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e017      	b.n	80040ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	3b01      	subs	r3, #1
 800408c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	4013      	ands	r3, r2
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	429a      	cmp	r2, r3
 800409c:	bf0c      	ite	eq
 800409e:	2301      	moveq	r3, #1
 80040a0:	2300      	movne	r3, #0
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	461a      	mov	r2, r3
 80040a6:	79fb      	ldrb	r3, [r7, #7]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d19b      	bne.n	8003fe4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3720      	adds	r7, #32
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	20000008 	.word	0x20000008

080040bc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040d0:	d111      	bne.n	80040f6 <SPI_EndRxTransaction+0x3a>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040da:	d004      	beq.n	80040e6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040e4:	d107      	bne.n	80040f6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040f4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040fe:	d117      	bne.n	8004130 <SPI_EndRxTransaction+0x74>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004108:	d112      	bne.n	8004130 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	2200      	movs	r2, #0
 8004112:	2101      	movs	r1, #1
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f7ff ff49 	bl	8003fac <SPI_WaitFlagStateUntilTimeout>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d01a      	beq.n	8004156 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004124:	f043 0220 	orr.w	r2, r3, #32
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e013      	b.n	8004158 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2200      	movs	r2, #0
 8004138:	2180      	movs	r1, #128	; 0x80
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f7ff ff36 	bl	8003fac <SPI_WaitFlagStateUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d007      	beq.n	8004156 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414a:	f043 0220 	orr.w	r2, r3, #32
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e000      	b.n	8004158 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af02      	add	r7, sp, #8
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2200      	movs	r2, #0
 8004174:	2180      	movs	r1, #128	; 0x80
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f7ff ff18 	bl	8003fac <SPI_WaitFlagStateUntilTimeout>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d007      	beq.n	8004192 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004186:	f043 0220 	orr.w	r2, r3, #32
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e000      	b.n	8004194 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <__errno>:
 800419c:	4b01      	ldr	r3, [pc, #4]	; (80041a4 <__errno+0x8>)
 800419e:	6818      	ldr	r0, [r3, #0]
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	20000014 	.word	0x20000014

080041a8 <__libc_init_array>:
 80041a8:	b570      	push	{r4, r5, r6, lr}
 80041aa:	2600      	movs	r6, #0
 80041ac:	4d0c      	ldr	r5, [pc, #48]	; (80041e0 <__libc_init_array+0x38>)
 80041ae:	4c0d      	ldr	r4, [pc, #52]	; (80041e4 <__libc_init_array+0x3c>)
 80041b0:	1b64      	subs	r4, r4, r5
 80041b2:	10a4      	asrs	r4, r4, #2
 80041b4:	42a6      	cmp	r6, r4
 80041b6:	d109      	bne.n	80041cc <__libc_init_array+0x24>
 80041b8:	f001 fba4 	bl	8005904 <_init>
 80041bc:	2600      	movs	r6, #0
 80041be:	4d0a      	ldr	r5, [pc, #40]	; (80041e8 <__libc_init_array+0x40>)
 80041c0:	4c0a      	ldr	r4, [pc, #40]	; (80041ec <__libc_init_array+0x44>)
 80041c2:	1b64      	subs	r4, r4, r5
 80041c4:	10a4      	asrs	r4, r4, #2
 80041c6:	42a6      	cmp	r6, r4
 80041c8:	d105      	bne.n	80041d6 <__libc_init_array+0x2e>
 80041ca:	bd70      	pop	{r4, r5, r6, pc}
 80041cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80041d0:	4798      	blx	r3
 80041d2:	3601      	adds	r6, #1
 80041d4:	e7ee      	b.n	80041b4 <__libc_init_array+0xc>
 80041d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80041da:	4798      	blx	r3
 80041dc:	3601      	adds	r6, #1
 80041de:	e7f2      	b.n	80041c6 <__libc_init_array+0x1e>
 80041e0:	08006738 	.word	0x08006738
 80041e4:	08006738 	.word	0x08006738
 80041e8:	08006738 	.word	0x08006738
 80041ec:	0800673c 	.word	0x0800673c

080041f0 <memset>:
 80041f0:	4603      	mov	r3, r0
 80041f2:	4402      	add	r2, r0
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d100      	bne.n	80041fa <memset+0xa>
 80041f8:	4770      	bx	lr
 80041fa:	f803 1b01 	strb.w	r1, [r3], #1
 80041fe:	e7f9      	b.n	80041f4 <memset+0x4>

08004200 <siprintf>:
 8004200:	b40e      	push	{r1, r2, r3}
 8004202:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004206:	b500      	push	{lr}
 8004208:	b09c      	sub	sp, #112	; 0x70
 800420a:	ab1d      	add	r3, sp, #116	; 0x74
 800420c:	9002      	str	r0, [sp, #8]
 800420e:	9006      	str	r0, [sp, #24]
 8004210:	9107      	str	r1, [sp, #28]
 8004212:	9104      	str	r1, [sp, #16]
 8004214:	4808      	ldr	r0, [pc, #32]	; (8004238 <siprintf+0x38>)
 8004216:	4909      	ldr	r1, [pc, #36]	; (800423c <siprintf+0x3c>)
 8004218:	f853 2b04 	ldr.w	r2, [r3], #4
 800421c:	9105      	str	r1, [sp, #20]
 800421e:	6800      	ldr	r0, [r0, #0]
 8004220:	a902      	add	r1, sp, #8
 8004222:	9301      	str	r3, [sp, #4]
 8004224:	f000 f868 	bl	80042f8 <_svfiprintf_r>
 8004228:	2200      	movs	r2, #0
 800422a:	9b02      	ldr	r3, [sp, #8]
 800422c:	701a      	strb	r2, [r3, #0]
 800422e:	b01c      	add	sp, #112	; 0x70
 8004230:	f85d eb04 	ldr.w	lr, [sp], #4
 8004234:	b003      	add	sp, #12
 8004236:	4770      	bx	lr
 8004238:	20000014 	.word	0x20000014
 800423c:	ffff0208 	.word	0xffff0208

08004240 <__ssputs_r>:
 8004240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004244:	688e      	ldr	r6, [r1, #8]
 8004246:	4682      	mov	sl, r0
 8004248:	429e      	cmp	r6, r3
 800424a:	460c      	mov	r4, r1
 800424c:	4690      	mov	r8, r2
 800424e:	461f      	mov	r7, r3
 8004250:	d838      	bhi.n	80042c4 <__ssputs_r+0x84>
 8004252:	898a      	ldrh	r2, [r1, #12]
 8004254:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004258:	d032      	beq.n	80042c0 <__ssputs_r+0x80>
 800425a:	6825      	ldr	r5, [r4, #0]
 800425c:	6909      	ldr	r1, [r1, #16]
 800425e:	3301      	adds	r3, #1
 8004260:	eba5 0901 	sub.w	r9, r5, r1
 8004264:	6965      	ldr	r5, [r4, #20]
 8004266:	444b      	add	r3, r9
 8004268:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800426c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004270:	106d      	asrs	r5, r5, #1
 8004272:	429d      	cmp	r5, r3
 8004274:	bf38      	it	cc
 8004276:	461d      	movcc	r5, r3
 8004278:	0553      	lsls	r3, r2, #21
 800427a:	d531      	bpl.n	80042e0 <__ssputs_r+0xa0>
 800427c:	4629      	mov	r1, r5
 800427e:	f000 fb6f 	bl	8004960 <_malloc_r>
 8004282:	4606      	mov	r6, r0
 8004284:	b950      	cbnz	r0, 800429c <__ssputs_r+0x5c>
 8004286:	230c      	movs	r3, #12
 8004288:	f04f 30ff 	mov.w	r0, #4294967295
 800428c:	f8ca 3000 	str.w	r3, [sl]
 8004290:	89a3      	ldrh	r3, [r4, #12]
 8004292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004296:	81a3      	strh	r3, [r4, #12]
 8004298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800429c:	464a      	mov	r2, r9
 800429e:	6921      	ldr	r1, [r4, #16]
 80042a0:	f000 face 	bl	8004840 <memcpy>
 80042a4:	89a3      	ldrh	r3, [r4, #12]
 80042a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80042aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ae:	81a3      	strh	r3, [r4, #12]
 80042b0:	6126      	str	r6, [r4, #16]
 80042b2:	444e      	add	r6, r9
 80042b4:	6026      	str	r6, [r4, #0]
 80042b6:	463e      	mov	r6, r7
 80042b8:	6165      	str	r5, [r4, #20]
 80042ba:	eba5 0509 	sub.w	r5, r5, r9
 80042be:	60a5      	str	r5, [r4, #8]
 80042c0:	42be      	cmp	r6, r7
 80042c2:	d900      	bls.n	80042c6 <__ssputs_r+0x86>
 80042c4:	463e      	mov	r6, r7
 80042c6:	4632      	mov	r2, r6
 80042c8:	4641      	mov	r1, r8
 80042ca:	6820      	ldr	r0, [r4, #0]
 80042cc:	f000 fac6 	bl	800485c <memmove>
 80042d0:	68a3      	ldr	r3, [r4, #8]
 80042d2:	2000      	movs	r0, #0
 80042d4:	1b9b      	subs	r3, r3, r6
 80042d6:	60a3      	str	r3, [r4, #8]
 80042d8:	6823      	ldr	r3, [r4, #0]
 80042da:	4433      	add	r3, r6
 80042dc:	6023      	str	r3, [r4, #0]
 80042de:	e7db      	b.n	8004298 <__ssputs_r+0x58>
 80042e0:	462a      	mov	r2, r5
 80042e2:	f000 fbb1 	bl	8004a48 <_realloc_r>
 80042e6:	4606      	mov	r6, r0
 80042e8:	2800      	cmp	r0, #0
 80042ea:	d1e1      	bne.n	80042b0 <__ssputs_r+0x70>
 80042ec:	4650      	mov	r0, sl
 80042ee:	6921      	ldr	r1, [r4, #16]
 80042f0:	f000 face 	bl	8004890 <_free_r>
 80042f4:	e7c7      	b.n	8004286 <__ssputs_r+0x46>
	...

080042f8 <_svfiprintf_r>:
 80042f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042fc:	4698      	mov	r8, r3
 80042fe:	898b      	ldrh	r3, [r1, #12]
 8004300:	4607      	mov	r7, r0
 8004302:	061b      	lsls	r3, r3, #24
 8004304:	460d      	mov	r5, r1
 8004306:	4614      	mov	r4, r2
 8004308:	b09d      	sub	sp, #116	; 0x74
 800430a:	d50e      	bpl.n	800432a <_svfiprintf_r+0x32>
 800430c:	690b      	ldr	r3, [r1, #16]
 800430e:	b963      	cbnz	r3, 800432a <_svfiprintf_r+0x32>
 8004310:	2140      	movs	r1, #64	; 0x40
 8004312:	f000 fb25 	bl	8004960 <_malloc_r>
 8004316:	6028      	str	r0, [r5, #0]
 8004318:	6128      	str	r0, [r5, #16]
 800431a:	b920      	cbnz	r0, 8004326 <_svfiprintf_r+0x2e>
 800431c:	230c      	movs	r3, #12
 800431e:	603b      	str	r3, [r7, #0]
 8004320:	f04f 30ff 	mov.w	r0, #4294967295
 8004324:	e0d1      	b.n	80044ca <_svfiprintf_r+0x1d2>
 8004326:	2340      	movs	r3, #64	; 0x40
 8004328:	616b      	str	r3, [r5, #20]
 800432a:	2300      	movs	r3, #0
 800432c:	9309      	str	r3, [sp, #36]	; 0x24
 800432e:	2320      	movs	r3, #32
 8004330:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004334:	2330      	movs	r3, #48	; 0x30
 8004336:	f04f 0901 	mov.w	r9, #1
 800433a:	f8cd 800c 	str.w	r8, [sp, #12]
 800433e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80044e4 <_svfiprintf_r+0x1ec>
 8004342:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004346:	4623      	mov	r3, r4
 8004348:	469a      	mov	sl, r3
 800434a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800434e:	b10a      	cbz	r2, 8004354 <_svfiprintf_r+0x5c>
 8004350:	2a25      	cmp	r2, #37	; 0x25
 8004352:	d1f9      	bne.n	8004348 <_svfiprintf_r+0x50>
 8004354:	ebba 0b04 	subs.w	fp, sl, r4
 8004358:	d00b      	beq.n	8004372 <_svfiprintf_r+0x7a>
 800435a:	465b      	mov	r3, fp
 800435c:	4622      	mov	r2, r4
 800435e:	4629      	mov	r1, r5
 8004360:	4638      	mov	r0, r7
 8004362:	f7ff ff6d 	bl	8004240 <__ssputs_r>
 8004366:	3001      	adds	r0, #1
 8004368:	f000 80aa 	beq.w	80044c0 <_svfiprintf_r+0x1c8>
 800436c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800436e:	445a      	add	r2, fp
 8004370:	9209      	str	r2, [sp, #36]	; 0x24
 8004372:	f89a 3000 	ldrb.w	r3, [sl]
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 80a2 	beq.w	80044c0 <_svfiprintf_r+0x1c8>
 800437c:	2300      	movs	r3, #0
 800437e:	f04f 32ff 	mov.w	r2, #4294967295
 8004382:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004386:	f10a 0a01 	add.w	sl, sl, #1
 800438a:	9304      	str	r3, [sp, #16]
 800438c:	9307      	str	r3, [sp, #28]
 800438e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004392:	931a      	str	r3, [sp, #104]	; 0x68
 8004394:	4654      	mov	r4, sl
 8004396:	2205      	movs	r2, #5
 8004398:	f814 1b01 	ldrb.w	r1, [r4], #1
 800439c:	4851      	ldr	r0, [pc, #324]	; (80044e4 <_svfiprintf_r+0x1ec>)
 800439e:	f000 fa41 	bl	8004824 <memchr>
 80043a2:	9a04      	ldr	r2, [sp, #16]
 80043a4:	b9d8      	cbnz	r0, 80043de <_svfiprintf_r+0xe6>
 80043a6:	06d0      	lsls	r0, r2, #27
 80043a8:	bf44      	itt	mi
 80043aa:	2320      	movmi	r3, #32
 80043ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043b0:	0711      	lsls	r1, r2, #28
 80043b2:	bf44      	itt	mi
 80043b4:	232b      	movmi	r3, #43	; 0x2b
 80043b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043ba:	f89a 3000 	ldrb.w	r3, [sl]
 80043be:	2b2a      	cmp	r3, #42	; 0x2a
 80043c0:	d015      	beq.n	80043ee <_svfiprintf_r+0xf6>
 80043c2:	4654      	mov	r4, sl
 80043c4:	2000      	movs	r0, #0
 80043c6:	f04f 0c0a 	mov.w	ip, #10
 80043ca:	9a07      	ldr	r2, [sp, #28]
 80043cc:	4621      	mov	r1, r4
 80043ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043d2:	3b30      	subs	r3, #48	; 0x30
 80043d4:	2b09      	cmp	r3, #9
 80043d6:	d94e      	bls.n	8004476 <_svfiprintf_r+0x17e>
 80043d8:	b1b0      	cbz	r0, 8004408 <_svfiprintf_r+0x110>
 80043da:	9207      	str	r2, [sp, #28]
 80043dc:	e014      	b.n	8004408 <_svfiprintf_r+0x110>
 80043de:	eba0 0308 	sub.w	r3, r0, r8
 80043e2:	fa09 f303 	lsl.w	r3, r9, r3
 80043e6:	4313      	orrs	r3, r2
 80043e8:	46a2      	mov	sl, r4
 80043ea:	9304      	str	r3, [sp, #16]
 80043ec:	e7d2      	b.n	8004394 <_svfiprintf_r+0x9c>
 80043ee:	9b03      	ldr	r3, [sp, #12]
 80043f0:	1d19      	adds	r1, r3, #4
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	9103      	str	r1, [sp, #12]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	bfbb      	ittet	lt
 80043fa:	425b      	neglt	r3, r3
 80043fc:	f042 0202 	orrlt.w	r2, r2, #2
 8004400:	9307      	strge	r3, [sp, #28]
 8004402:	9307      	strlt	r3, [sp, #28]
 8004404:	bfb8      	it	lt
 8004406:	9204      	strlt	r2, [sp, #16]
 8004408:	7823      	ldrb	r3, [r4, #0]
 800440a:	2b2e      	cmp	r3, #46	; 0x2e
 800440c:	d10c      	bne.n	8004428 <_svfiprintf_r+0x130>
 800440e:	7863      	ldrb	r3, [r4, #1]
 8004410:	2b2a      	cmp	r3, #42	; 0x2a
 8004412:	d135      	bne.n	8004480 <_svfiprintf_r+0x188>
 8004414:	9b03      	ldr	r3, [sp, #12]
 8004416:	3402      	adds	r4, #2
 8004418:	1d1a      	adds	r2, r3, #4
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	9203      	str	r2, [sp, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	bfb8      	it	lt
 8004422:	f04f 33ff 	movlt.w	r3, #4294967295
 8004426:	9305      	str	r3, [sp, #20]
 8004428:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80044e8 <_svfiprintf_r+0x1f0>
 800442c:	2203      	movs	r2, #3
 800442e:	4650      	mov	r0, sl
 8004430:	7821      	ldrb	r1, [r4, #0]
 8004432:	f000 f9f7 	bl	8004824 <memchr>
 8004436:	b140      	cbz	r0, 800444a <_svfiprintf_r+0x152>
 8004438:	2340      	movs	r3, #64	; 0x40
 800443a:	eba0 000a 	sub.w	r0, r0, sl
 800443e:	fa03 f000 	lsl.w	r0, r3, r0
 8004442:	9b04      	ldr	r3, [sp, #16]
 8004444:	3401      	adds	r4, #1
 8004446:	4303      	orrs	r3, r0
 8004448:	9304      	str	r3, [sp, #16]
 800444a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800444e:	2206      	movs	r2, #6
 8004450:	4826      	ldr	r0, [pc, #152]	; (80044ec <_svfiprintf_r+0x1f4>)
 8004452:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004456:	f000 f9e5 	bl	8004824 <memchr>
 800445a:	2800      	cmp	r0, #0
 800445c:	d038      	beq.n	80044d0 <_svfiprintf_r+0x1d8>
 800445e:	4b24      	ldr	r3, [pc, #144]	; (80044f0 <_svfiprintf_r+0x1f8>)
 8004460:	bb1b      	cbnz	r3, 80044aa <_svfiprintf_r+0x1b2>
 8004462:	9b03      	ldr	r3, [sp, #12]
 8004464:	3307      	adds	r3, #7
 8004466:	f023 0307 	bic.w	r3, r3, #7
 800446a:	3308      	adds	r3, #8
 800446c:	9303      	str	r3, [sp, #12]
 800446e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004470:	4433      	add	r3, r6
 8004472:	9309      	str	r3, [sp, #36]	; 0x24
 8004474:	e767      	b.n	8004346 <_svfiprintf_r+0x4e>
 8004476:	460c      	mov	r4, r1
 8004478:	2001      	movs	r0, #1
 800447a:	fb0c 3202 	mla	r2, ip, r2, r3
 800447e:	e7a5      	b.n	80043cc <_svfiprintf_r+0xd4>
 8004480:	2300      	movs	r3, #0
 8004482:	f04f 0c0a 	mov.w	ip, #10
 8004486:	4619      	mov	r1, r3
 8004488:	3401      	adds	r4, #1
 800448a:	9305      	str	r3, [sp, #20]
 800448c:	4620      	mov	r0, r4
 800448e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004492:	3a30      	subs	r2, #48	; 0x30
 8004494:	2a09      	cmp	r2, #9
 8004496:	d903      	bls.n	80044a0 <_svfiprintf_r+0x1a8>
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0c5      	beq.n	8004428 <_svfiprintf_r+0x130>
 800449c:	9105      	str	r1, [sp, #20]
 800449e:	e7c3      	b.n	8004428 <_svfiprintf_r+0x130>
 80044a0:	4604      	mov	r4, r0
 80044a2:	2301      	movs	r3, #1
 80044a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80044a8:	e7f0      	b.n	800448c <_svfiprintf_r+0x194>
 80044aa:	ab03      	add	r3, sp, #12
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	462a      	mov	r2, r5
 80044b0:	4638      	mov	r0, r7
 80044b2:	4b10      	ldr	r3, [pc, #64]	; (80044f4 <_svfiprintf_r+0x1fc>)
 80044b4:	a904      	add	r1, sp, #16
 80044b6:	f3af 8000 	nop.w
 80044ba:	1c42      	adds	r2, r0, #1
 80044bc:	4606      	mov	r6, r0
 80044be:	d1d6      	bne.n	800446e <_svfiprintf_r+0x176>
 80044c0:	89ab      	ldrh	r3, [r5, #12]
 80044c2:	065b      	lsls	r3, r3, #25
 80044c4:	f53f af2c 	bmi.w	8004320 <_svfiprintf_r+0x28>
 80044c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044ca:	b01d      	add	sp, #116	; 0x74
 80044cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044d0:	ab03      	add	r3, sp, #12
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	462a      	mov	r2, r5
 80044d6:	4638      	mov	r0, r7
 80044d8:	4b06      	ldr	r3, [pc, #24]	; (80044f4 <_svfiprintf_r+0x1fc>)
 80044da:	a904      	add	r1, sp, #16
 80044dc:	f000 f87c 	bl	80045d8 <_printf_i>
 80044e0:	e7eb      	b.n	80044ba <_svfiprintf_r+0x1c2>
 80044e2:	bf00      	nop
 80044e4:	080066d4 	.word	0x080066d4
 80044e8:	080066da 	.word	0x080066da
 80044ec:	080066de 	.word	0x080066de
 80044f0:	00000000 	.word	0x00000000
 80044f4:	08004241 	.word	0x08004241

080044f8 <_printf_common>:
 80044f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044fc:	4616      	mov	r6, r2
 80044fe:	4699      	mov	r9, r3
 8004500:	688a      	ldr	r2, [r1, #8]
 8004502:	690b      	ldr	r3, [r1, #16]
 8004504:	4607      	mov	r7, r0
 8004506:	4293      	cmp	r3, r2
 8004508:	bfb8      	it	lt
 800450a:	4613      	movlt	r3, r2
 800450c:	6033      	str	r3, [r6, #0]
 800450e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004512:	460c      	mov	r4, r1
 8004514:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004518:	b10a      	cbz	r2, 800451e <_printf_common+0x26>
 800451a:	3301      	adds	r3, #1
 800451c:	6033      	str	r3, [r6, #0]
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	0699      	lsls	r1, r3, #26
 8004522:	bf42      	ittt	mi
 8004524:	6833      	ldrmi	r3, [r6, #0]
 8004526:	3302      	addmi	r3, #2
 8004528:	6033      	strmi	r3, [r6, #0]
 800452a:	6825      	ldr	r5, [r4, #0]
 800452c:	f015 0506 	ands.w	r5, r5, #6
 8004530:	d106      	bne.n	8004540 <_printf_common+0x48>
 8004532:	f104 0a19 	add.w	sl, r4, #25
 8004536:	68e3      	ldr	r3, [r4, #12]
 8004538:	6832      	ldr	r2, [r6, #0]
 800453a:	1a9b      	subs	r3, r3, r2
 800453c:	42ab      	cmp	r3, r5
 800453e:	dc28      	bgt.n	8004592 <_printf_common+0x9a>
 8004540:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004544:	1e13      	subs	r3, r2, #0
 8004546:	6822      	ldr	r2, [r4, #0]
 8004548:	bf18      	it	ne
 800454a:	2301      	movne	r3, #1
 800454c:	0692      	lsls	r2, r2, #26
 800454e:	d42d      	bmi.n	80045ac <_printf_common+0xb4>
 8004550:	4649      	mov	r1, r9
 8004552:	4638      	mov	r0, r7
 8004554:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004558:	47c0      	blx	r8
 800455a:	3001      	adds	r0, #1
 800455c:	d020      	beq.n	80045a0 <_printf_common+0xa8>
 800455e:	6823      	ldr	r3, [r4, #0]
 8004560:	68e5      	ldr	r5, [r4, #12]
 8004562:	f003 0306 	and.w	r3, r3, #6
 8004566:	2b04      	cmp	r3, #4
 8004568:	bf18      	it	ne
 800456a:	2500      	movne	r5, #0
 800456c:	6832      	ldr	r2, [r6, #0]
 800456e:	f04f 0600 	mov.w	r6, #0
 8004572:	68a3      	ldr	r3, [r4, #8]
 8004574:	bf08      	it	eq
 8004576:	1aad      	subeq	r5, r5, r2
 8004578:	6922      	ldr	r2, [r4, #16]
 800457a:	bf08      	it	eq
 800457c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004580:	4293      	cmp	r3, r2
 8004582:	bfc4      	itt	gt
 8004584:	1a9b      	subgt	r3, r3, r2
 8004586:	18ed      	addgt	r5, r5, r3
 8004588:	341a      	adds	r4, #26
 800458a:	42b5      	cmp	r5, r6
 800458c:	d11a      	bne.n	80045c4 <_printf_common+0xcc>
 800458e:	2000      	movs	r0, #0
 8004590:	e008      	b.n	80045a4 <_printf_common+0xac>
 8004592:	2301      	movs	r3, #1
 8004594:	4652      	mov	r2, sl
 8004596:	4649      	mov	r1, r9
 8004598:	4638      	mov	r0, r7
 800459a:	47c0      	blx	r8
 800459c:	3001      	adds	r0, #1
 800459e:	d103      	bne.n	80045a8 <_printf_common+0xb0>
 80045a0:	f04f 30ff 	mov.w	r0, #4294967295
 80045a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045a8:	3501      	adds	r5, #1
 80045aa:	e7c4      	b.n	8004536 <_printf_common+0x3e>
 80045ac:	2030      	movs	r0, #48	; 0x30
 80045ae:	18e1      	adds	r1, r4, r3
 80045b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045b4:	1c5a      	adds	r2, r3, #1
 80045b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045ba:	4422      	add	r2, r4
 80045bc:	3302      	adds	r3, #2
 80045be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045c2:	e7c5      	b.n	8004550 <_printf_common+0x58>
 80045c4:	2301      	movs	r3, #1
 80045c6:	4622      	mov	r2, r4
 80045c8:	4649      	mov	r1, r9
 80045ca:	4638      	mov	r0, r7
 80045cc:	47c0      	blx	r8
 80045ce:	3001      	adds	r0, #1
 80045d0:	d0e6      	beq.n	80045a0 <_printf_common+0xa8>
 80045d2:	3601      	adds	r6, #1
 80045d4:	e7d9      	b.n	800458a <_printf_common+0x92>
	...

080045d8 <_printf_i>:
 80045d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045dc:	7e0f      	ldrb	r7, [r1, #24]
 80045de:	4691      	mov	r9, r2
 80045e0:	2f78      	cmp	r7, #120	; 0x78
 80045e2:	4680      	mov	r8, r0
 80045e4:	460c      	mov	r4, r1
 80045e6:	469a      	mov	sl, r3
 80045e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80045ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80045ee:	d807      	bhi.n	8004600 <_printf_i+0x28>
 80045f0:	2f62      	cmp	r7, #98	; 0x62
 80045f2:	d80a      	bhi.n	800460a <_printf_i+0x32>
 80045f4:	2f00      	cmp	r7, #0
 80045f6:	f000 80d9 	beq.w	80047ac <_printf_i+0x1d4>
 80045fa:	2f58      	cmp	r7, #88	; 0x58
 80045fc:	f000 80a4 	beq.w	8004748 <_printf_i+0x170>
 8004600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004604:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004608:	e03a      	b.n	8004680 <_printf_i+0xa8>
 800460a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800460e:	2b15      	cmp	r3, #21
 8004610:	d8f6      	bhi.n	8004600 <_printf_i+0x28>
 8004612:	a101      	add	r1, pc, #4	; (adr r1, 8004618 <_printf_i+0x40>)
 8004614:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004618:	08004671 	.word	0x08004671
 800461c:	08004685 	.word	0x08004685
 8004620:	08004601 	.word	0x08004601
 8004624:	08004601 	.word	0x08004601
 8004628:	08004601 	.word	0x08004601
 800462c:	08004601 	.word	0x08004601
 8004630:	08004685 	.word	0x08004685
 8004634:	08004601 	.word	0x08004601
 8004638:	08004601 	.word	0x08004601
 800463c:	08004601 	.word	0x08004601
 8004640:	08004601 	.word	0x08004601
 8004644:	08004793 	.word	0x08004793
 8004648:	080046b5 	.word	0x080046b5
 800464c:	08004775 	.word	0x08004775
 8004650:	08004601 	.word	0x08004601
 8004654:	08004601 	.word	0x08004601
 8004658:	080047b5 	.word	0x080047b5
 800465c:	08004601 	.word	0x08004601
 8004660:	080046b5 	.word	0x080046b5
 8004664:	08004601 	.word	0x08004601
 8004668:	08004601 	.word	0x08004601
 800466c:	0800477d 	.word	0x0800477d
 8004670:	682b      	ldr	r3, [r5, #0]
 8004672:	1d1a      	adds	r2, r3, #4
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	602a      	str	r2, [r5, #0]
 8004678:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800467c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004680:	2301      	movs	r3, #1
 8004682:	e0a4      	b.n	80047ce <_printf_i+0x1f6>
 8004684:	6820      	ldr	r0, [r4, #0]
 8004686:	6829      	ldr	r1, [r5, #0]
 8004688:	0606      	lsls	r6, r0, #24
 800468a:	f101 0304 	add.w	r3, r1, #4
 800468e:	d50a      	bpl.n	80046a6 <_printf_i+0xce>
 8004690:	680e      	ldr	r6, [r1, #0]
 8004692:	602b      	str	r3, [r5, #0]
 8004694:	2e00      	cmp	r6, #0
 8004696:	da03      	bge.n	80046a0 <_printf_i+0xc8>
 8004698:	232d      	movs	r3, #45	; 0x2d
 800469a:	4276      	negs	r6, r6
 800469c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046a0:	230a      	movs	r3, #10
 80046a2:	485e      	ldr	r0, [pc, #376]	; (800481c <_printf_i+0x244>)
 80046a4:	e019      	b.n	80046da <_printf_i+0x102>
 80046a6:	680e      	ldr	r6, [r1, #0]
 80046a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80046ac:	602b      	str	r3, [r5, #0]
 80046ae:	bf18      	it	ne
 80046b0:	b236      	sxthne	r6, r6
 80046b2:	e7ef      	b.n	8004694 <_printf_i+0xbc>
 80046b4:	682b      	ldr	r3, [r5, #0]
 80046b6:	6820      	ldr	r0, [r4, #0]
 80046b8:	1d19      	adds	r1, r3, #4
 80046ba:	6029      	str	r1, [r5, #0]
 80046bc:	0601      	lsls	r1, r0, #24
 80046be:	d501      	bpl.n	80046c4 <_printf_i+0xec>
 80046c0:	681e      	ldr	r6, [r3, #0]
 80046c2:	e002      	b.n	80046ca <_printf_i+0xf2>
 80046c4:	0646      	lsls	r6, r0, #25
 80046c6:	d5fb      	bpl.n	80046c0 <_printf_i+0xe8>
 80046c8:	881e      	ldrh	r6, [r3, #0]
 80046ca:	2f6f      	cmp	r7, #111	; 0x6f
 80046cc:	bf0c      	ite	eq
 80046ce:	2308      	moveq	r3, #8
 80046d0:	230a      	movne	r3, #10
 80046d2:	4852      	ldr	r0, [pc, #328]	; (800481c <_printf_i+0x244>)
 80046d4:	2100      	movs	r1, #0
 80046d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046da:	6865      	ldr	r5, [r4, #4]
 80046dc:	2d00      	cmp	r5, #0
 80046de:	bfa8      	it	ge
 80046e0:	6821      	ldrge	r1, [r4, #0]
 80046e2:	60a5      	str	r5, [r4, #8]
 80046e4:	bfa4      	itt	ge
 80046e6:	f021 0104 	bicge.w	r1, r1, #4
 80046ea:	6021      	strge	r1, [r4, #0]
 80046ec:	b90e      	cbnz	r6, 80046f2 <_printf_i+0x11a>
 80046ee:	2d00      	cmp	r5, #0
 80046f0:	d04d      	beq.n	800478e <_printf_i+0x1b6>
 80046f2:	4615      	mov	r5, r2
 80046f4:	fbb6 f1f3 	udiv	r1, r6, r3
 80046f8:	fb03 6711 	mls	r7, r3, r1, r6
 80046fc:	5dc7      	ldrb	r7, [r0, r7]
 80046fe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004702:	4637      	mov	r7, r6
 8004704:	42bb      	cmp	r3, r7
 8004706:	460e      	mov	r6, r1
 8004708:	d9f4      	bls.n	80046f4 <_printf_i+0x11c>
 800470a:	2b08      	cmp	r3, #8
 800470c:	d10b      	bne.n	8004726 <_printf_i+0x14e>
 800470e:	6823      	ldr	r3, [r4, #0]
 8004710:	07de      	lsls	r6, r3, #31
 8004712:	d508      	bpl.n	8004726 <_printf_i+0x14e>
 8004714:	6923      	ldr	r3, [r4, #16]
 8004716:	6861      	ldr	r1, [r4, #4]
 8004718:	4299      	cmp	r1, r3
 800471a:	bfde      	ittt	le
 800471c:	2330      	movle	r3, #48	; 0x30
 800471e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004722:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004726:	1b52      	subs	r2, r2, r5
 8004728:	6122      	str	r2, [r4, #16]
 800472a:	464b      	mov	r3, r9
 800472c:	4621      	mov	r1, r4
 800472e:	4640      	mov	r0, r8
 8004730:	f8cd a000 	str.w	sl, [sp]
 8004734:	aa03      	add	r2, sp, #12
 8004736:	f7ff fedf 	bl	80044f8 <_printf_common>
 800473a:	3001      	adds	r0, #1
 800473c:	d14c      	bne.n	80047d8 <_printf_i+0x200>
 800473e:	f04f 30ff 	mov.w	r0, #4294967295
 8004742:	b004      	add	sp, #16
 8004744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004748:	4834      	ldr	r0, [pc, #208]	; (800481c <_printf_i+0x244>)
 800474a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800474e:	6829      	ldr	r1, [r5, #0]
 8004750:	6823      	ldr	r3, [r4, #0]
 8004752:	f851 6b04 	ldr.w	r6, [r1], #4
 8004756:	6029      	str	r1, [r5, #0]
 8004758:	061d      	lsls	r5, r3, #24
 800475a:	d514      	bpl.n	8004786 <_printf_i+0x1ae>
 800475c:	07df      	lsls	r7, r3, #31
 800475e:	bf44      	itt	mi
 8004760:	f043 0320 	orrmi.w	r3, r3, #32
 8004764:	6023      	strmi	r3, [r4, #0]
 8004766:	b91e      	cbnz	r6, 8004770 <_printf_i+0x198>
 8004768:	6823      	ldr	r3, [r4, #0]
 800476a:	f023 0320 	bic.w	r3, r3, #32
 800476e:	6023      	str	r3, [r4, #0]
 8004770:	2310      	movs	r3, #16
 8004772:	e7af      	b.n	80046d4 <_printf_i+0xfc>
 8004774:	6823      	ldr	r3, [r4, #0]
 8004776:	f043 0320 	orr.w	r3, r3, #32
 800477a:	6023      	str	r3, [r4, #0]
 800477c:	2378      	movs	r3, #120	; 0x78
 800477e:	4828      	ldr	r0, [pc, #160]	; (8004820 <_printf_i+0x248>)
 8004780:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004784:	e7e3      	b.n	800474e <_printf_i+0x176>
 8004786:	0659      	lsls	r1, r3, #25
 8004788:	bf48      	it	mi
 800478a:	b2b6      	uxthmi	r6, r6
 800478c:	e7e6      	b.n	800475c <_printf_i+0x184>
 800478e:	4615      	mov	r5, r2
 8004790:	e7bb      	b.n	800470a <_printf_i+0x132>
 8004792:	682b      	ldr	r3, [r5, #0]
 8004794:	6826      	ldr	r6, [r4, #0]
 8004796:	1d18      	adds	r0, r3, #4
 8004798:	6961      	ldr	r1, [r4, #20]
 800479a:	6028      	str	r0, [r5, #0]
 800479c:	0635      	lsls	r5, r6, #24
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	d501      	bpl.n	80047a6 <_printf_i+0x1ce>
 80047a2:	6019      	str	r1, [r3, #0]
 80047a4:	e002      	b.n	80047ac <_printf_i+0x1d4>
 80047a6:	0670      	lsls	r0, r6, #25
 80047a8:	d5fb      	bpl.n	80047a2 <_printf_i+0x1ca>
 80047aa:	8019      	strh	r1, [r3, #0]
 80047ac:	2300      	movs	r3, #0
 80047ae:	4615      	mov	r5, r2
 80047b0:	6123      	str	r3, [r4, #16]
 80047b2:	e7ba      	b.n	800472a <_printf_i+0x152>
 80047b4:	682b      	ldr	r3, [r5, #0]
 80047b6:	2100      	movs	r1, #0
 80047b8:	1d1a      	adds	r2, r3, #4
 80047ba:	602a      	str	r2, [r5, #0]
 80047bc:	681d      	ldr	r5, [r3, #0]
 80047be:	6862      	ldr	r2, [r4, #4]
 80047c0:	4628      	mov	r0, r5
 80047c2:	f000 f82f 	bl	8004824 <memchr>
 80047c6:	b108      	cbz	r0, 80047cc <_printf_i+0x1f4>
 80047c8:	1b40      	subs	r0, r0, r5
 80047ca:	6060      	str	r0, [r4, #4]
 80047cc:	6863      	ldr	r3, [r4, #4]
 80047ce:	6123      	str	r3, [r4, #16]
 80047d0:	2300      	movs	r3, #0
 80047d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047d6:	e7a8      	b.n	800472a <_printf_i+0x152>
 80047d8:	462a      	mov	r2, r5
 80047da:	4649      	mov	r1, r9
 80047dc:	4640      	mov	r0, r8
 80047de:	6923      	ldr	r3, [r4, #16]
 80047e0:	47d0      	blx	sl
 80047e2:	3001      	adds	r0, #1
 80047e4:	d0ab      	beq.n	800473e <_printf_i+0x166>
 80047e6:	6823      	ldr	r3, [r4, #0]
 80047e8:	079b      	lsls	r3, r3, #30
 80047ea:	d413      	bmi.n	8004814 <_printf_i+0x23c>
 80047ec:	68e0      	ldr	r0, [r4, #12]
 80047ee:	9b03      	ldr	r3, [sp, #12]
 80047f0:	4298      	cmp	r0, r3
 80047f2:	bfb8      	it	lt
 80047f4:	4618      	movlt	r0, r3
 80047f6:	e7a4      	b.n	8004742 <_printf_i+0x16a>
 80047f8:	2301      	movs	r3, #1
 80047fa:	4632      	mov	r2, r6
 80047fc:	4649      	mov	r1, r9
 80047fe:	4640      	mov	r0, r8
 8004800:	47d0      	blx	sl
 8004802:	3001      	adds	r0, #1
 8004804:	d09b      	beq.n	800473e <_printf_i+0x166>
 8004806:	3501      	adds	r5, #1
 8004808:	68e3      	ldr	r3, [r4, #12]
 800480a:	9903      	ldr	r1, [sp, #12]
 800480c:	1a5b      	subs	r3, r3, r1
 800480e:	42ab      	cmp	r3, r5
 8004810:	dcf2      	bgt.n	80047f8 <_printf_i+0x220>
 8004812:	e7eb      	b.n	80047ec <_printf_i+0x214>
 8004814:	2500      	movs	r5, #0
 8004816:	f104 0619 	add.w	r6, r4, #25
 800481a:	e7f5      	b.n	8004808 <_printf_i+0x230>
 800481c:	080066e5 	.word	0x080066e5
 8004820:	080066f6 	.word	0x080066f6

08004824 <memchr>:
 8004824:	4603      	mov	r3, r0
 8004826:	b510      	push	{r4, lr}
 8004828:	b2c9      	uxtb	r1, r1
 800482a:	4402      	add	r2, r0
 800482c:	4293      	cmp	r3, r2
 800482e:	4618      	mov	r0, r3
 8004830:	d101      	bne.n	8004836 <memchr+0x12>
 8004832:	2000      	movs	r0, #0
 8004834:	e003      	b.n	800483e <memchr+0x1a>
 8004836:	7804      	ldrb	r4, [r0, #0]
 8004838:	3301      	adds	r3, #1
 800483a:	428c      	cmp	r4, r1
 800483c:	d1f6      	bne.n	800482c <memchr+0x8>
 800483e:	bd10      	pop	{r4, pc}

08004840 <memcpy>:
 8004840:	440a      	add	r2, r1
 8004842:	4291      	cmp	r1, r2
 8004844:	f100 33ff 	add.w	r3, r0, #4294967295
 8004848:	d100      	bne.n	800484c <memcpy+0xc>
 800484a:	4770      	bx	lr
 800484c:	b510      	push	{r4, lr}
 800484e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004852:	4291      	cmp	r1, r2
 8004854:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004858:	d1f9      	bne.n	800484e <memcpy+0xe>
 800485a:	bd10      	pop	{r4, pc}

0800485c <memmove>:
 800485c:	4288      	cmp	r0, r1
 800485e:	b510      	push	{r4, lr}
 8004860:	eb01 0402 	add.w	r4, r1, r2
 8004864:	d902      	bls.n	800486c <memmove+0x10>
 8004866:	4284      	cmp	r4, r0
 8004868:	4623      	mov	r3, r4
 800486a:	d807      	bhi.n	800487c <memmove+0x20>
 800486c:	1e43      	subs	r3, r0, #1
 800486e:	42a1      	cmp	r1, r4
 8004870:	d008      	beq.n	8004884 <memmove+0x28>
 8004872:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004876:	f803 2f01 	strb.w	r2, [r3, #1]!
 800487a:	e7f8      	b.n	800486e <memmove+0x12>
 800487c:	4601      	mov	r1, r0
 800487e:	4402      	add	r2, r0
 8004880:	428a      	cmp	r2, r1
 8004882:	d100      	bne.n	8004886 <memmove+0x2a>
 8004884:	bd10      	pop	{r4, pc}
 8004886:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800488a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800488e:	e7f7      	b.n	8004880 <memmove+0x24>

08004890 <_free_r>:
 8004890:	b538      	push	{r3, r4, r5, lr}
 8004892:	4605      	mov	r5, r0
 8004894:	2900      	cmp	r1, #0
 8004896:	d040      	beq.n	800491a <_free_r+0x8a>
 8004898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800489c:	1f0c      	subs	r4, r1, #4
 800489e:	2b00      	cmp	r3, #0
 80048a0:	bfb8      	it	lt
 80048a2:	18e4      	addlt	r4, r4, r3
 80048a4:	f000 f910 	bl	8004ac8 <__malloc_lock>
 80048a8:	4a1c      	ldr	r2, [pc, #112]	; (800491c <_free_r+0x8c>)
 80048aa:	6813      	ldr	r3, [r2, #0]
 80048ac:	b933      	cbnz	r3, 80048bc <_free_r+0x2c>
 80048ae:	6063      	str	r3, [r4, #4]
 80048b0:	6014      	str	r4, [r2, #0]
 80048b2:	4628      	mov	r0, r5
 80048b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048b8:	f000 b90c 	b.w	8004ad4 <__malloc_unlock>
 80048bc:	42a3      	cmp	r3, r4
 80048be:	d908      	bls.n	80048d2 <_free_r+0x42>
 80048c0:	6820      	ldr	r0, [r4, #0]
 80048c2:	1821      	adds	r1, r4, r0
 80048c4:	428b      	cmp	r3, r1
 80048c6:	bf01      	itttt	eq
 80048c8:	6819      	ldreq	r1, [r3, #0]
 80048ca:	685b      	ldreq	r3, [r3, #4]
 80048cc:	1809      	addeq	r1, r1, r0
 80048ce:	6021      	streq	r1, [r4, #0]
 80048d0:	e7ed      	b.n	80048ae <_free_r+0x1e>
 80048d2:	461a      	mov	r2, r3
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	b10b      	cbz	r3, 80048dc <_free_r+0x4c>
 80048d8:	42a3      	cmp	r3, r4
 80048da:	d9fa      	bls.n	80048d2 <_free_r+0x42>
 80048dc:	6811      	ldr	r1, [r2, #0]
 80048de:	1850      	adds	r0, r2, r1
 80048e0:	42a0      	cmp	r0, r4
 80048e2:	d10b      	bne.n	80048fc <_free_r+0x6c>
 80048e4:	6820      	ldr	r0, [r4, #0]
 80048e6:	4401      	add	r1, r0
 80048e8:	1850      	adds	r0, r2, r1
 80048ea:	4283      	cmp	r3, r0
 80048ec:	6011      	str	r1, [r2, #0]
 80048ee:	d1e0      	bne.n	80048b2 <_free_r+0x22>
 80048f0:	6818      	ldr	r0, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	4401      	add	r1, r0
 80048f6:	6011      	str	r1, [r2, #0]
 80048f8:	6053      	str	r3, [r2, #4]
 80048fa:	e7da      	b.n	80048b2 <_free_r+0x22>
 80048fc:	d902      	bls.n	8004904 <_free_r+0x74>
 80048fe:	230c      	movs	r3, #12
 8004900:	602b      	str	r3, [r5, #0]
 8004902:	e7d6      	b.n	80048b2 <_free_r+0x22>
 8004904:	6820      	ldr	r0, [r4, #0]
 8004906:	1821      	adds	r1, r4, r0
 8004908:	428b      	cmp	r3, r1
 800490a:	bf01      	itttt	eq
 800490c:	6819      	ldreq	r1, [r3, #0]
 800490e:	685b      	ldreq	r3, [r3, #4]
 8004910:	1809      	addeq	r1, r1, r0
 8004912:	6021      	streq	r1, [r4, #0]
 8004914:	6063      	str	r3, [r4, #4]
 8004916:	6054      	str	r4, [r2, #4]
 8004918:	e7cb      	b.n	80048b2 <_free_r+0x22>
 800491a:	bd38      	pop	{r3, r4, r5, pc}
 800491c:	20000578 	.word	0x20000578

08004920 <sbrk_aligned>:
 8004920:	b570      	push	{r4, r5, r6, lr}
 8004922:	4e0e      	ldr	r6, [pc, #56]	; (800495c <sbrk_aligned+0x3c>)
 8004924:	460c      	mov	r4, r1
 8004926:	6831      	ldr	r1, [r6, #0]
 8004928:	4605      	mov	r5, r0
 800492a:	b911      	cbnz	r1, 8004932 <sbrk_aligned+0x12>
 800492c:	f000 f8bc 	bl	8004aa8 <_sbrk_r>
 8004930:	6030      	str	r0, [r6, #0]
 8004932:	4621      	mov	r1, r4
 8004934:	4628      	mov	r0, r5
 8004936:	f000 f8b7 	bl	8004aa8 <_sbrk_r>
 800493a:	1c43      	adds	r3, r0, #1
 800493c:	d00a      	beq.n	8004954 <sbrk_aligned+0x34>
 800493e:	1cc4      	adds	r4, r0, #3
 8004940:	f024 0403 	bic.w	r4, r4, #3
 8004944:	42a0      	cmp	r0, r4
 8004946:	d007      	beq.n	8004958 <sbrk_aligned+0x38>
 8004948:	1a21      	subs	r1, r4, r0
 800494a:	4628      	mov	r0, r5
 800494c:	f000 f8ac 	bl	8004aa8 <_sbrk_r>
 8004950:	3001      	adds	r0, #1
 8004952:	d101      	bne.n	8004958 <sbrk_aligned+0x38>
 8004954:	f04f 34ff 	mov.w	r4, #4294967295
 8004958:	4620      	mov	r0, r4
 800495a:	bd70      	pop	{r4, r5, r6, pc}
 800495c:	2000057c 	.word	0x2000057c

08004960 <_malloc_r>:
 8004960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004964:	1ccd      	adds	r5, r1, #3
 8004966:	f025 0503 	bic.w	r5, r5, #3
 800496a:	3508      	adds	r5, #8
 800496c:	2d0c      	cmp	r5, #12
 800496e:	bf38      	it	cc
 8004970:	250c      	movcc	r5, #12
 8004972:	2d00      	cmp	r5, #0
 8004974:	4607      	mov	r7, r0
 8004976:	db01      	blt.n	800497c <_malloc_r+0x1c>
 8004978:	42a9      	cmp	r1, r5
 800497a:	d905      	bls.n	8004988 <_malloc_r+0x28>
 800497c:	230c      	movs	r3, #12
 800497e:	2600      	movs	r6, #0
 8004980:	603b      	str	r3, [r7, #0]
 8004982:	4630      	mov	r0, r6
 8004984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004988:	4e2e      	ldr	r6, [pc, #184]	; (8004a44 <_malloc_r+0xe4>)
 800498a:	f000 f89d 	bl	8004ac8 <__malloc_lock>
 800498e:	6833      	ldr	r3, [r6, #0]
 8004990:	461c      	mov	r4, r3
 8004992:	bb34      	cbnz	r4, 80049e2 <_malloc_r+0x82>
 8004994:	4629      	mov	r1, r5
 8004996:	4638      	mov	r0, r7
 8004998:	f7ff ffc2 	bl	8004920 <sbrk_aligned>
 800499c:	1c43      	adds	r3, r0, #1
 800499e:	4604      	mov	r4, r0
 80049a0:	d14d      	bne.n	8004a3e <_malloc_r+0xde>
 80049a2:	6834      	ldr	r4, [r6, #0]
 80049a4:	4626      	mov	r6, r4
 80049a6:	2e00      	cmp	r6, #0
 80049a8:	d140      	bne.n	8004a2c <_malloc_r+0xcc>
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	4631      	mov	r1, r6
 80049ae:	4638      	mov	r0, r7
 80049b0:	eb04 0803 	add.w	r8, r4, r3
 80049b4:	f000 f878 	bl	8004aa8 <_sbrk_r>
 80049b8:	4580      	cmp	r8, r0
 80049ba:	d13a      	bne.n	8004a32 <_malloc_r+0xd2>
 80049bc:	6821      	ldr	r1, [r4, #0]
 80049be:	3503      	adds	r5, #3
 80049c0:	1a6d      	subs	r5, r5, r1
 80049c2:	f025 0503 	bic.w	r5, r5, #3
 80049c6:	3508      	adds	r5, #8
 80049c8:	2d0c      	cmp	r5, #12
 80049ca:	bf38      	it	cc
 80049cc:	250c      	movcc	r5, #12
 80049ce:	4638      	mov	r0, r7
 80049d0:	4629      	mov	r1, r5
 80049d2:	f7ff ffa5 	bl	8004920 <sbrk_aligned>
 80049d6:	3001      	adds	r0, #1
 80049d8:	d02b      	beq.n	8004a32 <_malloc_r+0xd2>
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	442b      	add	r3, r5
 80049de:	6023      	str	r3, [r4, #0]
 80049e0:	e00e      	b.n	8004a00 <_malloc_r+0xa0>
 80049e2:	6822      	ldr	r2, [r4, #0]
 80049e4:	1b52      	subs	r2, r2, r5
 80049e6:	d41e      	bmi.n	8004a26 <_malloc_r+0xc6>
 80049e8:	2a0b      	cmp	r2, #11
 80049ea:	d916      	bls.n	8004a1a <_malloc_r+0xba>
 80049ec:	1961      	adds	r1, r4, r5
 80049ee:	42a3      	cmp	r3, r4
 80049f0:	6025      	str	r5, [r4, #0]
 80049f2:	bf18      	it	ne
 80049f4:	6059      	strne	r1, [r3, #4]
 80049f6:	6863      	ldr	r3, [r4, #4]
 80049f8:	bf08      	it	eq
 80049fa:	6031      	streq	r1, [r6, #0]
 80049fc:	5162      	str	r2, [r4, r5]
 80049fe:	604b      	str	r3, [r1, #4]
 8004a00:	4638      	mov	r0, r7
 8004a02:	f104 060b 	add.w	r6, r4, #11
 8004a06:	f000 f865 	bl	8004ad4 <__malloc_unlock>
 8004a0a:	f026 0607 	bic.w	r6, r6, #7
 8004a0e:	1d23      	adds	r3, r4, #4
 8004a10:	1af2      	subs	r2, r6, r3
 8004a12:	d0b6      	beq.n	8004982 <_malloc_r+0x22>
 8004a14:	1b9b      	subs	r3, r3, r6
 8004a16:	50a3      	str	r3, [r4, r2]
 8004a18:	e7b3      	b.n	8004982 <_malloc_r+0x22>
 8004a1a:	6862      	ldr	r2, [r4, #4]
 8004a1c:	42a3      	cmp	r3, r4
 8004a1e:	bf0c      	ite	eq
 8004a20:	6032      	streq	r2, [r6, #0]
 8004a22:	605a      	strne	r2, [r3, #4]
 8004a24:	e7ec      	b.n	8004a00 <_malloc_r+0xa0>
 8004a26:	4623      	mov	r3, r4
 8004a28:	6864      	ldr	r4, [r4, #4]
 8004a2a:	e7b2      	b.n	8004992 <_malloc_r+0x32>
 8004a2c:	4634      	mov	r4, r6
 8004a2e:	6876      	ldr	r6, [r6, #4]
 8004a30:	e7b9      	b.n	80049a6 <_malloc_r+0x46>
 8004a32:	230c      	movs	r3, #12
 8004a34:	4638      	mov	r0, r7
 8004a36:	603b      	str	r3, [r7, #0]
 8004a38:	f000 f84c 	bl	8004ad4 <__malloc_unlock>
 8004a3c:	e7a1      	b.n	8004982 <_malloc_r+0x22>
 8004a3e:	6025      	str	r5, [r4, #0]
 8004a40:	e7de      	b.n	8004a00 <_malloc_r+0xa0>
 8004a42:	bf00      	nop
 8004a44:	20000578 	.word	0x20000578

08004a48 <_realloc_r>:
 8004a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a4c:	4680      	mov	r8, r0
 8004a4e:	4614      	mov	r4, r2
 8004a50:	460e      	mov	r6, r1
 8004a52:	b921      	cbnz	r1, 8004a5e <_realloc_r+0x16>
 8004a54:	4611      	mov	r1, r2
 8004a56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a5a:	f7ff bf81 	b.w	8004960 <_malloc_r>
 8004a5e:	b92a      	cbnz	r2, 8004a6c <_realloc_r+0x24>
 8004a60:	f7ff ff16 	bl	8004890 <_free_r>
 8004a64:	4625      	mov	r5, r4
 8004a66:	4628      	mov	r0, r5
 8004a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a6c:	f000 f838 	bl	8004ae0 <_malloc_usable_size_r>
 8004a70:	4284      	cmp	r4, r0
 8004a72:	4607      	mov	r7, r0
 8004a74:	d802      	bhi.n	8004a7c <_realloc_r+0x34>
 8004a76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a7a:	d812      	bhi.n	8004aa2 <_realloc_r+0x5a>
 8004a7c:	4621      	mov	r1, r4
 8004a7e:	4640      	mov	r0, r8
 8004a80:	f7ff ff6e 	bl	8004960 <_malloc_r>
 8004a84:	4605      	mov	r5, r0
 8004a86:	2800      	cmp	r0, #0
 8004a88:	d0ed      	beq.n	8004a66 <_realloc_r+0x1e>
 8004a8a:	42bc      	cmp	r4, r7
 8004a8c:	4622      	mov	r2, r4
 8004a8e:	4631      	mov	r1, r6
 8004a90:	bf28      	it	cs
 8004a92:	463a      	movcs	r2, r7
 8004a94:	f7ff fed4 	bl	8004840 <memcpy>
 8004a98:	4631      	mov	r1, r6
 8004a9a:	4640      	mov	r0, r8
 8004a9c:	f7ff fef8 	bl	8004890 <_free_r>
 8004aa0:	e7e1      	b.n	8004a66 <_realloc_r+0x1e>
 8004aa2:	4635      	mov	r5, r6
 8004aa4:	e7df      	b.n	8004a66 <_realloc_r+0x1e>
	...

08004aa8 <_sbrk_r>:
 8004aa8:	b538      	push	{r3, r4, r5, lr}
 8004aaa:	2300      	movs	r3, #0
 8004aac:	4d05      	ldr	r5, [pc, #20]	; (8004ac4 <_sbrk_r+0x1c>)
 8004aae:	4604      	mov	r4, r0
 8004ab0:	4608      	mov	r0, r1
 8004ab2:	602b      	str	r3, [r5, #0]
 8004ab4:	f7fd f920 	bl	8001cf8 <_sbrk>
 8004ab8:	1c43      	adds	r3, r0, #1
 8004aba:	d102      	bne.n	8004ac2 <_sbrk_r+0x1a>
 8004abc:	682b      	ldr	r3, [r5, #0]
 8004abe:	b103      	cbz	r3, 8004ac2 <_sbrk_r+0x1a>
 8004ac0:	6023      	str	r3, [r4, #0]
 8004ac2:	bd38      	pop	{r3, r4, r5, pc}
 8004ac4:	20000580 	.word	0x20000580

08004ac8 <__malloc_lock>:
 8004ac8:	4801      	ldr	r0, [pc, #4]	; (8004ad0 <__malloc_lock+0x8>)
 8004aca:	f000 b811 	b.w	8004af0 <__retarget_lock_acquire_recursive>
 8004ace:	bf00      	nop
 8004ad0:	20000584 	.word	0x20000584

08004ad4 <__malloc_unlock>:
 8004ad4:	4801      	ldr	r0, [pc, #4]	; (8004adc <__malloc_unlock+0x8>)
 8004ad6:	f000 b80c 	b.w	8004af2 <__retarget_lock_release_recursive>
 8004ada:	bf00      	nop
 8004adc:	20000584 	.word	0x20000584

08004ae0 <_malloc_usable_size_r>:
 8004ae0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ae4:	1f18      	subs	r0, r3, #4
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	bfbc      	itt	lt
 8004aea:	580b      	ldrlt	r3, [r1, r0]
 8004aec:	18c0      	addlt	r0, r0, r3
 8004aee:	4770      	bx	lr

08004af0 <__retarget_lock_acquire_recursive>:
 8004af0:	4770      	bx	lr

08004af2 <__retarget_lock_release_recursive>:
 8004af2:	4770      	bx	lr

08004af4 <pow>:
 8004af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004af8:	4614      	mov	r4, r2
 8004afa:	461d      	mov	r5, r3
 8004afc:	4680      	mov	r8, r0
 8004afe:	4689      	mov	r9, r1
 8004b00:	f000 f886 	bl	8004c10 <__ieee754_pow>
 8004b04:	4622      	mov	r2, r4
 8004b06:	4606      	mov	r6, r0
 8004b08:	460f      	mov	r7, r1
 8004b0a:	462b      	mov	r3, r5
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	4629      	mov	r1, r5
 8004b10:	f7fc f828 	bl	8000b64 <__aeabi_dcmpun>
 8004b14:	bbc8      	cbnz	r0, 8004b8a <pow+0x96>
 8004b16:	2200      	movs	r2, #0
 8004b18:	2300      	movs	r3, #0
 8004b1a:	4640      	mov	r0, r8
 8004b1c:	4649      	mov	r1, r9
 8004b1e:	f7fb ffef 	bl	8000b00 <__aeabi_dcmpeq>
 8004b22:	b1b8      	cbz	r0, 8004b54 <pow+0x60>
 8004b24:	2200      	movs	r2, #0
 8004b26:	2300      	movs	r3, #0
 8004b28:	4620      	mov	r0, r4
 8004b2a:	4629      	mov	r1, r5
 8004b2c:	f7fb ffe8 	bl	8000b00 <__aeabi_dcmpeq>
 8004b30:	2800      	cmp	r0, #0
 8004b32:	d141      	bne.n	8004bb8 <pow+0xc4>
 8004b34:	4620      	mov	r0, r4
 8004b36:	4629      	mov	r1, r5
 8004b38:	f000 fe5f 	bl	80057fa <finite>
 8004b3c:	b328      	cbz	r0, 8004b8a <pow+0x96>
 8004b3e:	2200      	movs	r2, #0
 8004b40:	2300      	movs	r3, #0
 8004b42:	4620      	mov	r0, r4
 8004b44:	4629      	mov	r1, r5
 8004b46:	f7fb ffe5 	bl	8000b14 <__aeabi_dcmplt>
 8004b4a:	b1f0      	cbz	r0, 8004b8a <pow+0x96>
 8004b4c:	f7ff fb26 	bl	800419c <__errno>
 8004b50:	2322      	movs	r3, #34	; 0x22
 8004b52:	e019      	b.n	8004b88 <pow+0x94>
 8004b54:	4630      	mov	r0, r6
 8004b56:	4639      	mov	r1, r7
 8004b58:	f000 fe4f 	bl	80057fa <finite>
 8004b5c:	b9c8      	cbnz	r0, 8004b92 <pow+0x9e>
 8004b5e:	4640      	mov	r0, r8
 8004b60:	4649      	mov	r1, r9
 8004b62:	f000 fe4a 	bl	80057fa <finite>
 8004b66:	b1a0      	cbz	r0, 8004b92 <pow+0x9e>
 8004b68:	4620      	mov	r0, r4
 8004b6a:	4629      	mov	r1, r5
 8004b6c:	f000 fe45 	bl	80057fa <finite>
 8004b70:	b178      	cbz	r0, 8004b92 <pow+0x9e>
 8004b72:	4632      	mov	r2, r6
 8004b74:	463b      	mov	r3, r7
 8004b76:	4630      	mov	r0, r6
 8004b78:	4639      	mov	r1, r7
 8004b7a:	f7fb fff3 	bl	8000b64 <__aeabi_dcmpun>
 8004b7e:	2800      	cmp	r0, #0
 8004b80:	d0e4      	beq.n	8004b4c <pow+0x58>
 8004b82:	f7ff fb0b 	bl	800419c <__errno>
 8004b86:	2321      	movs	r3, #33	; 0x21
 8004b88:	6003      	str	r3, [r0, #0]
 8004b8a:	4630      	mov	r0, r6
 8004b8c:	4639      	mov	r1, r7
 8004b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b92:	2200      	movs	r2, #0
 8004b94:	2300      	movs	r3, #0
 8004b96:	4630      	mov	r0, r6
 8004b98:	4639      	mov	r1, r7
 8004b9a:	f7fb ffb1 	bl	8000b00 <__aeabi_dcmpeq>
 8004b9e:	2800      	cmp	r0, #0
 8004ba0:	d0f3      	beq.n	8004b8a <pow+0x96>
 8004ba2:	4640      	mov	r0, r8
 8004ba4:	4649      	mov	r1, r9
 8004ba6:	f000 fe28 	bl	80057fa <finite>
 8004baa:	2800      	cmp	r0, #0
 8004bac:	d0ed      	beq.n	8004b8a <pow+0x96>
 8004bae:	4620      	mov	r0, r4
 8004bb0:	4629      	mov	r1, r5
 8004bb2:	f000 fe22 	bl	80057fa <finite>
 8004bb6:	e7c8      	b.n	8004b4a <pow+0x56>
 8004bb8:	2600      	movs	r6, #0
 8004bba:	4f01      	ldr	r7, [pc, #4]	; (8004bc0 <pow+0xcc>)
 8004bbc:	e7e5      	b.n	8004b8a <pow+0x96>
 8004bbe:	bf00      	nop
 8004bc0:	3ff00000 	.word	0x3ff00000

08004bc4 <sqrt>:
 8004bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc6:	4606      	mov	r6, r0
 8004bc8:	460f      	mov	r7, r1
 8004bca:	f000 fd37 	bl	800563c <__ieee754_sqrt>
 8004bce:	4632      	mov	r2, r6
 8004bd0:	4604      	mov	r4, r0
 8004bd2:	460d      	mov	r5, r1
 8004bd4:	463b      	mov	r3, r7
 8004bd6:	4630      	mov	r0, r6
 8004bd8:	4639      	mov	r1, r7
 8004bda:	f7fb ffc3 	bl	8000b64 <__aeabi_dcmpun>
 8004bde:	b990      	cbnz	r0, 8004c06 <sqrt+0x42>
 8004be0:	2200      	movs	r2, #0
 8004be2:	2300      	movs	r3, #0
 8004be4:	4630      	mov	r0, r6
 8004be6:	4639      	mov	r1, r7
 8004be8:	f7fb ff94 	bl	8000b14 <__aeabi_dcmplt>
 8004bec:	b158      	cbz	r0, 8004c06 <sqrt+0x42>
 8004bee:	f7ff fad5 	bl	800419c <__errno>
 8004bf2:	2321      	movs	r3, #33	; 0x21
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	6003      	str	r3, [r0, #0]
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	4610      	mov	r0, r2
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	f7fb fe41 	bl	8000884 <__aeabi_ddiv>
 8004c02:	4604      	mov	r4, r0
 8004c04:	460d      	mov	r5, r1
 8004c06:	4620      	mov	r0, r4
 8004c08:	4629      	mov	r1, r5
 8004c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c0c:	0000      	movs	r0, r0
	...

08004c10 <__ieee754_pow>:
 8004c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c14:	b093      	sub	sp, #76	; 0x4c
 8004c16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c1a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8004c1e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8004c22:	4689      	mov	r9, r1
 8004c24:	ea56 0102 	orrs.w	r1, r6, r2
 8004c28:	4680      	mov	r8, r0
 8004c2a:	d111      	bne.n	8004c50 <__ieee754_pow+0x40>
 8004c2c:	1803      	adds	r3, r0, r0
 8004c2e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8004c32:	4152      	adcs	r2, r2
 8004c34:	4299      	cmp	r1, r3
 8004c36:	4b82      	ldr	r3, [pc, #520]	; (8004e40 <__ieee754_pow+0x230>)
 8004c38:	4193      	sbcs	r3, r2
 8004c3a:	f080 84b9 	bcs.w	80055b0 <__ieee754_pow+0x9a0>
 8004c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c42:	4640      	mov	r0, r8
 8004c44:	4649      	mov	r1, r9
 8004c46:	f7fb fb3d 	bl	80002c4 <__adddf3>
 8004c4a:	4683      	mov	fp, r0
 8004c4c:	468c      	mov	ip, r1
 8004c4e:	e06f      	b.n	8004d30 <__ieee754_pow+0x120>
 8004c50:	4b7c      	ldr	r3, [pc, #496]	; (8004e44 <__ieee754_pow+0x234>)
 8004c52:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8004c56:	429c      	cmp	r4, r3
 8004c58:	464d      	mov	r5, r9
 8004c5a:	4682      	mov	sl, r0
 8004c5c:	dc06      	bgt.n	8004c6c <__ieee754_pow+0x5c>
 8004c5e:	d101      	bne.n	8004c64 <__ieee754_pow+0x54>
 8004c60:	2800      	cmp	r0, #0
 8004c62:	d1ec      	bne.n	8004c3e <__ieee754_pow+0x2e>
 8004c64:	429e      	cmp	r6, r3
 8004c66:	dc01      	bgt.n	8004c6c <__ieee754_pow+0x5c>
 8004c68:	d10f      	bne.n	8004c8a <__ieee754_pow+0x7a>
 8004c6a:	b172      	cbz	r2, 8004c8a <__ieee754_pow+0x7a>
 8004c6c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004c70:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8004c74:	ea55 050a 	orrs.w	r5, r5, sl
 8004c78:	d1e1      	bne.n	8004c3e <__ieee754_pow+0x2e>
 8004c7a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8004c7e:	18db      	adds	r3, r3, r3
 8004c80:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8004c84:	4152      	adcs	r2, r2
 8004c86:	429d      	cmp	r5, r3
 8004c88:	e7d5      	b.n	8004c36 <__ieee754_pow+0x26>
 8004c8a:	2d00      	cmp	r5, #0
 8004c8c:	da39      	bge.n	8004d02 <__ieee754_pow+0xf2>
 8004c8e:	4b6e      	ldr	r3, [pc, #440]	; (8004e48 <__ieee754_pow+0x238>)
 8004c90:	429e      	cmp	r6, r3
 8004c92:	dc52      	bgt.n	8004d3a <__ieee754_pow+0x12a>
 8004c94:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004c98:	429e      	cmp	r6, r3
 8004c9a:	f340 849c 	ble.w	80055d6 <__ieee754_pow+0x9c6>
 8004c9e:	1533      	asrs	r3, r6, #20
 8004ca0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004ca4:	2b14      	cmp	r3, #20
 8004ca6:	dd0f      	ble.n	8004cc8 <__ieee754_pow+0xb8>
 8004ca8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004cac:	fa22 f103 	lsr.w	r1, r2, r3
 8004cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	f040 848e 	bne.w	80055d6 <__ieee754_pow+0x9c6>
 8004cba:	f001 0101 	and.w	r1, r1, #1
 8004cbe:	f1c1 0302 	rsb	r3, r1, #2
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	b182      	cbz	r2, 8004ce8 <__ieee754_pow+0xd8>
 8004cc6:	e05d      	b.n	8004d84 <__ieee754_pow+0x174>
 8004cc8:	2a00      	cmp	r2, #0
 8004cca:	d159      	bne.n	8004d80 <__ieee754_pow+0x170>
 8004ccc:	f1c3 0314 	rsb	r3, r3, #20
 8004cd0:	fa46 f103 	asr.w	r1, r6, r3
 8004cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd8:	42b3      	cmp	r3, r6
 8004cda:	f040 8479 	bne.w	80055d0 <__ieee754_pow+0x9c0>
 8004cde:	f001 0101 	and.w	r1, r1, #1
 8004ce2:	f1c1 0302 	rsb	r3, r1, #2
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	4b58      	ldr	r3, [pc, #352]	; (8004e4c <__ieee754_pow+0x23c>)
 8004cea:	429e      	cmp	r6, r3
 8004cec:	d132      	bne.n	8004d54 <__ieee754_pow+0x144>
 8004cee:	2f00      	cmp	r7, #0
 8004cf0:	f280 846a 	bge.w	80055c8 <__ieee754_pow+0x9b8>
 8004cf4:	4642      	mov	r2, r8
 8004cf6:	464b      	mov	r3, r9
 8004cf8:	2000      	movs	r0, #0
 8004cfa:	4954      	ldr	r1, [pc, #336]	; (8004e4c <__ieee754_pow+0x23c>)
 8004cfc:	f7fb fdc2 	bl	8000884 <__aeabi_ddiv>
 8004d00:	e7a3      	b.n	8004c4a <__ieee754_pow+0x3a>
 8004d02:	2300      	movs	r3, #0
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	2a00      	cmp	r2, #0
 8004d08:	d13c      	bne.n	8004d84 <__ieee754_pow+0x174>
 8004d0a:	4b4e      	ldr	r3, [pc, #312]	; (8004e44 <__ieee754_pow+0x234>)
 8004d0c:	429e      	cmp	r6, r3
 8004d0e:	d1eb      	bne.n	8004ce8 <__ieee754_pow+0xd8>
 8004d10:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004d14:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004d18:	ea53 030a 	orrs.w	r3, r3, sl
 8004d1c:	f000 8448 	beq.w	80055b0 <__ieee754_pow+0x9a0>
 8004d20:	4b4b      	ldr	r3, [pc, #300]	; (8004e50 <__ieee754_pow+0x240>)
 8004d22:	429c      	cmp	r4, r3
 8004d24:	dd0b      	ble.n	8004d3e <__ieee754_pow+0x12e>
 8004d26:	2f00      	cmp	r7, #0
 8004d28:	f2c0 8448 	blt.w	80055bc <__ieee754_pow+0x9ac>
 8004d2c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8004d30:	4658      	mov	r0, fp
 8004d32:	4661      	mov	r1, ip
 8004d34:	b013      	add	sp, #76	; 0x4c
 8004d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	e7e2      	b.n	8004d04 <__ieee754_pow+0xf4>
 8004d3e:	2f00      	cmp	r7, #0
 8004d40:	f04f 0b00 	mov.w	fp, #0
 8004d44:	f04f 0c00 	mov.w	ip, #0
 8004d48:	daf2      	bge.n	8004d30 <__ieee754_pow+0x120>
 8004d4a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8004d4e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8004d52:	e7ed      	b.n	8004d30 <__ieee754_pow+0x120>
 8004d54:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8004d58:	d106      	bne.n	8004d68 <__ieee754_pow+0x158>
 8004d5a:	4642      	mov	r2, r8
 8004d5c:	464b      	mov	r3, r9
 8004d5e:	4640      	mov	r0, r8
 8004d60:	4649      	mov	r1, r9
 8004d62:	f7fb fc65 	bl	8000630 <__aeabi_dmul>
 8004d66:	e770      	b.n	8004c4a <__ieee754_pow+0x3a>
 8004d68:	4b3a      	ldr	r3, [pc, #232]	; (8004e54 <__ieee754_pow+0x244>)
 8004d6a:	429f      	cmp	r7, r3
 8004d6c:	d10a      	bne.n	8004d84 <__ieee754_pow+0x174>
 8004d6e:	2d00      	cmp	r5, #0
 8004d70:	db08      	blt.n	8004d84 <__ieee754_pow+0x174>
 8004d72:	4640      	mov	r0, r8
 8004d74:	4649      	mov	r1, r9
 8004d76:	b013      	add	sp, #76	; 0x4c
 8004d78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d7c:	f000 bc5e 	b.w	800563c <__ieee754_sqrt>
 8004d80:	2300      	movs	r3, #0
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	4640      	mov	r0, r8
 8004d86:	4649      	mov	r1, r9
 8004d88:	f000 fd34 	bl	80057f4 <fabs>
 8004d8c:	4683      	mov	fp, r0
 8004d8e:	468c      	mov	ip, r1
 8004d90:	f1ba 0f00 	cmp.w	sl, #0
 8004d94:	d128      	bne.n	8004de8 <__ieee754_pow+0x1d8>
 8004d96:	b124      	cbz	r4, 8004da2 <__ieee754_pow+0x192>
 8004d98:	4b2c      	ldr	r3, [pc, #176]	; (8004e4c <__ieee754_pow+0x23c>)
 8004d9a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d122      	bne.n	8004de8 <__ieee754_pow+0x1d8>
 8004da2:	2f00      	cmp	r7, #0
 8004da4:	da07      	bge.n	8004db6 <__ieee754_pow+0x1a6>
 8004da6:	465a      	mov	r2, fp
 8004da8:	4663      	mov	r3, ip
 8004daa:	2000      	movs	r0, #0
 8004dac:	4927      	ldr	r1, [pc, #156]	; (8004e4c <__ieee754_pow+0x23c>)
 8004dae:	f7fb fd69 	bl	8000884 <__aeabi_ddiv>
 8004db2:	4683      	mov	fp, r0
 8004db4:	468c      	mov	ip, r1
 8004db6:	2d00      	cmp	r5, #0
 8004db8:	daba      	bge.n	8004d30 <__ieee754_pow+0x120>
 8004dba:	9b00      	ldr	r3, [sp, #0]
 8004dbc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004dc0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004dc4:	4323      	orrs	r3, r4
 8004dc6:	d108      	bne.n	8004dda <__ieee754_pow+0x1ca>
 8004dc8:	465a      	mov	r2, fp
 8004dca:	4663      	mov	r3, ip
 8004dcc:	4658      	mov	r0, fp
 8004dce:	4661      	mov	r1, ip
 8004dd0:	f7fb fa76 	bl	80002c0 <__aeabi_dsub>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	e790      	b.n	8004cfc <__ieee754_pow+0xec>
 8004dda:	9b00      	ldr	r3, [sp, #0]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d1a7      	bne.n	8004d30 <__ieee754_pow+0x120>
 8004de0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8004de4:	469c      	mov	ip, r3
 8004de6:	e7a3      	b.n	8004d30 <__ieee754_pow+0x120>
 8004de8:	0feb      	lsrs	r3, r5, #31
 8004dea:	3b01      	subs	r3, #1
 8004dec:	930c      	str	r3, [sp, #48]	; 0x30
 8004dee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004df0:	9b00      	ldr	r3, [sp, #0]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	d104      	bne.n	8004e00 <__ieee754_pow+0x1f0>
 8004df6:	4642      	mov	r2, r8
 8004df8:	464b      	mov	r3, r9
 8004dfa:	4640      	mov	r0, r8
 8004dfc:	4649      	mov	r1, r9
 8004dfe:	e7e7      	b.n	8004dd0 <__ieee754_pow+0x1c0>
 8004e00:	4b15      	ldr	r3, [pc, #84]	; (8004e58 <__ieee754_pow+0x248>)
 8004e02:	429e      	cmp	r6, r3
 8004e04:	f340 80f6 	ble.w	8004ff4 <__ieee754_pow+0x3e4>
 8004e08:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004e0c:	429e      	cmp	r6, r3
 8004e0e:	4b10      	ldr	r3, [pc, #64]	; (8004e50 <__ieee754_pow+0x240>)
 8004e10:	dd09      	ble.n	8004e26 <__ieee754_pow+0x216>
 8004e12:	429c      	cmp	r4, r3
 8004e14:	dc0c      	bgt.n	8004e30 <__ieee754_pow+0x220>
 8004e16:	2f00      	cmp	r7, #0
 8004e18:	da0c      	bge.n	8004e34 <__ieee754_pow+0x224>
 8004e1a:	2000      	movs	r0, #0
 8004e1c:	b013      	add	sp, #76	; 0x4c
 8004e1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e22:	f000 bce2 	b.w	80057ea <__math_oflow>
 8004e26:	429c      	cmp	r4, r3
 8004e28:	dbf5      	blt.n	8004e16 <__ieee754_pow+0x206>
 8004e2a:	4b08      	ldr	r3, [pc, #32]	; (8004e4c <__ieee754_pow+0x23c>)
 8004e2c:	429c      	cmp	r4, r3
 8004e2e:	dd15      	ble.n	8004e5c <__ieee754_pow+0x24c>
 8004e30:	2f00      	cmp	r7, #0
 8004e32:	dcf2      	bgt.n	8004e1a <__ieee754_pow+0x20a>
 8004e34:	2000      	movs	r0, #0
 8004e36:	b013      	add	sp, #76	; 0x4c
 8004e38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e3c:	f000 bcd0 	b.w	80057e0 <__math_uflow>
 8004e40:	fff00000 	.word	0xfff00000
 8004e44:	7ff00000 	.word	0x7ff00000
 8004e48:	433fffff 	.word	0x433fffff
 8004e4c:	3ff00000 	.word	0x3ff00000
 8004e50:	3fefffff 	.word	0x3fefffff
 8004e54:	3fe00000 	.word	0x3fe00000
 8004e58:	41e00000 	.word	0x41e00000
 8004e5c:	4661      	mov	r1, ip
 8004e5e:	2200      	movs	r2, #0
 8004e60:	4658      	mov	r0, fp
 8004e62:	4b5f      	ldr	r3, [pc, #380]	; (8004fe0 <__ieee754_pow+0x3d0>)
 8004e64:	f7fb fa2c 	bl	80002c0 <__aeabi_dsub>
 8004e68:	a355      	add	r3, pc, #340	; (adr r3, 8004fc0 <__ieee754_pow+0x3b0>)
 8004e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6e:	4604      	mov	r4, r0
 8004e70:	460d      	mov	r5, r1
 8004e72:	f7fb fbdd 	bl	8000630 <__aeabi_dmul>
 8004e76:	a354      	add	r3, pc, #336	; (adr r3, 8004fc8 <__ieee754_pow+0x3b8>)
 8004e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7c:	4606      	mov	r6, r0
 8004e7e:	460f      	mov	r7, r1
 8004e80:	4620      	mov	r0, r4
 8004e82:	4629      	mov	r1, r5
 8004e84:	f7fb fbd4 	bl	8000630 <__aeabi_dmul>
 8004e88:	2200      	movs	r2, #0
 8004e8a:	4682      	mov	sl, r0
 8004e8c:	468b      	mov	fp, r1
 8004e8e:	4620      	mov	r0, r4
 8004e90:	4629      	mov	r1, r5
 8004e92:	4b54      	ldr	r3, [pc, #336]	; (8004fe4 <__ieee754_pow+0x3d4>)
 8004e94:	f7fb fbcc 	bl	8000630 <__aeabi_dmul>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	a14c      	add	r1, pc, #304	; (adr r1, 8004fd0 <__ieee754_pow+0x3c0>)
 8004e9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ea2:	f7fb fa0d 	bl	80002c0 <__aeabi_dsub>
 8004ea6:	4622      	mov	r2, r4
 8004ea8:	462b      	mov	r3, r5
 8004eaa:	f7fb fbc1 	bl	8000630 <__aeabi_dmul>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	2000      	movs	r0, #0
 8004eb4:	494c      	ldr	r1, [pc, #304]	; (8004fe8 <__ieee754_pow+0x3d8>)
 8004eb6:	f7fb fa03 	bl	80002c0 <__aeabi_dsub>
 8004eba:	4622      	mov	r2, r4
 8004ebc:	462b      	mov	r3, r5
 8004ebe:	4680      	mov	r8, r0
 8004ec0:	4689      	mov	r9, r1
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	4629      	mov	r1, r5
 8004ec6:	f7fb fbb3 	bl	8000630 <__aeabi_dmul>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	4640      	mov	r0, r8
 8004ed0:	4649      	mov	r1, r9
 8004ed2:	f7fb fbad 	bl	8000630 <__aeabi_dmul>
 8004ed6:	a340      	add	r3, pc, #256	; (adr r3, 8004fd8 <__ieee754_pow+0x3c8>)
 8004ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004edc:	f7fb fba8 	bl	8000630 <__aeabi_dmul>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4650      	mov	r0, sl
 8004ee6:	4659      	mov	r1, fp
 8004ee8:	f7fb f9ea 	bl	80002c0 <__aeabi_dsub>
 8004eec:	f04f 0a00 	mov.w	sl, #0
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4604      	mov	r4, r0
 8004ef6:	460d      	mov	r5, r1
 8004ef8:	4630      	mov	r0, r6
 8004efa:	4639      	mov	r1, r7
 8004efc:	f7fb f9e2 	bl	80002c4 <__adddf3>
 8004f00:	4632      	mov	r2, r6
 8004f02:	463b      	mov	r3, r7
 8004f04:	4650      	mov	r0, sl
 8004f06:	468b      	mov	fp, r1
 8004f08:	f7fb f9da 	bl	80002c0 <__aeabi_dsub>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4620      	mov	r0, r4
 8004f12:	4629      	mov	r1, r5
 8004f14:	f7fb f9d4 	bl	80002c0 <__aeabi_dsub>
 8004f18:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004f1c:	9b00      	ldr	r3, [sp, #0]
 8004f1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f20:	3b01      	subs	r3, #1
 8004f22:	4313      	orrs	r3, r2
 8004f24:	f04f 0600 	mov.w	r6, #0
 8004f28:	f04f 0200 	mov.w	r2, #0
 8004f2c:	bf0c      	ite	eq
 8004f2e:	4b2f      	ldreq	r3, [pc, #188]	; (8004fec <__ieee754_pow+0x3dc>)
 8004f30:	4b2b      	ldrne	r3, [pc, #172]	; (8004fe0 <__ieee754_pow+0x3d0>)
 8004f32:	4604      	mov	r4, r0
 8004f34:	460d      	mov	r5, r1
 8004f36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f3a:	e9cd 2300 	strd	r2, r3, [sp]
 8004f3e:	4632      	mov	r2, r6
 8004f40:	463b      	mov	r3, r7
 8004f42:	f7fb f9bd 	bl	80002c0 <__aeabi_dsub>
 8004f46:	4652      	mov	r2, sl
 8004f48:	465b      	mov	r3, fp
 8004f4a:	f7fb fb71 	bl	8000630 <__aeabi_dmul>
 8004f4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f52:	4680      	mov	r8, r0
 8004f54:	4689      	mov	r9, r1
 8004f56:	4620      	mov	r0, r4
 8004f58:	4629      	mov	r1, r5
 8004f5a:	f7fb fb69 	bl	8000630 <__aeabi_dmul>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	460b      	mov	r3, r1
 8004f62:	4640      	mov	r0, r8
 8004f64:	4649      	mov	r1, r9
 8004f66:	f7fb f9ad 	bl	80002c4 <__adddf3>
 8004f6a:	4632      	mov	r2, r6
 8004f6c:	463b      	mov	r3, r7
 8004f6e:	4680      	mov	r8, r0
 8004f70:	4689      	mov	r9, r1
 8004f72:	4650      	mov	r0, sl
 8004f74:	4659      	mov	r1, fp
 8004f76:	f7fb fb5b 	bl	8000630 <__aeabi_dmul>
 8004f7a:	4604      	mov	r4, r0
 8004f7c:	460d      	mov	r5, r1
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4602      	mov	r2, r0
 8004f82:	4649      	mov	r1, r9
 8004f84:	4640      	mov	r0, r8
 8004f86:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004f8a:	f7fb f99b 	bl	80002c4 <__adddf3>
 8004f8e:	4b18      	ldr	r3, [pc, #96]	; (8004ff0 <__ieee754_pow+0x3e0>)
 8004f90:	4682      	mov	sl, r0
 8004f92:	4299      	cmp	r1, r3
 8004f94:	460f      	mov	r7, r1
 8004f96:	460e      	mov	r6, r1
 8004f98:	f340 82e5 	ble.w	8005566 <__ieee754_pow+0x956>
 8004f9c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004fa0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004fa4:	4303      	orrs	r3, r0
 8004fa6:	f000 81df 	beq.w	8005368 <__ieee754_pow+0x758>
 8004faa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	f7fb fdaf 	bl	8000b14 <__aeabi_dcmplt>
 8004fb6:	3800      	subs	r0, #0
 8004fb8:	bf18      	it	ne
 8004fba:	2001      	movne	r0, #1
 8004fbc:	e72e      	b.n	8004e1c <__ieee754_pow+0x20c>
 8004fbe:	bf00      	nop
 8004fc0:	60000000 	.word	0x60000000
 8004fc4:	3ff71547 	.word	0x3ff71547
 8004fc8:	f85ddf44 	.word	0xf85ddf44
 8004fcc:	3e54ae0b 	.word	0x3e54ae0b
 8004fd0:	55555555 	.word	0x55555555
 8004fd4:	3fd55555 	.word	0x3fd55555
 8004fd8:	652b82fe 	.word	0x652b82fe
 8004fdc:	3ff71547 	.word	0x3ff71547
 8004fe0:	3ff00000 	.word	0x3ff00000
 8004fe4:	3fd00000 	.word	0x3fd00000
 8004fe8:	3fe00000 	.word	0x3fe00000
 8004fec:	bff00000 	.word	0xbff00000
 8004ff0:	408fffff 	.word	0x408fffff
 8004ff4:	4bd2      	ldr	r3, [pc, #840]	; (8005340 <__ieee754_pow+0x730>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	402b      	ands	r3, r5
 8004ffa:	b943      	cbnz	r3, 800500e <__ieee754_pow+0x3fe>
 8004ffc:	4658      	mov	r0, fp
 8004ffe:	4661      	mov	r1, ip
 8005000:	4bd0      	ldr	r3, [pc, #832]	; (8005344 <__ieee754_pow+0x734>)
 8005002:	f7fb fb15 	bl	8000630 <__aeabi_dmul>
 8005006:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800500a:	4683      	mov	fp, r0
 800500c:	460c      	mov	r4, r1
 800500e:	1523      	asrs	r3, r4, #20
 8005010:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005014:	4413      	add	r3, r2
 8005016:	930b      	str	r3, [sp, #44]	; 0x2c
 8005018:	4bcb      	ldr	r3, [pc, #812]	; (8005348 <__ieee754_pow+0x738>)
 800501a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800501e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005022:	429c      	cmp	r4, r3
 8005024:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005028:	dd08      	ble.n	800503c <__ieee754_pow+0x42c>
 800502a:	4bc8      	ldr	r3, [pc, #800]	; (800534c <__ieee754_pow+0x73c>)
 800502c:	429c      	cmp	r4, r3
 800502e:	f340 8199 	ble.w	8005364 <__ieee754_pow+0x754>
 8005032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005034:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005038:	3301      	adds	r3, #1
 800503a:	930b      	str	r3, [sp, #44]	; 0x2c
 800503c:	2600      	movs	r6, #0
 800503e:	00f3      	lsls	r3, r6, #3
 8005040:	930d      	str	r3, [sp, #52]	; 0x34
 8005042:	4bc3      	ldr	r3, [pc, #780]	; (8005350 <__ieee754_pow+0x740>)
 8005044:	4658      	mov	r0, fp
 8005046:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800504a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800504e:	4629      	mov	r1, r5
 8005050:	461a      	mov	r2, r3
 8005052:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8005056:	4623      	mov	r3, r4
 8005058:	f7fb f932 	bl	80002c0 <__aeabi_dsub>
 800505c:	46da      	mov	sl, fp
 800505e:	462b      	mov	r3, r5
 8005060:	4652      	mov	r2, sl
 8005062:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005066:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800506a:	f7fb f92b 	bl	80002c4 <__adddf3>
 800506e:	4602      	mov	r2, r0
 8005070:	460b      	mov	r3, r1
 8005072:	2000      	movs	r0, #0
 8005074:	49b7      	ldr	r1, [pc, #732]	; (8005354 <__ieee754_pow+0x744>)
 8005076:	f7fb fc05 	bl	8000884 <__aeabi_ddiv>
 800507a:	4602      	mov	r2, r0
 800507c:	460b      	mov	r3, r1
 800507e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005082:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005086:	f7fb fad3 	bl	8000630 <__aeabi_dmul>
 800508a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800508e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8005092:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005096:	2300      	movs	r3, #0
 8005098:	2200      	movs	r2, #0
 800509a:	46ab      	mov	fp, r5
 800509c:	106d      	asrs	r5, r5, #1
 800509e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80050a2:	9304      	str	r3, [sp, #16]
 80050a4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80050a8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80050ac:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80050b0:	4640      	mov	r0, r8
 80050b2:	4649      	mov	r1, r9
 80050b4:	4614      	mov	r4, r2
 80050b6:	461d      	mov	r5, r3
 80050b8:	f7fb faba 	bl	8000630 <__aeabi_dmul>
 80050bc:	4602      	mov	r2, r0
 80050be:	460b      	mov	r3, r1
 80050c0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80050c4:	f7fb f8fc 	bl	80002c0 <__aeabi_dsub>
 80050c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80050cc:	4606      	mov	r6, r0
 80050ce:	460f      	mov	r7, r1
 80050d0:	4620      	mov	r0, r4
 80050d2:	4629      	mov	r1, r5
 80050d4:	f7fb f8f4 	bl	80002c0 <__aeabi_dsub>
 80050d8:	4602      	mov	r2, r0
 80050da:	460b      	mov	r3, r1
 80050dc:	4650      	mov	r0, sl
 80050de:	4659      	mov	r1, fp
 80050e0:	f7fb f8ee 	bl	80002c0 <__aeabi_dsub>
 80050e4:	4642      	mov	r2, r8
 80050e6:	464b      	mov	r3, r9
 80050e8:	f7fb faa2 	bl	8000630 <__aeabi_dmul>
 80050ec:	4602      	mov	r2, r0
 80050ee:	460b      	mov	r3, r1
 80050f0:	4630      	mov	r0, r6
 80050f2:	4639      	mov	r1, r7
 80050f4:	f7fb f8e4 	bl	80002c0 <__aeabi_dsub>
 80050f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80050fc:	f7fb fa98 	bl	8000630 <__aeabi_dmul>
 8005100:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005104:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005108:	4610      	mov	r0, r2
 800510a:	4619      	mov	r1, r3
 800510c:	f7fb fa90 	bl	8000630 <__aeabi_dmul>
 8005110:	a379      	add	r3, pc, #484	; (adr r3, 80052f8 <__ieee754_pow+0x6e8>)
 8005112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005116:	4604      	mov	r4, r0
 8005118:	460d      	mov	r5, r1
 800511a:	f7fb fa89 	bl	8000630 <__aeabi_dmul>
 800511e:	a378      	add	r3, pc, #480	; (adr r3, 8005300 <__ieee754_pow+0x6f0>)
 8005120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005124:	f7fb f8ce 	bl	80002c4 <__adddf3>
 8005128:	4622      	mov	r2, r4
 800512a:	462b      	mov	r3, r5
 800512c:	f7fb fa80 	bl	8000630 <__aeabi_dmul>
 8005130:	a375      	add	r3, pc, #468	; (adr r3, 8005308 <__ieee754_pow+0x6f8>)
 8005132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005136:	f7fb f8c5 	bl	80002c4 <__adddf3>
 800513a:	4622      	mov	r2, r4
 800513c:	462b      	mov	r3, r5
 800513e:	f7fb fa77 	bl	8000630 <__aeabi_dmul>
 8005142:	a373      	add	r3, pc, #460	; (adr r3, 8005310 <__ieee754_pow+0x700>)
 8005144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005148:	f7fb f8bc 	bl	80002c4 <__adddf3>
 800514c:	4622      	mov	r2, r4
 800514e:	462b      	mov	r3, r5
 8005150:	f7fb fa6e 	bl	8000630 <__aeabi_dmul>
 8005154:	a370      	add	r3, pc, #448	; (adr r3, 8005318 <__ieee754_pow+0x708>)
 8005156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515a:	f7fb f8b3 	bl	80002c4 <__adddf3>
 800515e:	4622      	mov	r2, r4
 8005160:	462b      	mov	r3, r5
 8005162:	f7fb fa65 	bl	8000630 <__aeabi_dmul>
 8005166:	a36e      	add	r3, pc, #440	; (adr r3, 8005320 <__ieee754_pow+0x710>)
 8005168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516c:	f7fb f8aa 	bl	80002c4 <__adddf3>
 8005170:	4622      	mov	r2, r4
 8005172:	4606      	mov	r6, r0
 8005174:	460f      	mov	r7, r1
 8005176:	462b      	mov	r3, r5
 8005178:	4620      	mov	r0, r4
 800517a:	4629      	mov	r1, r5
 800517c:	f7fb fa58 	bl	8000630 <__aeabi_dmul>
 8005180:	4602      	mov	r2, r0
 8005182:	460b      	mov	r3, r1
 8005184:	4630      	mov	r0, r6
 8005186:	4639      	mov	r1, r7
 8005188:	f7fb fa52 	bl	8000630 <__aeabi_dmul>
 800518c:	4604      	mov	r4, r0
 800518e:	460d      	mov	r5, r1
 8005190:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005194:	4642      	mov	r2, r8
 8005196:	464b      	mov	r3, r9
 8005198:	f7fb f894 	bl	80002c4 <__adddf3>
 800519c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80051a0:	f7fb fa46 	bl	8000630 <__aeabi_dmul>
 80051a4:	4622      	mov	r2, r4
 80051a6:	462b      	mov	r3, r5
 80051a8:	f7fb f88c 	bl	80002c4 <__adddf3>
 80051ac:	4642      	mov	r2, r8
 80051ae:	4606      	mov	r6, r0
 80051b0:	460f      	mov	r7, r1
 80051b2:	464b      	mov	r3, r9
 80051b4:	4640      	mov	r0, r8
 80051b6:	4649      	mov	r1, r9
 80051b8:	f7fb fa3a 	bl	8000630 <__aeabi_dmul>
 80051bc:	2200      	movs	r2, #0
 80051be:	4b66      	ldr	r3, [pc, #408]	; (8005358 <__ieee754_pow+0x748>)
 80051c0:	4682      	mov	sl, r0
 80051c2:	468b      	mov	fp, r1
 80051c4:	f7fb f87e 	bl	80002c4 <__adddf3>
 80051c8:	4632      	mov	r2, r6
 80051ca:	463b      	mov	r3, r7
 80051cc:	f7fb f87a 	bl	80002c4 <__adddf3>
 80051d0:	2400      	movs	r4, #0
 80051d2:	460d      	mov	r5, r1
 80051d4:	4622      	mov	r2, r4
 80051d6:	460b      	mov	r3, r1
 80051d8:	4640      	mov	r0, r8
 80051da:	4649      	mov	r1, r9
 80051dc:	f7fb fa28 	bl	8000630 <__aeabi_dmul>
 80051e0:	2200      	movs	r2, #0
 80051e2:	4680      	mov	r8, r0
 80051e4:	4689      	mov	r9, r1
 80051e6:	4620      	mov	r0, r4
 80051e8:	4629      	mov	r1, r5
 80051ea:	4b5b      	ldr	r3, [pc, #364]	; (8005358 <__ieee754_pow+0x748>)
 80051ec:	f7fb f868 	bl	80002c0 <__aeabi_dsub>
 80051f0:	4652      	mov	r2, sl
 80051f2:	465b      	mov	r3, fp
 80051f4:	f7fb f864 	bl	80002c0 <__aeabi_dsub>
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	4630      	mov	r0, r6
 80051fe:	4639      	mov	r1, r7
 8005200:	f7fb f85e 	bl	80002c0 <__aeabi_dsub>
 8005204:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005208:	f7fb fa12 	bl	8000630 <__aeabi_dmul>
 800520c:	4622      	mov	r2, r4
 800520e:	4606      	mov	r6, r0
 8005210:	460f      	mov	r7, r1
 8005212:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005216:	462b      	mov	r3, r5
 8005218:	f7fb fa0a 	bl	8000630 <__aeabi_dmul>
 800521c:	4602      	mov	r2, r0
 800521e:	460b      	mov	r3, r1
 8005220:	4630      	mov	r0, r6
 8005222:	4639      	mov	r1, r7
 8005224:	f7fb f84e 	bl	80002c4 <__adddf3>
 8005228:	2400      	movs	r4, #0
 800522a:	4606      	mov	r6, r0
 800522c:	460f      	mov	r7, r1
 800522e:	4602      	mov	r2, r0
 8005230:	460b      	mov	r3, r1
 8005232:	4640      	mov	r0, r8
 8005234:	4649      	mov	r1, r9
 8005236:	f7fb f845 	bl	80002c4 <__adddf3>
 800523a:	a33b      	add	r3, pc, #236	; (adr r3, 8005328 <__ieee754_pow+0x718>)
 800523c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005240:	4620      	mov	r0, r4
 8005242:	460d      	mov	r5, r1
 8005244:	f7fb f9f4 	bl	8000630 <__aeabi_dmul>
 8005248:	4642      	mov	r2, r8
 800524a:	464b      	mov	r3, r9
 800524c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005250:	4620      	mov	r0, r4
 8005252:	4629      	mov	r1, r5
 8005254:	f7fb f834 	bl	80002c0 <__aeabi_dsub>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4630      	mov	r0, r6
 800525e:	4639      	mov	r1, r7
 8005260:	f7fb f82e 	bl	80002c0 <__aeabi_dsub>
 8005264:	a332      	add	r3, pc, #200	; (adr r3, 8005330 <__ieee754_pow+0x720>)
 8005266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526a:	f7fb f9e1 	bl	8000630 <__aeabi_dmul>
 800526e:	a332      	add	r3, pc, #200	; (adr r3, 8005338 <__ieee754_pow+0x728>)
 8005270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005274:	4606      	mov	r6, r0
 8005276:	460f      	mov	r7, r1
 8005278:	4620      	mov	r0, r4
 800527a:	4629      	mov	r1, r5
 800527c:	f7fb f9d8 	bl	8000630 <__aeabi_dmul>
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	4630      	mov	r0, r6
 8005286:	4639      	mov	r1, r7
 8005288:	f7fb f81c 	bl	80002c4 <__adddf3>
 800528c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800528e:	4b33      	ldr	r3, [pc, #204]	; (800535c <__ieee754_pow+0x74c>)
 8005290:	f04f 0a00 	mov.w	sl, #0
 8005294:	4413      	add	r3, r2
 8005296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529a:	f7fb f813 	bl	80002c4 <__adddf3>
 800529e:	4680      	mov	r8, r0
 80052a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80052a2:	4689      	mov	r9, r1
 80052a4:	f7fb f95a 	bl	800055c <__aeabi_i2d>
 80052a8:	4604      	mov	r4, r0
 80052aa:	460d      	mov	r5, r1
 80052ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80052ae:	4b2c      	ldr	r3, [pc, #176]	; (8005360 <__ieee754_pow+0x750>)
 80052b0:	4413      	add	r3, r2
 80052b2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80052b6:	4642      	mov	r2, r8
 80052b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80052bc:	464b      	mov	r3, r9
 80052be:	f7fb f801 	bl	80002c4 <__adddf3>
 80052c2:	4632      	mov	r2, r6
 80052c4:	463b      	mov	r3, r7
 80052c6:	f7fa fffd 	bl	80002c4 <__adddf3>
 80052ca:	4622      	mov	r2, r4
 80052cc:	462b      	mov	r3, r5
 80052ce:	f7fa fff9 	bl	80002c4 <__adddf3>
 80052d2:	4622      	mov	r2, r4
 80052d4:	462b      	mov	r3, r5
 80052d6:	4650      	mov	r0, sl
 80052d8:	468b      	mov	fp, r1
 80052da:	f7fa fff1 	bl	80002c0 <__aeabi_dsub>
 80052de:	4632      	mov	r2, r6
 80052e0:	463b      	mov	r3, r7
 80052e2:	f7fa ffed 	bl	80002c0 <__aeabi_dsub>
 80052e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052ea:	f7fa ffe9 	bl	80002c0 <__aeabi_dsub>
 80052ee:	4602      	mov	r2, r0
 80052f0:	460b      	mov	r3, r1
 80052f2:	4640      	mov	r0, r8
 80052f4:	4649      	mov	r1, r9
 80052f6:	e60d      	b.n	8004f14 <__ieee754_pow+0x304>
 80052f8:	4a454eef 	.word	0x4a454eef
 80052fc:	3fca7e28 	.word	0x3fca7e28
 8005300:	93c9db65 	.word	0x93c9db65
 8005304:	3fcd864a 	.word	0x3fcd864a
 8005308:	a91d4101 	.word	0xa91d4101
 800530c:	3fd17460 	.word	0x3fd17460
 8005310:	518f264d 	.word	0x518f264d
 8005314:	3fd55555 	.word	0x3fd55555
 8005318:	db6fabff 	.word	0xdb6fabff
 800531c:	3fdb6db6 	.word	0x3fdb6db6
 8005320:	33333303 	.word	0x33333303
 8005324:	3fe33333 	.word	0x3fe33333
 8005328:	e0000000 	.word	0xe0000000
 800532c:	3feec709 	.word	0x3feec709
 8005330:	dc3a03fd 	.word	0xdc3a03fd
 8005334:	3feec709 	.word	0x3feec709
 8005338:	145b01f5 	.word	0x145b01f5
 800533c:	be3e2fe0 	.word	0xbe3e2fe0
 8005340:	7ff00000 	.word	0x7ff00000
 8005344:	43400000 	.word	0x43400000
 8005348:	0003988e 	.word	0x0003988e
 800534c:	000bb679 	.word	0x000bb679
 8005350:	08006708 	.word	0x08006708
 8005354:	3ff00000 	.word	0x3ff00000
 8005358:	40080000 	.word	0x40080000
 800535c:	08006728 	.word	0x08006728
 8005360:	08006718 	.word	0x08006718
 8005364:	2601      	movs	r6, #1
 8005366:	e66a      	b.n	800503e <__ieee754_pow+0x42e>
 8005368:	a39d      	add	r3, pc, #628	; (adr r3, 80055e0 <__ieee754_pow+0x9d0>)
 800536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536e:	4640      	mov	r0, r8
 8005370:	4649      	mov	r1, r9
 8005372:	f7fa ffa7 	bl	80002c4 <__adddf3>
 8005376:	4622      	mov	r2, r4
 8005378:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800537c:	462b      	mov	r3, r5
 800537e:	4650      	mov	r0, sl
 8005380:	4639      	mov	r1, r7
 8005382:	f7fa ff9d 	bl	80002c0 <__aeabi_dsub>
 8005386:	4602      	mov	r2, r0
 8005388:	460b      	mov	r3, r1
 800538a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800538e:	f7fb fbdf 	bl	8000b50 <__aeabi_dcmpgt>
 8005392:	2800      	cmp	r0, #0
 8005394:	f47f ae09 	bne.w	8004faa <__ieee754_pow+0x39a>
 8005398:	4aa3      	ldr	r2, [pc, #652]	; (8005628 <__ieee754_pow+0xa18>)
 800539a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800539e:	4293      	cmp	r3, r2
 80053a0:	f340 8101 	ble.w	80055a6 <__ieee754_pow+0x996>
 80053a4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80053a8:	2000      	movs	r0, #0
 80053aa:	151b      	asrs	r3, r3, #20
 80053ac:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80053b0:	fa4a f303 	asr.w	r3, sl, r3
 80053b4:	4433      	add	r3, r6
 80053b6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80053ba:	4f9c      	ldr	r7, [pc, #624]	; (800562c <__ieee754_pow+0xa1c>)
 80053bc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80053c0:	4117      	asrs	r7, r2
 80053c2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80053c6:	ea23 0107 	bic.w	r1, r3, r7
 80053ca:	f1c2 0214 	rsb	r2, r2, #20
 80053ce:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80053d2:	460b      	mov	r3, r1
 80053d4:	fa4a fa02 	asr.w	sl, sl, r2
 80053d8:	2e00      	cmp	r6, #0
 80053da:	4602      	mov	r2, r0
 80053dc:	4629      	mov	r1, r5
 80053de:	4620      	mov	r0, r4
 80053e0:	bfb8      	it	lt
 80053e2:	f1ca 0a00 	rsblt	sl, sl, #0
 80053e6:	f7fa ff6b 	bl	80002c0 <__aeabi_dsub>
 80053ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053f2:	2400      	movs	r4, #0
 80053f4:	4642      	mov	r2, r8
 80053f6:	464b      	mov	r3, r9
 80053f8:	f7fa ff64 	bl	80002c4 <__adddf3>
 80053fc:	a37a      	add	r3, pc, #488	; (adr r3, 80055e8 <__ieee754_pow+0x9d8>)
 80053fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005402:	4620      	mov	r0, r4
 8005404:	460d      	mov	r5, r1
 8005406:	f7fb f913 	bl	8000630 <__aeabi_dmul>
 800540a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800540e:	4606      	mov	r6, r0
 8005410:	460f      	mov	r7, r1
 8005412:	4620      	mov	r0, r4
 8005414:	4629      	mov	r1, r5
 8005416:	f7fa ff53 	bl	80002c0 <__aeabi_dsub>
 800541a:	4602      	mov	r2, r0
 800541c:	460b      	mov	r3, r1
 800541e:	4640      	mov	r0, r8
 8005420:	4649      	mov	r1, r9
 8005422:	f7fa ff4d 	bl	80002c0 <__aeabi_dsub>
 8005426:	a372      	add	r3, pc, #456	; (adr r3, 80055f0 <__ieee754_pow+0x9e0>)
 8005428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542c:	f7fb f900 	bl	8000630 <__aeabi_dmul>
 8005430:	a371      	add	r3, pc, #452	; (adr r3, 80055f8 <__ieee754_pow+0x9e8>)
 8005432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005436:	4680      	mov	r8, r0
 8005438:	4689      	mov	r9, r1
 800543a:	4620      	mov	r0, r4
 800543c:	4629      	mov	r1, r5
 800543e:	f7fb f8f7 	bl	8000630 <__aeabi_dmul>
 8005442:	4602      	mov	r2, r0
 8005444:	460b      	mov	r3, r1
 8005446:	4640      	mov	r0, r8
 8005448:	4649      	mov	r1, r9
 800544a:	f7fa ff3b 	bl	80002c4 <__adddf3>
 800544e:	4604      	mov	r4, r0
 8005450:	460d      	mov	r5, r1
 8005452:	4602      	mov	r2, r0
 8005454:	460b      	mov	r3, r1
 8005456:	4630      	mov	r0, r6
 8005458:	4639      	mov	r1, r7
 800545a:	f7fa ff33 	bl	80002c4 <__adddf3>
 800545e:	4632      	mov	r2, r6
 8005460:	463b      	mov	r3, r7
 8005462:	4680      	mov	r8, r0
 8005464:	4689      	mov	r9, r1
 8005466:	f7fa ff2b 	bl	80002c0 <__aeabi_dsub>
 800546a:	4602      	mov	r2, r0
 800546c:	460b      	mov	r3, r1
 800546e:	4620      	mov	r0, r4
 8005470:	4629      	mov	r1, r5
 8005472:	f7fa ff25 	bl	80002c0 <__aeabi_dsub>
 8005476:	4642      	mov	r2, r8
 8005478:	4606      	mov	r6, r0
 800547a:	460f      	mov	r7, r1
 800547c:	464b      	mov	r3, r9
 800547e:	4640      	mov	r0, r8
 8005480:	4649      	mov	r1, r9
 8005482:	f7fb f8d5 	bl	8000630 <__aeabi_dmul>
 8005486:	a35e      	add	r3, pc, #376	; (adr r3, 8005600 <__ieee754_pow+0x9f0>)
 8005488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548c:	4604      	mov	r4, r0
 800548e:	460d      	mov	r5, r1
 8005490:	f7fb f8ce 	bl	8000630 <__aeabi_dmul>
 8005494:	a35c      	add	r3, pc, #368	; (adr r3, 8005608 <__ieee754_pow+0x9f8>)
 8005496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549a:	f7fa ff11 	bl	80002c0 <__aeabi_dsub>
 800549e:	4622      	mov	r2, r4
 80054a0:	462b      	mov	r3, r5
 80054a2:	f7fb f8c5 	bl	8000630 <__aeabi_dmul>
 80054a6:	a35a      	add	r3, pc, #360	; (adr r3, 8005610 <__ieee754_pow+0xa00>)
 80054a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ac:	f7fa ff0a 	bl	80002c4 <__adddf3>
 80054b0:	4622      	mov	r2, r4
 80054b2:	462b      	mov	r3, r5
 80054b4:	f7fb f8bc 	bl	8000630 <__aeabi_dmul>
 80054b8:	a357      	add	r3, pc, #348	; (adr r3, 8005618 <__ieee754_pow+0xa08>)
 80054ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054be:	f7fa feff 	bl	80002c0 <__aeabi_dsub>
 80054c2:	4622      	mov	r2, r4
 80054c4:	462b      	mov	r3, r5
 80054c6:	f7fb f8b3 	bl	8000630 <__aeabi_dmul>
 80054ca:	a355      	add	r3, pc, #340	; (adr r3, 8005620 <__ieee754_pow+0xa10>)
 80054cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d0:	f7fa fef8 	bl	80002c4 <__adddf3>
 80054d4:	4622      	mov	r2, r4
 80054d6:	462b      	mov	r3, r5
 80054d8:	f7fb f8aa 	bl	8000630 <__aeabi_dmul>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	4640      	mov	r0, r8
 80054e2:	4649      	mov	r1, r9
 80054e4:	f7fa feec 	bl	80002c0 <__aeabi_dsub>
 80054e8:	4604      	mov	r4, r0
 80054ea:	460d      	mov	r5, r1
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	4640      	mov	r0, r8
 80054f2:	4649      	mov	r1, r9
 80054f4:	f7fb f89c 	bl	8000630 <__aeabi_dmul>
 80054f8:	2200      	movs	r2, #0
 80054fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005502:	4620      	mov	r0, r4
 8005504:	4629      	mov	r1, r5
 8005506:	f7fa fedb 	bl	80002c0 <__aeabi_dsub>
 800550a:	4602      	mov	r2, r0
 800550c:	460b      	mov	r3, r1
 800550e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005512:	f7fb f9b7 	bl	8000884 <__aeabi_ddiv>
 8005516:	4632      	mov	r2, r6
 8005518:	4604      	mov	r4, r0
 800551a:	460d      	mov	r5, r1
 800551c:	463b      	mov	r3, r7
 800551e:	4640      	mov	r0, r8
 8005520:	4649      	mov	r1, r9
 8005522:	f7fb f885 	bl	8000630 <__aeabi_dmul>
 8005526:	4632      	mov	r2, r6
 8005528:	463b      	mov	r3, r7
 800552a:	f7fa fecb 	bl	80002c4 <__adddf3>
 800552e:	4602      	mov	r2, r0
 8005530:	460b      	mov	r3, r1
 8005532:	4620      	mov	r0, r4
 8005534:	4629      	mov	r1, r5
 8005536:	f7fa fec3 	bl	80002c0 <__aeabi_dsub>
 800553a:	4642      	mov	r2, r8
 800553c:	464b      	mov	r3, r9
 800553e:	f7fa febf 	bl	80002c0 <__aeabi_dsub>
 8005542:	4602      	mov	r2, r0
 8005544:	460b      	mov	r3, r1
 8005546:	2000      	movs	r0, #0
 8005548:	4939      	ldr	r1, [pc, #228]	; (8005630 <__ieee754_pow+0xa20>)
 800554a:	f7fa feb9 	bl	80002c0 <__aeabi_dsub>
 800554e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8005552:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005556:	da29      	bge.n	80055ac <__ieee754_pow+0x99c>
 8005558:	4652      	mov	r2, sl
 800555a:	f000 f955 	bl	8005808 <scalbn>
 800555e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005562:	f7ff bbfe 	b.w	8004d62 <__ieee754_pow+0x152>
 8005566:	4b33      	ldr	r3, [pc, #204]	; (8005634 <__ieee754_pow+0xa24>)
 8005568:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800556c:	429f      	cmp	r7, r3
 800556e:	f77f af13 	ble.w	8005398 <__ieee754_pow+0x788>
 8005572:	4b31      	ldr	r3, [pc, #196]	; (8005638 <__ieee754_pow+0xa28>)
 8005574:	440b      	add	r3, r1
 8005576:	4303      	orrs	r3, r0
 8005578:	d009      	beq.n	800558e <__ieee754_pow+0x97e>
 800557a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800557e:	2200      	movs	r2, #0
 8005580:	2300      	movs	r3, #0
 8005582:	f7fb fac7 	bl	8000b14 <__aeabi_dcmplt>
 8005586:	3800      	subs	r0, #0
 8005588:	bf18      	it	ne
 800558a:	2001      	movne	r0, #1
 800558c:	e453      	b.n	8004e36 <__ieee754_pow+0x226>
 800558e:	4622      	mov	r2, r4
 8005590:	462b      	mov	r3, r5
 8005592:	f7fa fe95 	bl	80002c0 <__aeabi_dsub>
 8005596:	4642      	mov	r2, r8
 8005598:	464b      	mov	r3, r9
 800559a:	f7fb facf 	bl	8000b3c <__aeabi_dcmpge>
 800559e:	2800      	cmp	r0, #0
 80055a0:	f43f aefa 	beq.w	8005398 <__ieee754_pow+0x788>
 80055a4:	e7e9      	b.n	800557a <__ieee754_pow+0x96a>
 80055a6:	f04f 0a00 	mov.w	sl, #0
 80055aa:	e720      	b.n	80053ee <__ieee754_pow+0x7de>
 80055ac:	4621      	mov	r1, r4
 80055ae:	e7d6      	b.n	800555e <__ieee754_pow+0x94e>
 80055b0:	f04f 0b00 	mov.w	fp, #0
 80055b4:	f8df c078 	ldr.w	ip, [pc, #120]	; 8005630 <__ieee754_pow+0xa20>
 80055b8:	f7ff bbba 	b.w	8004d30 <__ieee754_pow+0x120>
 80055bc:	f04f 0b00 	mov.w	fp, #0
 80055c0:	f04f 0c00 	mov.w	ip, #0
 80055c4:	f7ff bbb4 	b.w	8004d30 <__ieee754_pow+0x120>
 80055c8:	4640      	mov	r0, r8
 80055ca:	4649      	mov	r1, r9
 80055cc:	f7ff bb3d 	b.w	8004c4a <__ieee754_pow+0x3a>
 80055d0:	9200      	str	r2, [sp, #0]
 80055d2:	f7ff bb89 	b.w	8004ce8 <__ieee754_pow+0xd8>
 80055d6:	2300      	movs	r3, #0
 80055d8:	f7ff bb73 	b.w	8004cc2 <__ieee754_pow+0xb2>
 80055dc:	f3af 8000 	nop.w
 80055e0:	652b82fe 	.word	0x652b82fe
 80055e4:	3c971547 	.word	0x3c971547
 80055e8:	00000000 	.word	0x00000000
 80055ec:	3fe62e43 	.word	0x3fe62e43
 80055f0:	fefa39ef 	.word	0xfefa39ef
 80055f4:	3fe62e42 	.word	0x3fe62e42
 80055f8:	0ca86c39 	.word	0x0ca86c39
 80055fc:	be205c61 	.word	0xbe205c61
 8005600:	72bea4d0 	.word	0x72bea4d0
 8005604:	3e663769 	.word	0x3e663769
 8005608:	c5d26bf1 	.word	0xc5d26bf1
 800560c:	3ebbbd41 	.word	0x3ebbbd41
 8005610:	af25de2c 	.word	0xaf25de2c
 8005614:	3f11566a 	.word	0x3f11566a
 8005618:	16bebd93 	.word	0x16bebd93
 800561c:	3f66c16c 	.word	0x3f66c16c
 8005620:	5555553e 	.word	0x5555553e
 8005624:	3fc55555 	.word	0x3fc55555
 8005628:	3fe00000 	.word	0x3fe00000
 800562c:	000fffff 	.word	0x000fffff
 8005630:	3ff00000 	.word	0x3ff00000
 8005634:	4090cbff 	.word	0x4090cbff
 8005638:	3f6f3400 	.word	0x3f6f3400

0800563c <__ieee754_sqrt>:
 800563c:	f8df c158 	ldr.w	ip, [pc, #344]	; 8005798 <__ieee754_sqrt+0x15c>
 8005640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005644:	ea3c 0c01 	bics.w	ip, ip, r1
 8005648:	4606      	mov	r6, r0
 800564a:	460d      	mov	r5, r1
 800564c:	460c      	mov	r4, r1
 800564e:	460a      	mov	r2, r1
 8005650:	4607      	mov	r7, r0
 8005652:	4603      	mov	r3, r0
 8005654:	d10f      	bne.n	8005676 <__ieee754_sqrt+0x3a>
 8005656:	4602      	mov	r2, r0
 8005658:	460b      	mov	r3, r1
 800565a:	f7fa ffe9 	bl	8000630 <__aeabi_dmul>
 800565e:	4602      	mov	r2, r0
 8005660:	460b      	mov	r3, r1
 8005662:	4630      	mov	r0, r6
 8005664:	4629      	mov	r1, r5
 8005666:	f7fa fe2d 	bl	80002c4 <__adddf3>
 800566a:	4606      	mov	r6, r0
 800566c:	460d      	mov	r5, r1
 800566e:	4630      	mov	r0, r6
 8005670:	4629      	mov	r1, r5
 8005672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005676:	2900      	cmp	r1, #0
 8005678:	dc0e      	bgt.n	8005698 <__ieee754_sqrt+0x5c>
 800567a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800567e:	ea5c 0707 	orrs.w	r7, ip, r7
 8005682:	d0f4      	beq.n	800566e <__ieee754_sqrt+0x32>
 8005684:	b141      	cbz	r1, 8005698 <__ieee754_sqrt+0x5c>
 8005686:	4602      	mov	r2, r0
 8005688:	460b      	mov	r3, r1
 800568a:	f7fa fe19 	bl	80002c0 <__aeabi_dsub>
 800568e:	4602      	mov	r2, r0
 8005690:	460b      	mov	r3, r1
 8005692:	f7fb f8f7 	bl	8000884 <__aeabi_ddiv>
 8005696:	e7e8      	b.n	800566a <__ieee754_sqrt+0x2e>
 8005698:	1521      	asrs	r1, r4, #20
 800569a:	d075      	beq.n	8005788 <__ieee754_sqrt+0x14c>
 800569c:	07cc      	lsls	r4, r1, #31
 800569e:	f04f 0400 	mov.w	r4, #0
 80056a2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80056a6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80056aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80056ae:	bf5e      	ittt	pl
 80056b0:	0fd9      	lsrpl	r1, r3, #31
 80056b2:	005b      	lslpl	r3, r3, #1
 80056b4:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 80056b8:	0fd9      	lsrs	r1, r3, #31
 80056ba:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80056be:	2516      	movs	r5, #22
 80056c0:	4620      	mov	r0, r4
 80056c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056c6:	107f      	asrs	r7, r7, #1
 80056c8:	005b      	lsls	r3, r3, #1
 80056ca:	1846      	adds	r6, r0, r1
 80056cc:	4296      	cmp	r6, r2
 80056ce:	bfde      	ittt	le
 80056d0:	1b92      	suble	r2, r2, r6
 80056d2:	1870      	addle	r0, r6, r1
 80056d4:	1864      	addle	r4, r4, r1
 80056d6:	0052      	lsls	r2, r2, #1
 80056d8:	3d01      	subs	r5, #1
 80056da:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80056de:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80056e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80056e6:	d1f0      	bne.n	80056ca <__ieee754_sqrt+0x8e>
 80056e8:	4629      	mov	r1, r5
 80056ea:	f04f 0e20 	mov.w	lr, #32
 80056ee:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80056f2:	4282      	cmp	r2, r0
 80056f4:	eb06 0c05 	add.w	ip, r6, r5
 80056f8:	dc02      	bgt.n	8005700 <__ieee754_sqrt+0xc4>
 80056fa:	d113      	bne.n	8005724 <__ieee754_sqrt+0xe8>
 80056fc:	459c      	cmp	ip, r3
 80056fe:	d811      	bhi.n	8005724 <__ieee754_sqrt+0xe8>
 8005700:	f1bc 0f00 	cmp.w	ip, #0
 8005704:	eb0c 0506 	add.w	r5, ip, r6
 8005708:	da43      	bge.n	8005792 <__ieee754_sqrt+0x156>
 800570a:	2d00      	cmp	r5, #0
 800570c:	db41      	blt.n	8005792 <__ieee754_sqrt+0x156>
 800570e:	f100 0801 	add.w	r8, r0, #1
 8005712:	1a12      	subs	r2, r2, r0
 8005714:	4640      	mov	r0, r8
 8005716:	459c      	cmp	ip, r3
 8005718:	bf88      	it	hi
 800571a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800571e:	eba3 030c 	sub.w	r3, r3, ip
 8005722:	4431      	add	r1, r6
 8005724:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8005728:	f1be 0e01 	subs.w	lr, lr, #1
 800572c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8005730:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005734:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005738:	d1db      	bne.n	80056f2 <__ieee754_sqrt+0xb6>
 800573a:	4313      	orrs	r3, r2
 800573c:	d006      	beq.n	800574c <__ieee754_sqrt+0x110>
 800573e:	1c48      	adds	r0, r1, #1
 8005740:	bf0b      	itete	eq
 8005742:	4671      	moveq	r1, lr
 8005744:	3101      	addne	r1, #1
 8005746:	3401      	addeq	r4, #1
 8005748:	f021 0101 	bicne.w	r1, r1, #1
 800574c:	1063      	asrs	r3, r4, #1
 800574e:	0849      	lsrs	r1, r1, #1
 8005750:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005754:	07e2      	lsls	r2, r4, #31
 8005756:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800575a:	bf48      	it	mi
 800575c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8005760:	460e      	mov	r6, r1
 8005762:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005766:	e782      	b.n	800566e <__ieee754_sqrt+0x32>
 8005768:	0ada      	lsrs	r2, r3, #11
 800576a:	3815      	subs	r0, #21
 800576c:	055b      	lsls	r3, r3, #21
 800576e:	2a00      	cmp	r2, #0
 8005770:	d0fa      	beq.n	8005768 <__ieee754_sqrt+0x12c>
 8005772:	02d5      	lsls	r5, r2, #11
 8005774:	d50a      	bpl.n	800578c <__ieee754_sqrt+0x150>
 8005776:	f1c1 0420 	rsb	r4, r1, #32
 800577a:	fa23 f404 	lsr.w	r4, r3, r4
 800577e:	1e4d      	subs	r5, r1, #1
 8005780:	408b      	lsls	r3, r1
 8005782:	4322      	orrs	r2, r4
 8005784:	1b41      	subs	r1, r0, r5
 8005786:	e789      	b.n	800569c <__ieee754_sqrt+0x60>
 8005788:	4608      	mov	r0, r1
 800578a:	e7f0      	b.n	800576e <__ieee754_sqrt+0x132>
 800578c:	0052      	lsls	r2, r2, #1
 800578e:	3101      	adds	r1, #1
 8005790:	e7ef      	b.n	8005772 <__ieee754_sqrt+0x136>
 8005792:	4680      	mov	r8, r0
 8005794:	e7bd      	b.n	8005712 <__ieee754_sqrt+0xd6>
 8005796:	bf00      	nop
 8005798:	7ff00000 	.word	0x7ff00000

0800579c <with_errno>:
 800579c:	b570      	push	{r4, r5, r6, lr}
 800579e:	4604      	mov	r4, r0
 80057a0:	460d      	mov	r5, r1
 80057a2:	4616      	mov	r6, r2
 80057a4:	f7fe fcfa 	bl	800419c <__errno>
 80057a8:	4629      	mov	r1, r5
 80057aa:	6006      	str	r6, [r0, #0]
 80057ac:	4620      	mov	r0, r4
 80057ae:	bd70      	pop	{r4, r5, r6, pc}

080057b0 <xflow>:
 80057b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057b2:	4615      	mov	r5, r2
 80057b4:	461c      	mov	r4, r3
 80057b6:	b180      	cbz	r0, 80057da <xflow+0x2a>
 80057b8:	4610      	mov	r0, r2
 80057ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80057be:	e9cd 0100 	strd	r0, r1, [sp]
 80057c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057c6:	4628      	mov	r0, r5
 80057c8:	4621      	mov	r1, r4
 80057ca:	f7fa ff31 	bl	8000630 <__aeabi_dmul>
 80057ce:	2222      	movs	r2, #34	; 0x22
 80057d0:	b003      	add	sp, #12
 80057d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057d6:	f7ff bfe1 	b.w	800579c <with_errno>
 80057da:	4610      	mov	r0, r2
 80057dc:	4619      	mov	r1, r3
 80057de:	e7ee      	b.n	80057be <xflow+0xe>

080057e0 <__math_uflow>:
 80057e0:	2200      	movs	r2, #0
 80057e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80057e6:	f7ff bfe3 	b.w	80057b0 <xflow>

080057ea <__math_oflow>:
 80057ea:	2200      	movs	r2, #0
 80057ec:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80057f0:	f7ff bfde 	b.w	80057b0 <xflow>

080057f4 <fabs>:
 80057f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80057f8:	4770      	bx	lr

080057fa <finite>:
 80057fa:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80057fe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005802:	0fc0      	lsrs	r0, r0, #31
 8005804:	4770      	bx	lr
	...

08005808 <scalbn>:
 8005808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800580a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800580e:	4604      	mov	r4, r0
 8005810:	460d      	mov	r5, r1
 8005812:	4617      	mov	r7, r2
 8005814:	460b      	mov	r3, r1
 8005816:	b996      	cbnz	r6, 800583e <scalbn+0x36>
 8005818:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800581c:	4303      	orrs	r3, r0
 800581e:	d039      	beq.n	8005894 <scalbn+0x8c>
 8005820:	4b33      	ldr	r3, [pc, #204]	; (80058f0 <scalbn+0xe8>)
 8005822:	2200      	movs	r2, #0
 8005824:	f7fa ff04 	bl	8000630 <__aeabi_dmul>
 8005828:	4b32      	ldr	r3, [pc, #200]	; (80058f4 <scalbn+0xec>)
 800582a:	4604      	mov	r4, r0
 800582c:	429f      	cmp	r7, r3
 800582e:	460d      	mov	r5, r1
 8005830:	da0f      	bge.n	8005852 <scalbn+0x4a>
 8005832:	a32b      	add	r3, pc, #172	; (adr r3, 80058e0 <scalbn+0xd8>)
 8005834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005838:	f7fa fefa 	bl	8000630 <__aeabi_dmul>
 800583c:	e006      	b.n	800584c <scalbn+0x44>
 800583e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005842:	4296      	cmp	r6, r2
 8005844:	d10a      	bne.n	800585c <scalbn+0x54>
 8005846:	4602      	mov	r2, r0
 8005848:	f7fa fd3c 	bl	80002c4 <__adddf3>
 800584c:	4604      	mov	r4, r0
 800584e:	460d      	mov	r5, r1
 8005850:	e020      	b.n	8005894 <scalbn+0x8c>
 8005852:	460b      	mov	r3, r1
 8005854:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005858:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800585c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8005860:	19b9      	adds	r1, r7, r6
 8005862:	4291      	cmp	r1, r2
 8005864:	dd0e      	ble.n	8005884 <scalbn+0x7c>
 8005866:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800586a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800586e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8005872:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8005876:	4820      	ldr	r0, [pc, #128]	; (80058f8 <scalbn+0xf0>)
 8005878:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800587c:	a31a      	add	r3, pc, #104	; (adr r3, 80058e8 <scalbn+0xe0>)
 800587e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005882:	e7d9      	b.n	8005838 <scalbn+0x30>
 8005884:	2900      	cmp	r1, #0
 8005886:	dd08      	ble.n	800589a <scalbn+0x92>
 8005888:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800588c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005890:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8005894:	4620      	mov	r0, r4
 8005896:	4629      	mov	r1, r5
 8005898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800589a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800589e:	da12      	bge.n	80058c6 <scalbn+0xbe>
 80058a0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80058a4:	429f      	cmp	r7, r3
 80058a6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80058aa:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 80058ae:	dcdc      	bgt.n	800586a <scalbn+0x62>
 80058b0:	a30b      	add	r3, pc, #44	; (adr r3, 80058e0 <scalbn+0xd8>)
 80058b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80058ba:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80058be:	480f      	ldr	r0, [pc, #60]	; (80058fc <scalbn+0xf4>)
 80058c0:	f041 011f 	orr.w	r1, r1, #31
 80058c4:	e7b8      	b.n	8005838 <scalbn+0x30>
 80058c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80058ca:	3136      	adds	r1, #54	; 0x36
 80058cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80058d0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80058d4:	4620      	mov	r0, r4
 80058d6:	4629      	mov	r1, r5
 80058d8:	2200      	movs	r2, #0
 80058da:	4b09      	ldr	r3, [pc, #36]	; (8005900 <scalbn+0xf8>)
 80058dc:	e7ac      	b.n	8005838 <scalbn+0x30>
 80058de:	bf00      	nop
 80058e0:	c2f8f359 	.word	0xc2f8f359
 80058e4:	01a56e1f 	.word	0x01a56e1f
 80058e8:	8800759c 	.word	0x8800759c
 80058ec:	7e37e43c 	.word	0x7e37e43c
 80058f0:	43500000 	.word	0x43500000
 80058f4:	ffff3cb0 	.word	0xffff3cb0
 80058f8:	8800759c 	.word	0x8800759c
 80058fc:	c2f8f359 	.word	0xc2f8f359
 8005900:	3c900000 	.word	0x3c900000

08005904 <_init>:
 8005904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005906:	bf00      	nop
 8005908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800590a:	bc08      	pop	{r3}
 800590c:	469e      	mov	lr, r3
 800590e:	4770      	bx	lr

08005910 <_fini>:
 8005910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005912:	bf00      	nop
 8005914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005916:	bc08      	pop	{r3}
 8005918:	469e      	mov	lr, r3
 800591a:	4770      	bx	lr
